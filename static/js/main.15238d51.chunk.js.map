{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","controllers/MainController.js","controllers/RdfController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/OntoSchemaController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","MainController","jsonData","$","ajax","type","url","async","cache","dataType","success","json","this","rulesJson","JSON","parse","stringify","ontoUri","windowUrl","URL","window","location","href","modelId","searchParams","get","buttons","title","elName","origName","mapButtons","Array","isArray","buttonType","name","Promise","originalName","labelEL","key","questions","q","replace","label","question","unfinishedType","rule","console","log","qType","elLabel","preposition","isSameCaseInsensitive","tree","index","node","delUri","value","fatherTypeRelation","includes","uri","result","split","element","push","object","find","text","other","localeCompare","undefined","sensitivity","direction","RdfController","puro","rdf","require","modelURL","crossDomain","xml","puroXML","error","jqXHR","textStatus","errorThrown","alert","document","referrer","relator","fromUri","query","sparqlQuery","deleteDuplicity","fatherElement","returnArr","endCall","elementsUri","length","i","findBTypeRelation","bind","findBTypeChild","forEach","father","fatherType","recursiveFindChild","lastResult","bTypeTree","lastCall","final","sparql","callback","turtle","XMLSerializer","serializeToString","store","graph","serialize","err","str","create","load","results","execute","relationUri","elementUri","properties","duplicity","checkArr","res","property","k","some","concat","splice","OntoModelController","addToOntoModel","ontoType","puroType","relationName","nameWasChange","branchIndex","origUri","elPuroType","elUri","getOntoElement","ontoModel","fromRelation","from","to","updateOntoModel","addRelation","fromType","toType","slice","el","getOntoModel","getElementsRelation","nextRel","getElementOntoType","getElementsByOntoType","origin","changeOrigin","getLastElementUri","j","getLastElement","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","lastEl","ruleKey","moreBranches","passEl","ontoEl","elementFather","lastRelElement","getElementInRelRow","lastElUri","isRelationExist","getOntoBranch","relation","superType","toLowerCase","isRelationComplete","relatedElement","relElements","getElementInRelation","fatherChildren","rels","elements","types","rel","indexOf","getCardinalElement","relationType","all","getOpositeDirection","el1","el2","selectedEl","firstEl","createButtons","ontoModelHistory","ImagController","graphCommand","findLabel","relationSpec","getRelationSpec","base","toKey","trim","relations","normRelType","showType","RuleController","ruleSelection","rules","previousElName","queryTree","relationLabel","offerTypes","needElName","getSpecificRule","offer","additionalQuestion","connect","getQuestion","isElementInstace","elementConsistencyRules","ontoController","check","elTypes","getRelatedTypes","subType","elementConsistencySelection","moreThanOneRule","count","allTypes","suffix","additionalRules","r","addRule","elementConsAddSelection","moreThanOne","bTypeNumber","addRules","getAdditionalRule","selectedType","toString","commonRuleSelection","start","fatherOnto","childPuroType","childType","child","commonRules","elInRelation","indexCount","isNaN","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","OntoScheController","ontoUmlSchema","schemaInit","relCount","ontoClassTransformation","opositeIndex","fromIndex","toIndex","relationTransformation","nodeCopy","nodeCopy2","schemas","validator","compile","getSchema","ONTOUML_2","initJson","ontoClass","parseInt","EventController","rdfController","imageController","ImageController","ruleController","historyController","ontoSchemaController","OntoSchmeController","getFullPath","then","getRelations","elSettings","relationOrderIndex","relationIndex","setIndexexToDefault","firstCall","relationTree","valuation","charAt","toUpperCase","bRelationRules","changeElementsProperty","relationWasSelected","additionalRule","relFlow","lastElInBranch","relationRuleIndex","getDefault","nextTreeBranch","relationEl","ontoRelation","updateCardinality","updateRelationTypes","consistencyExeption","consistencyCheck","countBTypesInTree","getElementByUri","relType","updateRelTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","purType","getNextElement","elementsWithoutType","checkElementsInRelationTree","withoutTypeIndex","commonRule","reload","unfinishedTypes","checkElementsConsistency","exeption","createQuestion","getAllTreeValuations","ontoRel","createRelCardinalityBtn","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","treeEl","connectElement","lastTypes","getElementByProperty","createGraph","fromE","toE","relationFlow","fromB","fromT","ruleClass","toB","toT","labelFromE","selectElementsLabel","labelToE","relOntoType","fromEType","toEType","findRule","condition","validity","relationTreePromise","lastLabel","nextElement","bObjectChild","prevEl","rdfEl","getElementsFromBranch","addIndex","prevAdd","elWithoutType","currEl","childEl","getElementsWithoutType","elementConsitencyTree","elementConsistencyIndex","promiseArr","getRelationBTypes","unshift","returnEl","isElementUseless","areChildrenInBranchUseless","lastRel","lastDirection","lastElement","allBranchBtypes","addToProperty","childRel","consistencyIndex","consistencyTree","elementTypes","connectFrom","checkDuplicity","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","prop","transform","Layout","props","svg","setState","eventController","state","iframeURL","getIframeURL","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","PuroModel","onLoad","loaded","src","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","handleChangeName","fadeTo","slideUp","svgBlob","Blob","createObjectURL","handleDownloadSchema","ontoSchema","getOntoSchema","fileDownload","data-toggle","data-target","disabled","data-dismiss","confirm","placeholder","onChange","lenght","onClickDownloadSchema","elNames","class","role","TypeButtons","refs","createRef","ref","filter","val","relFrom","relTo","download","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.15238d51.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 304,\n\t\"./locale.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 658;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 794;","var map = {\n\t\"./N3Lexer\": 196,\n\t\"./N3Lexer.js\": 196,\n\t\"./N3Parser\": 197,\n\t\"./N3Parser.js\": 197,\n\t\"./N3Store\": 359,\n\t\"./N3Store.js\": 359,\n\t\"./N3StreamParser\": 360,\n\t\"./N3StreamParser.js\": 360,\n\t\"./N3StreamWriter\": 361,\n\t\"./N3StreamWriter.js\": 361,\n\t\"./N3Util\": 198,\n\t\"./N3Util.js\": 198,\n\t\"./N3Writer\": 199,\n\t\"./N3Writer.js\": 199\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 822;","import $ from 'jquery';\r\nexport default class MainController{\r\n    \r\n    constructor()\r\n    {\r\n        \r\n        let jsonData;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"rules.json\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function(json) {\r\n                jsonData = json;\r\n            }\r\n        });\r\n\r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData)); \r\n        this.ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\";\r\n\r\n        const windowUrl = new URL(window.location.href);\r\n        this.modelId = windowUrl.searchParams.get(\"model\");\r\n    }\r\n    // orgin lze držet jako property objektu \r\n    // uri lze držet v property objektu \r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        \r\n        \r\n        //\"uri\": unfinishedTypes[0].element\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n     \r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    getQuestion(labelEL, key)\r\n    {\r\n\r\n        for (let q of this.rulesJson.questions)\r\n        {\r\n            \r\n            if (q.type === key)\r\n            {\r\n                const replace = typeof labelEL === \"string\" ? labelEL : labelEL.label; \r\n                return q.question.replace(\"VAL\", replace); \r\n            }\r\n        }\r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            console.log(unfinishedType)\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", unfinishedType.elLabel).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            const preposition = this.isSameCaseInsensitive(unfinishedType.key, \"connect\") ? \" to \" : \" of \";\r\n            return \"What is \" + unfinishedType.key + preposition + unfinishedType.elLabel +\"?\";\r\n        }\r\n\r\n    }\r\n\r\n    countBTypesInTree(tree)\r\n    {\r\n        let index = 0; \r\n        for (let node of tree)\r\n        {\r\n            if (this.delUri(node.type.value) === \"BType\" && !node.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n            {\r\n                index ++; \r\n            }\r\n        }\r\n\r\n        return index; \r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n     getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n      }\r\n\r\n    isSameCaseInsensitive(text, other) {\r\n        return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;\r\n    }\r\n\r\n    getOpositeDirection (direction)\r\n    {\r\n        return  direction = direction === \"from\" ? \"to\" : \"from\"; \r\n    }\r\n\r\n\r\n}","import $ from 'jquery';\r\nimport MainController from './MainController';\r\n\r\n\r\nexport default class RdfController extends MainController {\r\n    \r\n    constructor() {\r\n        super(); \r\n        this.rdf = require('rdflib');\r\n        let puro ;\r\n        \r\n        const modelURL = this.rulesJson[\"modelURL\"].replace(\"MODELID\", this.modelId)\r\n        // puroOutput.xml\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: modelURL,\r\n            crossDomain: true,\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n          \r\n                this.puroXML = xml;\r\n                console.log(this.puroXML)\r\n                puro = xml; \r\n            },\r\n            error: function (jqXHR, textStatus, errorThrown) {\r\n             alert(\"There is the problem to load serialized PURO model! \\n\" + errorThrown ); \r\n             window.location.replace(document.referrer); \r\n            }\r\n        });\r\n        \r\n        this.puroXML = puro; \r\n     \r\n    }\r\n\r\n\r\n    getRelatorBtype  (relator, fromUri) \r\n    {\r\n            var query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findBTypeRelation (fatherElement, returnArr,endCall)  \r\n    {\r\n            \r\n            var elementsUri = fatherElement.uri.value;\r\n            var query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label . \r\n                \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                var checkArr = []; \r\n                var connect = [];\r\n               \r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    // otestovat jak funguje v případě dvou \r\n                    \r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    //POZOR MUZE BYT CHYB kvuli opakovani\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n\r\n    findBTypeChild  (fatherElement, returnArr,endCall) \r\n        {\r\n               \r\n                const elementsUri = fatherElement.uri.value;\r\n                \r\n                const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?valuationLabel ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelaion}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, result => {  \r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                  \r\n                    if (result.length > 0)\r\n                    {\r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        }\r\n                    }\r\n                    else\r\n                    { \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                });          \r\n             }\r\n\r\n             getFullPath ()  \r\n             {\r\n                 const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri} ?child a ?childType . ?child ?childRel ?uri . } \r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                     FILTER NOT EXISTS {?uri puro:instanceOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                  this.sparqlQuery(query, function callback(result) {\r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            // tady to nastav ve SPARQ \r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                  \r\n                      this.deleteDuplicity(result,[\"valuation\", \"connect\", \"childType\", \"child\", \"childRel\"]);\r\n                      this.recursiveFindChild(0,result,[], lastResult => {\r\n                             resolve(lastResult);\r\n                     });\r\n                 }.bind(this));\r\n             });\r\n             }\r\n\r\n             recursiveFindChild (i, result, bTypeTree,lastCall, type)\r\n             {      \r\n                 //last change \r\n                 if(i >= result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        });\r\n                     }\r\n                     else\r\n                     {\r\n                        this.findBTypeChild(result[i],bTypeTree,  final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        });\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             sparqlQuery (sparql, callback)  {\r\n                const puroXML = new XMLSerializer().serializeToString(this.puroXML);\r\n               \r\n                const store = this.rdf.graph();\r\n                const contentType = 'application/rdf+xml';\r\n                const baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                const rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n\r\n     \r\n            //from nebo to poslat si ukazatel? \r\n            getRelationBTypes (relationUri) \r\n            {\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                    this.sparqlQuery(query, (result) => {\r\n                        \r\n                        // result.push({uri: {token:\"uri\", value: relationUri}});\r\n                \r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            //začátek hlavního\r\n            getRelations  () \r\n            {\r\n                // ještě by to chtělo sjednotit do pole \r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                  {?from a puro:BObject}\r\n                  UNION \r\n                  {?from a puro:BType}\r\n                  {?to a puro:BObject}\r\n                  UNION\r\n                  {?to a puro:BType} \r\n                  ?to a ?toType . \r\n                  ?from a ?fromType . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            findRelation  (elementUri) {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            async firstFind  ()  {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //result[index].connect\r\n            deleteDuplicity  (result, properties) {\r\n                var duplicity;\r\n                var checkArr = []; \r\n                \r\n                // sjednocení datových typů na pole\r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class OntoModelController extends MainController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction, elName, nameWasChange, ontoUri, branchIndex, origUri) => \r\n    {\r\n    \r\n        if (this.getOntoElement(this.ontoUri + elName) === false)\r\n        {\r\n            let elPuroType;\r\n            let elLabel;\r\n            let elUri; \r\n            nameWasChange = nameWasChange === undefined ? false : nameWasChange;\r\n            origUri = origUri === undefined ? \"\" : origUri;\r\n            if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n            {\r\n\r\n                elPuroType = false;\r\n                elLabel = elName;\r\n                elUri = this.ontoUri + elName; \r\n\r\n            }\r\n            else\r\n            {\r\n                elPuroType = puroType;\r\n                elLabel = nameWasChange ? elName : label; \r\n                elUri = uri; \r\n            }\r\n\r\n            if (this.getOntoElement(elUri) === false)\r\n            {\r\n                this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: [relationName], direction: [direction], from: [undefined], to:[undefined],type:\"Class\", branchIndex: [branchIndex], origUri:origUri});\r\n            }    \r\n        }\r\n        else\r\n        {\r\n            uri = ontoUri + elName; \r\n            this.updateOntoModel(uri, \"fromRelation\",relationName);\r\n            this.updateOntoModel(uri, \"direction\",direction);\r\n            this.updateOntoModel(uri, \"branchIndex\",branchIndex);\r\n        }\r\n        console.log(this.ontoModel)\r\n        return this.ontoModel; \r\n    }\r\n\r\n    isRelationComplete (relation)\r\n    {\r\n        if (relation.type === \"relation\" && relation.from.length > 0 && relation.to.length > 0)\r\n        {\r\n            return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    getCardinalElement (element, superType)\r\n    {\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.from[0] === element && superType === false)\r\n            {\r\n                return node.to[0]; \r\n            }\r\n            else if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.to[0] === element && superType === true)\r\n            {\r\n                return node.from[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getElementByProperty (property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[property] === value)\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    getReletadELement (element, relationName)\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && (node.from.includes(element.uri) || node.to.includes(element.uri)) && this.isRelationComplete(node))\r\n            {\r\n                let relatedElement; \r\n                if (node.from.includes(element.uri)) \r\n                {\r\n                    relatedElement = node.to[0];\r\n                }\r\n                else\r\n                {\r\n                    relatedElement = node.from[0];\r\n                } \r\n                relatedElement = this.getOntoElement(relatedElement);\r\n                if (relatedElement.fromRelation.includes(relationName))\r\n                {\r\n                    return relatedElement; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    addRelation = (type, from, to, uri,label, fromType, toType) => \r\n    {\r\n        //fromT toT\r\n        uri = uri === undefined ? this.ontoUri.slice(0,-1) + \"/relation/\"+type+\"/\"+this.delUri(from)+this.delUri(to) : uri; \r\n        fromType = fromType === undefined ? [] : [fromType];\r\n        toType = toType === undefined ? [] : [toType]; \r\n        from = from === undefined || \"\" || from.length === 0 ? [] : [from];\r\n        to = to === undefined || \"\" || to.length === 0 ? [] : [to];\r\n        \r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && el.from.includes(from) && el.to.includes(to))\r\n            {\r\n                return this.ontoModel;\r\n            }\r\n        }\r\n\r\n\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from: from, to: to,uri:uri, label:label, fromType: fromType, toType: toType, fromRelation: []});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    updateOntoModel = (elementsUri, property, value, duplicity = true) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    if (duplicity === true || !node[property].includes(value))\r\n                    {\r\n                        node[property].push(value);\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if (duplicity === true || node[property] !== value)\r\n                    {\r\n                        node[property] = value;\r\n                    } \r\n                }\r\n                return this.ontoModel;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addToProperty (uri, property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                 \r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    node[property].push(value); \r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n        \r\n       \r\n        let returnArr = []; \r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            let nextRel = false;\r\n            let nextOther = false;\r\n            if (Array.isArray(node[direction]))\r\n            {\r\n                nextRel = node[direction].includes(uri) ? true : false; \r\n            }\r\n\r\n        \r\n            if (node[\"type\"] === \"relation\" && nextRel === true)\r\n            {\r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" &&  (node[\"from\"].includes(uri) || node[\"to\"].includes(uri)))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n    getElementsByOntoType = (type, origin) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType && (origin === undefined || node.fromRelation.includes(origin)))\r\n            {  \r\n                result.push(node.uri);\r\n            }\r\n       }\r\n       return result; \r\n\r\n    }\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n    \r\n\r\n    getLastElementUri = (origin, direction) => \r\n    {\r\n        var uri; \r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n\r\n            for (let j = 0; j < this.ontoModel[i].fromRelation.length; j++) {\r\n               \r\n                if (this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\")\r\n                {\r\n                    uri = this.ontoModel[i].uri;\r\n                    return uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && direction === undefined)\r\n                {\r\n                    uri = this.ontoModel[i].uri;\r\n                    return uri; \r\n                }\r\n                else if(origin === undefined && direction === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    getElementInRelRow (lastElUri)\r\n    {\r\n        const relElements = this.getElementInRelation(lastElUri,\"*\",\"from\",false); \r\n        if (relElements.length === 0)\r\n        {\r\n            return lastElUri;\r\n        }\r\n        \r\n        const fatherChildren = this.getElementInRelation(relElements[0].element.uri,\"*\",\"to\",this.getOntoElement(lastElUri).ontoType); \r\n        console.log(fatherChildren)\r\n        console.log(fatherChildren[0].element.uri)\r\n        return fatherChildren[0].element.uri; \r\n\r\n    }\r\n\r\n    getLastElement = (origin, direction) =>\r\n    {\r\n        const uri = this.getLastElementUri(origin, direction);\r\n        return this.getOntoElement(uri); \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, lastEl, puroType, ontoUri, ruleKey, nameWasChange, moreBranches) => \r\n    {\r\n        const ontoEl = this.getOntoElement(selectedUri);\r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false && (element !== false || ontoEl !== false))\r\n        {\r\n           \r\n            let father;\r\n            let passEl; \r\n            \r\n            if (puroType === \"superType\")\r\n            {\r\n                father = this.ontoUri + elName;\r\n                passEl = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = this.ontoUri + elName;    \r\n                father = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else\r\n            {\r\n                if (element !== false)\r\n                {\r\n                    father = element.father[0] === undefined ? element.uri.value : element.father[0];\r\n                }\r\n                else\r\n                {\r\n                    father = ontoEl.uri;\r\n                }\r\n                passEl = this.ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if (relationUri === null)\r\n        {\r\n            if (element.father.length > 0)\r\n            {\r\n\r\n                return [element.father[0], element.uri.value];\r\n            }\r\n            else return false; \r\n            \r\n        }\r\n        else if (puroType.includes(\"elementSelection\") || (element !== false && this.getOntoElement(element.father[0]) !== false))\r\n        {   \r\n      \r\n            let elementFather = this.getOntoElement(element.father[0]);\r\n            if (puroType.includes(\"invert\") || !puroType.includes(\"elementSelection\"))\r\n            {\r\n                return [element.uri.value, elementFather.uri];\r\n            }\r\n            else\r\n            {\r\n                return [elementFather.uri,element.uri.value];\r\n            \r\n            }\r\n        }\r\n        else if((addRulesLenght === 0 && lastEl === true) || element === false )\r\n        {\r\n            //koko\r\n            let lastRelElement = this.getLastElement(relationUri);\r\n            lastRelElement = this.getOntoElement(this.getElementInRelRow(lastRelElement.uri))\r\n          \r\n            const passEl = (element === false) ? this.ontoUri + elName : selectedUri;\r\n\r\n            let lastElUri = this.getLastElementUri(relationUri,ruleKey);\r\n            lastElUri = this.getElementInRelRow(lastElUri); \r\n    \r\n            if (lastRelElement !== false && (lastRelElement.direction[lastRelElement.direction.length - 1] !== ruleKey || moreBranches === true) && addRulesLenght === 0)\r\n            {\r\n                if (!this.isRelationExist(lastElUri,passEl) &&  this.getOntoBranch(relationUri, ruleKey).length > 1)\r\n                {\r\n                    return [lastElUri, passEl];\r\n                }\r\n    \r\n                this.updateOntoModel(relationUri,ruleKey,passEl, false);\r\n                \r\n                return relationUri; \r\n            }\r\n            else if (element === false || lastRelElement !== false)\r\n            {\r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n     \r\n    }\r\n\r\n    checkDuplicity (label) \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes (elUri, direction, ontoType) \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n        for (let rel of rels)\r\n        {\r\n          //Arrow \r\n          \r\n          if (rel.ontoType === ontoType || (ontoType === \"Generalization\" && rel.ontoType.includes(\"memberOf\")))\r\n          {\r\n              const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType === \"Relator\")\r\n          {\r\n            types.push(rel.ontoType); \r\n          }\r\n          else if (ontoType === false)\r\n          {\r\n            const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n            elements.push(el);\r\n            types.push(this.getElementOntoType(el)); \r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    getElementsFromBranch(element)\r\n    {\r\n\r\n        let returnArr = [element];\r\n        let el = element;\r\n    \r\n        while (this.getCardinalElement(el,true) !== false)\r\n        {   \r\n            el = this.getCardinalElement(el, true);\r\n            returnArr.push(el);\r\n        }\r\n\r\n        return returnArr; \r\n    }\r\n\r\n    getElementInRelation(elementUri, relationType, direction, ontoType)\r\n    {\r\n        let returnArr = [];\r\n        const all = relationType === \"*\" ? true : false; \r\n        ontoType = ontoType === undefined || false ? false : ontoType; \r\n\r\n        for (let relation of this.ontoModel)\r\n        {\r\n     \r\n            if (relation.type === \"relation\" && (relation.ontoType === relationType || all) && relation[this.getOpositeDirection(direction)].includes(elementUri))\r\n            {   \r\n                let el = this.getOntoElement(relation[direction][0]);\r\n         \r\n                if (ontoType === false || ontoType === el.ontoType)\r\n                {\r\n                    returnArr.push({element : el, relationType: relation.ontoType}); \r\n                } \r\n            }\r\n        }\r\n        return returnArr; \r\n    }\r\n\r\n    isRelationExist(el1, el2)\r\n    {\r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && (el.from === el1 && el.to === el2) || (el.from === el2 && el.to === el1))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n    getOntoBranch(relation, key)\r\n    {\r\n        let returnArr = [];\r\n        for (let el of this.ontoModel)\r\n        {\r\n            for (let index in el.fromRelation)\r\n            {\r\n                if (el.fromRelation[index] === relation && el.direction[index] === key)\r\n                {\r\n                    returnArr.push(el);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n    \r\n    connectToBranchElement(relation, key, selectedEl)\r\n    {\r\n\r\n        const question =  \"To which element is the \" + this.delUri(selectedEl.uri.value) + \" connected?\";\r\n\r\n        const firstEl = (this.getOntoBranch(relation, key)[0]);\r\n        const lastEl = this.getLastElement(relation, key);\r\n\r\n        if (firstEl === undefined || lastEl === false)\r\n        {\r\n            return false\r\n        }\r\n        else\r\n        {\r\n            \r\n            return this.createButtons([firstEl.label, lastEl.label],question, \"nextBranchElements\", false, \"\");\r\n        }\r\n\r\n        if (firstEl.uri === lastEl.uri)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n           \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph  (ontoModel) \r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to[0]) !== false && this.findLabel(node.from[0]) !== false) {\r\n                if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from.length > 0 && node.to.length > 0) \r\n                    {\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key] ? '\"'+node.fromType[key][1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\";\r\n                        }\r\n\r\n                      //  graphCommand += this.findLabel(node.from) +\" \"+ (fromT ? '\"'+fromT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+fromT[1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\"; \r\n                        \r\n                        for (let key in node.to)\r\n                        {\r\n                            graphCommand += node.label +\" \"+ (node.toType[key] ? '\"'+node.toType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key]  ? '\"'+node.toType[key][1]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + \" : <<Mediation>>\\n\"; \r\n                        }\r\n                      \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    const relationSpec = this.getRelationSpec(node.ontoType);\r\n                    if (node.from.length === node.to.length)\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0] + (node.toType[key] ? '\"'+node.toType[key]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            let base = this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0];\r\n                            \r\n                            for (let toKey in node.to)\r\n                            {\r\n                                graphCommand += base + (node.toType[toKey] ? '\"'+node.toType[toKey]+'\"' : \"\") + \" \" + this.findLabel(node.to[toKey]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n    \r\n    getRelationSpec (ontoType)\r\n    {\r\n        for(let rel of this.rulesJson.relations)\r\n        {\r\n            \r\n            if (ontoType in rel)\r\n            {\r\n                \r\n                const normRelType = rel[ontoType]; \r\n                const showType = \"showType\" in rel && rel[\"showType\"] === true ? true : false;  \r\n                let code; \r\n                switch(normRelType.toLowerCase())\r\n                {\r\n                    case \"arrowline\": code = \" <|-- \";  \r\n                        break; \r\n                    case \"simpleline\": code = \" -- \"; \r\n                        break; \r\n                    case \"dashedline\": code = \" .. \"; \r\n                        break; \r\n                    case \"composition\": code = \" *-- \"; \r\n                        break; \r\n                    case \"aggregation\": code = \" o-- \"; \r\n                        break; \r\n                    default:  code = \" -- \"; \r\n                }\r\n            \r\n                return [code, showType]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n    \r\n\r\n    //ruleSelection queryTree, \r\n    ruleSelection = (rules, key, element, previousElName, rule, queryTree, relationLabel) => \r\n    {\r\n        \r\n        let commands; \r\n        let additionalRules;\r\n        let offerTypes;\r\n        let uri;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            commands = this.getSpecificRule(rules,key);\r\n            //additionalRules = this.getAdditionalRule(commands,ontoType);\r\n            //offerTypes = (additionalRules.length > 0 ) ? offerTypes = additionalRules : offerTypes = commands.offer;\r\n            offerTypes = commands.offer   \r\n        }\r\n\r\n        //z elementu udělat otázku\r\n        if (element !== false)\r\n        {\r\n            let additionalQuestion = \"\";\r\n            \r\n            if (element.connect.length > 1)\r\n            { \r\n                additionalQuestion = \"\\n \" + this.getQuestion(relationLabel, \"relSpecific\");\r\n            }\r\n            \r\n            if (this.isElementInstace(element,queryTree))\r\n            {\r\n                needElName =true;\r\n                uri = element.uri.value;\r\n\r\n\r\n\r\n                question = this.rulesJson.questions[1].question.replace(\"VAL\",element.label.value) + additionalQuestion;\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[0].question.replace(\"VAL\",element.label.value) + additionalQuestion;\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            //zjisti zda je chyby nebno ne \r\n            needElName = true;\r\n\r\n            //Třeba dodělat Replace!!\r\n\r\n            for (let q of this.rulesJson.questions)\r\n            {\r\n                if (q.type === \"bTypeChild\")\r\n                {\r\n                    question = q.question.replace(\"VAL\", previousElName);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n    isElementInstace = (element, queryTree) =>\r\n    {\r\n        for (let node of queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n\r\n    moreThanOneRule (ontoController, element,count, check)\r\n    {\r\n        const elInRelation = ontoController.getElementInRelation(element.uri,\"*\",\"from\",false)[0];   \r\n    \r\n        if (ontoController.getElementInRelation(elInRelation.element.uri,elInRelation.relationType,\"to\", element.ontoType).length < count)\r\n        {\r\n            check.push({key: \"subType\", types: [element.ontoType], element: elInRelation.element.uri, rule:{type:[element.ontoType],question:this.getQuestion(elInRelation.element,\"moreThanOne\")}}); \r\n        }\r\n\r\n        return check; \r\n\r\n    }\r\n\r\n    // this.ontoController.getOntoElement(this.relation.uri.value);\r\n    elementConsistencyRules = (element,  ontoController) => \r\n    {\r\n            // v případě undefinied vyhoď, že pravidlo není definováno \r\n            let rules = this.rulesJson[element.ontoType];    \r\n            let check = []; \r\n        \r\n            \r\n\r\n            //Tady by měla být pole jelikož to může být 1:N \r\n            // !!! Převod na metodu a úprava dle pravidel\r\n            // udělat connect -> subtype -> supertype jenom v případě arrow \r\n\r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Generalization\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Generalization\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n            \r\n            for (let rule of rules)\r\n            {\r\n             \r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes, ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes,ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes, ontoController);\r\n                if (rule.key === \"moreThanOne\")\r\n                {\r\n                    check = this.moreThanOneRule(ontoController,element,rule.count,check);\r\n                }\r\n            }\r\n\r\n            //Kontrola none a spojených typů!! \r\n\r\n            if ((check.length > 0 && check[0].types.includes(\"Relator\") && check[0].types.includes(\"None\")))\r\n            {\r\n                check.splice(0, 1);  \r\n            }\r\n\r\n            for (let i = 0; i < check.length; i++) {\r\n                check[i][\"elLabel\"] =  ontoController.getOntoElement(check[i].element).label;  \r\n            }\r\n\r\n\r\n\r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection = (rule,elTypes,key,element,check,rules,allTypes, ontoController) =>\r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                \r\n                const suffix = key[key.length - 1] === \"e\" ? \"d\" : \"ed\";\r\n                const additionalRules =  this.getSpecificRule(rules, key + suffix, true);\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    // if includes none -> zkontrolovat lenght superType -> zeptat se jestli chci doplnit superType -> nabídnout co je v tabulce -> zkontrolovat jestli už není\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n\r\n                }\r\n                else \r\n                {\r\n                    if (additionalRules !== false)\r\n                    {\r\n                      \r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            console.log(JSON.parse(JSON.stringify(addRule)))\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                                if (\"moreThanOne\" in addRule && addRule[\"moreThanOne\"] === true)\r\n                                {\r\n                                    check = this.moreThanOneRule(ontoController,element,addRule.count,check);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n    \r\n        if (type in rule)\r\n        {\r\n      \r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                \r\n                for (let index in check)\r\n                {\r\n                  \r\n                    if (check[index].key === type && check[index].element === element.uri)\r\n                    {\r\n                        check.splice(index, 1);\r\n                    }\r\n                }\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n            else if (\"moreThanOne\" in rule && rule[\"moreThanOne\"] === true)\r\n            {\r\n                //vrat element dej fathera \r\n            }\r\n\r\n        }\r\n    \r\n        return check; \r\n       \r\n    }\r\n\r\n    numberOfRuleStep (relationType, key, bTypeNumber)\r\n    {\r\n        const rule = this.getSpecificRule(this.rulesJson[relationType], key, false, bTypeNumber);\r\n        let indexCount = 0; \r\n\r\n        for (let key in rule)\r\n        {\r\n            if (!isNaN(key))\r\n            {\r\n                indexCount ++; \r\n            }\r\n        }\r\n\r\n        return indexCount; \r\n    }\r\n\r\n    getSpecificRule = (rules, key, moreThanOne, bTypeNumber) =>\r\n    {\r\n        let addRules = [];\r\n        \r\n        bTypeNumber = bTypeNumber === undefined ? false : bTypeNumber; \r\n        moreThanOne = moreThanOne === undefined ? false : moreThanOne; \r\n        \r\n        if (bTypeNumber !== false)\r\n        {\r\n            for (let node of rules)\r\n            {\r\n                if (node.key === key &&  (\"bTypeNumber\" in node) && node.bTypeNumber.includes(bTypeNumber))\r\n                {\r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n\r\n       \r\n        }\r\n            for (let node of rules)\r\n            {\r\n                \r\n                if (node.key === key)\r\n                {\r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n        \r\n\r\n\r\n        // Tady možná hvězda \r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n\r\n\r\n    getAdditionalRule = (rule, selectedType, index) =>\r\n    {\r\n        /*\r\n        if (selectedType in rule)\r\n        {\r\n            alert(\"bam\")\r\n            console.log(rule)\r\n            return rule[selectedType];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n        */\r\n        if (rule !== false && index.toString() in rule && selectedType in rule[index])\r\n        {\r\n            console.log(rule[index][selectedType])\r\n            return rule[index][selectedType]; \r\n        }\r\n        \r\n        return [];\r\n    \r\n    }\r\n\r\n\r\n    commonRuleSelection = (element, start, ontoModel) => \r\n    {\r\n        let result = [];\r\n\r\n        // tohle vyřeš na úrovni onto modelu!\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        //const connection =  element.connect.length > 0 ? true : false;  \r\n        let type = \"elementSelection\"; \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        \r\n        for (let node of ontoModel)\r\n        {\r\n            if (element.father.includes(node.uri)) {\r\n                fatherOnto.push(node.ontoType);\r\n            }\r\n            \r\n        }\r\n\r\n        // Změnit!! \r\n        for (let rule of this.rulesJson.commonRules)\r\n        {\r\n\r\n            /*((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))) &&\r\n            (element.childType.some(r=> rule.childPuro.includes(r) || \r\n            (rule.childPuro.includes(\"none\"))) \r\n           ))\r\n            */\r\n            console.log(start === true)\r\n            console.log(rule.fatherOnto === \"NoRelation\")\r\n            console.log(rule.fatherOnto)\r\n           if (start === true && rule.fatherOnto[0] === \"NoRelation\")\r\n           {\r\n             const question = \"Which type is \"+element.label.value+\"?\";\r\n             return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n           }\r\n           else if ((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))))\r\n            {\r\n                \r\n                if (\"invert\" in rule && rule[\"invert\"] === true)\r\n                {\r\n                    type += \"-invert\"\r\n                }\r\n\r\n                // tady doplň máš i rule \r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import EventController from \"./EventController\";\r\n\r\nexport default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2] !== undefined && this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        console.log(this.propertiesHistory)\r\n        console.log(this.inputVariables)\r\n        console.log(this.ontoModelHistory)\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","\r\nexport default class OntoScheController {\r\n\r\n    /*\r\n    constructor()\r\n    {\r\n\r\n       const mod = this.initJson();\r\n       console.log(mod)\r\n       const model = this.transform(mod);\r\n\r\n\r\n\r\n         console.log(model);\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(model);\r\n\r\n        if (isValid)\r\n        {\r\n          console.log(\"ok\")\r\n        }\r\n        else\r\n        {\r\n          console.log(validator.errors);\r\n        }\r\n    } */\r\n\r\n    transform (ontoModel)\r\n    {\r\n        const ontoUmlSchema = this.schemaInit(); \r\n        let relCount = 0; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if(node.type === \"Class\" || node.ontoType.toLowerCase() === \"relator\")\r\n            {\r\n              ontoUmlSchema[\"contents\"].push(this.ontoClassTransformation(node)); \r\n            }\r\n        }\r\n        console.log(ontoUmlSchema)\r\n        // Relations have to be added at the end \r\n        for (let node of ontoModel)\r\n        {\r\n          if (node.type === \"relation\" && node.ontoType.toLowerCase() !== \"relator\") {\r\n              let key; \r\n              \r\n              if (node.from.length >= node.to.length)\r\n              {\r\n                 key = \"from\";\r\n              }\r\n              else\r\n              {\r\n                key = \"to\"; \r\n              }\r\n              \r\n              let opositeIndex = 0;\r\n              for (let index in node[key])\r\n              {\r\n                 \r\n                 let fromIndex = key === \"from\" ? index : opositeIndex; \r\n                 let toIndex = key === \"to\" ? index : opositeIndex; \r\n                  \r\n                 ontoUmlSchema[\"contents\"].push(this.relationTransformation(node, relCount, fromIndex, toIndex));\r\n                 relCount += 2;  \r\n                 if (index <= node[key].length)\r\n                 {\r\n                    opositeIndex = index; \r\n                 }\r\n              }\r\n          }\r\n          else if (node.ontoType.toLowerCase() === \"relator\")\r\n          {\r\n            let nodeCopy = JSON.parse(JSON.stringify(node));\r\n            let nodeCopy2 = JSON.parse(JSON.stringify(node));  \r\n            \r\n            let key; \r\n              \r\n            if (node.from.length >= node.to.length)\r\n            {\r\n               key = \"from\";\r\n            }\r\n            else\r\n            {\r\n              key = \"to\"; \r\n            }\r\n            \r\n            let opositeIndex = 0;\r\n\r\n            for (let index in node[key])\r\n            {\r\n              nodeCopy[\"uri\"] += \"rel1\"\r\n              nodeCopy2[\"uri\"] += \"rel2\"\r\n        \r\n              nodeCopy[\"ontoType\"] += \"mediation\"\r\n              nodeCopy2[\"ontoType\"] += \"mediation\"\r\n              \r\n              if (key === \"from\")\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][index][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][index][1];\r\n\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][opositeIndex][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][opositeIndex][1];\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][index]];\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][opositeIndex]];\r\n              }\r\n              else\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][opositeIndex][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][opositeIndex][1];\r\n\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][index][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][index][1];\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][opositeIndex]];\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][index]];\r\n              }\r\n              \r\n              nodeCopy[\"to\"] = [node.uri];\r\n              nodeCopy2[\"from\"] = [node.uri];\r\n              \r\n              ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy, relCount, 0,0));\r\n              relCount += 2;\r\n  \r\n              ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy2, relCount,0,0));\r\n              relCount += 2;  \r\n              \r\n              if (index <= node[key].length)\r\n              {\r\n                 opositeIndex = index; \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(ontoUmlSchema);\r\n\r\n        if (isValid)\r\n        {\r\n          return ontoUmlSchema; \r\n        }\r\n        else\r\n        {\r\n          alert(\"Model is not valid! Check OntoSchemaCotroller!\"); \r\n          return {}; \r\n        }\r\n    }\r\n\r\n    schemaInit ()\r\n    {\r\n        return {\r\n            \"type\": \"Package\",\r\n            \"id\": \"puroConversion\",\r\n            \"name\": null,\r\n            \"description\": null,\r\n            \"contents\": [],\r\n            \"propertyAssignments\": null\r\n            }\r\n    }\r\n\r\n    ontoClassTransformation (ontoClass)\r\n    {\r\n      return  {\r\n            \"type\": \"Class\",\r\n            \"id\": ontoClass.uri ,\r\n            \"name\": ontoClass.label,\r\n            \"description\": null,\r\n            \"properties\": null,\r\n            \"literals\": null,\r\n            \"propertyAssignments\": null,\r\n            \"stereotypes\": [ontoClass.ontoType.toLowerCase()],\r\n            \"isAbstract\": null,\r\n            \"isDerived\": null\r\n            }\r\n    }\r\n\r\n    relationTransformation (relation, relCount, fromIndex, toIndex)\r\n    {\r\n\r\n        if (relation.ontoType === \"Generalization\")\r\n        {\r\n             return {\r\n                \"type\": \"Generalization\",\r\n                \"id\": relation.uri,\r\n                \"name\": null,\r\n                \"description\": null,\r\n                \"general\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.from[fromIndex]\r\n                },\r\n                \"specific\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.to[toIndex]\r\n                },\r\n                \"propertyAssignments\": {\r\n                  \"nonStandardProperty\": null\r\n                }\r\n              };\r\n        }\r\n        else\r\n        {\r\n            return {\r\n              \"type\": \"Relation\",\r\n              \"id\": relation.uri,\r\n              \"name\": null,\r\n              \"description\": null,\r\n              \"properties\": [\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + relCount,\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.from[fromIndex]\r\n                  },\r\n                  \"cardinality\": relation.fromType[fromIndex] === \"\" || undefined ? null : relation.fromType[fromIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                },\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + (parseInt(relCount) + 1),\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.to[toIndex]\r\n                  },\r\n                  \"cardinality\": relation.toType[toIndex] === \"\" || undefined ? null : relation.toType[toIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                }\r\n              ],\r\n              \"propertyAssignments\": {\r\n                \"nonStandardProperty\": null\r\n              },\r\n              \"stereotypes\": [relation.ontoType.toLowerCase()],\r\n              \"isAbstract\": true,\r\n              \"isDerived\": false\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    initJson()\r\n    {\r\n      return JSON.parse(`[\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Characterization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Book\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Topic\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#has_topic\",\r\n          \"label\": \"has_topic\",\r\n          \"fromType\": [\r\n            \"1\"\r\n          ],\r\n          \"toType\": [\r\n            \"1\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Book\",\r\n          \"label\": \"Book\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#has_topic\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\",\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Topic\",\r\n          \"label\": \"Topic\",\r\n          \"ontoType\": \"Mode\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#has_topic\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Topic\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#DDC_Topic\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/TopicDDC_Topic\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#DDC_Topic\",\r\n          \"label\": \"DDC_Topic\",\r\n          \"ontoType\": \"Subkind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#has_topic\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Relator\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#q\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Location\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#published_in\",\r\n          \"label\": \"published_in\",\r\n          \"fromType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"toType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Book\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#q\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/Bookq\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#q\",\r\n          \"label\": \"q\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#w\",\r\n          \"label\": \"w\",\r\n          \"ontoType\": \"Datatype\",\r\n          \"puroType\": \"BValue\",\r\n          \"fromRelation\": [\r\n            {\r\n              \"token\": \"uri\",\r\n              \"value\": \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n            }\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            null\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"connect\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#w\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/connect/published_inw\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"*\"\r\n          ],\r\n          \"toType\": [\r\n            \"*\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Location\",\r\n          \"label\": \"Location\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#e\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Location\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/eLocation\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#e\",\r\n          \"label\": \"e\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        }\r\n      ]`); \r\n    }\r\n}","import RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\nimport OntoSchmeController from './OntoSchemaController.js';\r\n\r\n//chyba nejspíše bude v RDF!! v relationTree je instance v případě prvního XML tam instance není, history of dogs je smazané, tak udělej příklad s tím!!!\r\n// TODO -> v případě dvou otců projdi cyklem a zkontroluj oba!!!!\r\n// TODO -> vyřešit vazby\r\n// TODO -> next element do objektového schématu -> zatím prototyp \r\n// TODO -> třída element pro sjednocení properties \r\n// UNDO \r\n\r\n// Udělat material \r\n// Udělat derivation \r\n// zkontrolovat jestli \r\n\r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();   \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController();\r\n        this.historyController = new HistoryController();\r\n        this.ontoSchemaController = new OntoSchmeController(); \r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;          \r\n        });\r\n\r\n                     \r\n        \r\n\r\n\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    getDefault (firstCall)\r\n    {\r\n      \r\n        // tady se zeptej na type relationu \r\n        // tohle není do defaultu ale do next element\r\n        // hod vyjmku v případě když nebude žádný relation k dispozic\r\n       \r\n        if (this.relationOrderIndex === this.relations.length || this.relations.length === 0)\r\n        {\r\n            if (firstCall === true)\r\n            {\r\n                \r\n                this.relationTree = this.queryTree;\r\n            \r\n                this.ruleKey = \"from\";\r\n                this.elementUri = this.relationTree[this.relationOrderIndex].uri.value;\r\n                this.relation = {uri:{value: null}};\r\n                return this.ruleController.commonRuleSelection(this.relationTree[this.relationOrderIndex], true,this.ontoController.getOntoModel());\r\n            }\r\n            alert(\"Transformation is comlete!!!\");\r\n            return {buttons: [], title: \"The End\", type: \"end\"};\r\n        }\r\n\r\n        \r\n\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n           \r\n            //return this.nextElement(\"Relator\",this.relation.uri.value,\"BRelation\",\"from\");\r\n            const question = relation.label.value.charAt(0).toUpperCase() + relation.label.value.slice(1) + \" was typed as a Relator.\"\r\n            return this.createButtons(\"Relator\",question,this.delUri(relation.type.value),false,relation.label.value);\r\n        }\r\n        else\r\n        {\r\n            //this.elUri = relation.uri.value;\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question = this.rulesJson.bRelationRules[0].question.replace(\"VAL\",relation.label.value);\r\n            return this.createButtons(this.rulesJson.bRelationRules[0].offer, question,this.delUri(relation.type.value), false, relation.label.value);            \r\n        }\r\n    }\r\n\r\n\r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n         console.log(this.relationTree)\r\n        let relationRules; \r\n        console.log([selectedType, selectedUri, puroType ,elName, nameWasChange])\r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n           return this.relationWasSelected(selectedType, this.ruleKey);\r\n        }\r\n\r\n        else \r\n        {\r\n            \r\n            let relationEl; \r\n            let additionalRule = []; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            \r\n            if (puroType.includes(\"ontoRelation-save-bRelation\") || puroType.includes(\"material\") )\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"to\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"material\")\r\n                    {\r\n                       // select type \r\n                       // alert(selectedType)\r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                    relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                }\r\n\r\n                if (this.lastElInBranch === \"cPhase-next\")\r\n                {\r\n                   \r\n                    if (this.relation[this.ruleKey].length <= this.relationRuleIndex)\r\n                    {\r\n                       \r\n                        this.relationOrderIndex ++;\r\n                        this.setIndexexToDefault();\r\n                        return this.getDefault();\r\n                    } \r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch(); \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                 \r\n                    selectedType = this.elSettings.selectedType;\r\n                    puroType = this.elSettings.puroType;\r\n                    elName = this.elSettings.elName;\r\n                    relationEl = this.elSettings.relationEl;\r\n                    additionalRule = this.elSettings.additionalRule; \r\n                    nameWasChange = this.elSettings.nameWasChange;\r\n                }\r\n\r\n            }\r\n            if (!Array.isArray(selectedType) && selectedType.toLowerCase() === \"none\")\r\n            {  \r\n                this.elSettings.selectedType = selectedType; \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                this.additionalRule.key = \"stop\"; \r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n            \r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                this.consistencyExeption.push({uri: this.elementUri, ontoType:selectedType, type: puroType});\r\n            \r\n                return this.consistencyCheck(); \r\n            }\r\n            \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {\r\n            //addRUleAsync\r\n              \r\n               if ((this.additionalRule.key!== \"stop\" && this.additionalRule.key === undefined && (this.additionalRule.index > 1 || this.ontoController.getOntoBranch(this.relation.uri.value,this.ruleKey).length === 0)) && this.relation.uri.value !== null)\r\n               {\r\n                   \r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),selectedType, 1)\r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        this.additionalRule.index = 2; \r\n                        this.additionalRule.rule =  this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree));\r\n                        this.additionalRule.key = selectedType;\r\n                    }\r\n               } \r\n               else if (this.additionalRule.index > 1 && this.additionalRule.key !== \"stop\")\r\n               {\r\n                 additionalRule = this.ruleController.getAdditionalRule(this.additionalRule.rule, selectedType, this.additionalRule.index);\r\n                 if (additionalRule.length > 0)\r\n                 {\r\n                    this.additionalRule.index ++; \r\n                 }\r\n                 else\r\n                 {\r\n                    this.additionalRule.key = \"last\";\r\n                 }\r\n\r\n               }\r\n              \r\n               relationEl = this.ontoController.getRelationElements(elName, this.getElementByUri(this.elementUri), this.elementUri,this.relation.uri.value, additionalRule.length, additionalRule.length === 0, puroType, this.ontoUri, this.ruleKey, nameWasChange,this.relationRuleIndex > 1);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\", elUri: this.elementUri};\r\n            \r\n               \r\n            \r\n               if ((relationEl === this.relation.uri.value) || this.lastElInBranch === \"cPhase\")\r\n               {\r\n                 const updateRelTypes = this.updateRelationTypes(); \r\n\r\n                if (updateRelTypes !== false)\r\n                {\r\n                    this.lastElInBranch += \"-next\"; \r\n                    return updateRelTypes;\r\n                }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"connect\" // rovná čára mezi elementy \r\n                \r\n\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey, undefined,undefined,undefined,undefined,this.elementUri);\r\n            }\r\n            else \r\n            {\r\n             \r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n              \r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n               \r\n                    elRelTypes = selectedType;\r\n                }\r\n              \r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n                this.elementUri = this.elSettings.elUri;\r\n               \r\n            } \r\n            relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n         \r\n            if (relationRules !== true)\r\n            {\r\n                //vrácení otázky v případě true relation ulož -> může se pokračovat\r\n                return Promise.resolve(relationRules); \r\n            }\r\n            \r\n            if (this.valuationArr !== null)\r\n            {\r\n                \r\n                if (this.valuationArr.length > 0)\r\n                {\r\n                    return this.handleValuation();\r\n                \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                   \r\n                    if (this.ruleKey === \"to\" && this.relation.to.length === this.relationRuleIndex)\r\n                    {\r\n                        const lastEl = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"to\",lastEl);\r\n\r\n                        this.elementUri = lastEl; \r\n                        this.lastElInBranch = \"cPhase\";\r\n\r\n                        return this.updateRelationTypes();\r\n                    }\r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            } \r\n            //Přidání do ontomodelu \r\n            const purType = this.selectedEl === false || !(\"type\" in this.selectedEl) ? false : this.delUri(this.selectedEl.type.value);\r\n\r\n            let origUri = undefined; \r\n            if (this.relationTree[this.relationTree.length - 1].uri.value === this.elementUri)\r\n            {\r\n               const ontoEl = this.ontoController.getOntoElement(this.elementUri); \r\n               if (ontoEl === false)\r\n               {\r\n                 origUri = \"first\"\r\n               }    \r\n            }\r\n\r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            purType,this.relation.uri.value,this.ruleKey,elName, nameWasChange, this.ontoUri, this.relationRuleIndex, origUri);\r\n          \r\n            \r\n           \r\n            //zjištění dodatečných pravide \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();\r\n                \r\n             \r\n                this.elementUri = this.selectedEl === false || Array.isArray(this.selectedEl) ? \"\" : this.selectedEl.uri.value; \r\n                \r\n                this.selectedEl = this.elementUri === \"\" ? false : this.selectedEl; \r\n                \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,additionalRule,this.queryTree, this.relation.label.value);\r\n            }\r\n            else if (this.additionalRule.key === \"last\")\r\n            {\r\n                \r\n               \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    //this.elSettings.selectedType = \"none\"\r\n                    return updateCardinality; \r\n                } \r\n                else\r\n                {\r\n                   \r\n                    this.additionalRule.key = \"stop\";\r\n                    return this.consistencyCheck(); \r\n                }\r\n            }\r\n            else\r\n            {\r\n                \r\n                this.additionalRule.key = \"stop\"; \r\n                \r\n\r\n                // přiřazení typu neurčeným elementům \r\n\r\n                    if (this.relation.uri.value !== null && this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0)\r\n                    {\r\n                        const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                    }\r\n            \r\n                    return this.consistencyCheck();\r\n                    \r\n                \r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n\r\n    consistencyCheck ()\r\n    {\r\n        if (this.elementsWithoutType.length === 0)\r\n        {\r\n            this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n        }     \r\n\r\n        if (this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length)\r\n        {        \r\n            const element = this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);   \r\n            this.withoutTypeIndex ++;\r\n            this.elementUri = element.uri.value;\r\n            const commonRule = this.ruleController.commonRuleSelection(element, this.ruleKey,this.ontoController.getOntoModel());\r\n            if (commonRule === undefined)\r\n            {   \r\n                alert(\"Common rule is not defined! Check rules.json\");\r\n                window.location.reload();\r\n            }\r\n            else\r\n            {\r\n                return commonRule;\r\n            }\r\n        \r\n        }\r\n\r\n        let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    \r\n        if (unfinishedTypes.length > 0)\r\n        {              \r\n            for (let exeption of this.consistencyExeption)\r\n            {\r\n                for (let index in unfinishedTypes)\r\n                {\r\n                    if(exeption.uri === unfinishedTypes[index].element && unfinishedTypes[index].types.includes(exeption.ontoType) && exeption.type === unfinishedTypes[index].key)\r\n                    {\r\n                        unfinishedTypes.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n    \r\n            if ((unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"Relator\") && unfinishedTypes[0].types.includes(\"None\")) || (unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"None\") && unfinishedTypes[0].types.length === 1))\r\n            {\r\n                unfinishedTypes.splice(0, 1);  \r\n            }\r\n        }\r\n        \r\n        if (unfinishedTypes.length > 0)\r\n        {\r\n            const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n            this.elementUri = unfinishedTypes[0].element;\r\n            return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n        }\r\n        else if (this.relation.uri.value === null)\r\n        {\r\n            return this.getDefault(); \r\n        }\r\n        else\r\n        {\r\n            \r\n            if (this.relation === null)\r\n            {\r\n                this.getDefault(); \r\n            }\r\n            \r\n            if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n            {\r\n                this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n                if (this.valuationArr.length > 0)\r\n                { \r\n                   return this.handleValuation(); \r\n                }\r\n            }\r\n            \r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex && this.ruleKey !== \"from\")\r\n            {\r\n                const rel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n                if (rel.to.length < this.relationRuleIndex)\r\n                {\r\n                    const lastEl = this.ontoController.getLastElement(rel.uri,\"to\");\r\n                    this.ontoController.updateOntoModel(rel.uri, \"to\", lastEl.uri);\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n                    return this.updateRelationTypes(true); \r\n                }\r\n\r\n\r\n                this.setIndexexToDefault();\r\n                this.relationOrderIndex ++;\r\n                return this.getDefault();\r\n            } \r\n            else\r\n            {\r\n                \r\n                return this.nextTreeBranch(); \r\n            }   \r\n    \r\n        }\r\n    }\r\n\r\n    updateRelationTypes ()\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n        if (ontoRel.to.length > 0 && ontoRel.from.length > 0)\r\n        {\r\n           \r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType.length < ontoRel.from.length)\r\n            {   \r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from[ontoRel.fromType.length],ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType.length < ontoRel.to.length) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n       /*   else if (ontoRel.ontoType === \"Relator\" && !(\"materialExists\" in ontoRel))\r\n            {\r\n                this.ontoController.addToProperty(ontoRel.uri,\"materialExists\", true); \r\n                return this.createButtons([\"yes\", \"no\"], \"is there material\",\"relator-material\",\"sda\",\"sdsad\"); \r\n            } */\r\n            else if (ontoRel.toType.length < ontoRel.to.length && ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from[ontoRel.fromType.length],ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n    \r\n        const question = \"Which Datatype represents \" + this.delUri(this.valuationArr[0].valuation) + \"?\"; \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n        return buttons;  \r\n    }\r\n\r\n    nextTreeBranch () \r\n    {\r\n        \r\n        if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n        {\r\n         \r\n            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n            // vrat dotaz na Value\r\n            if (this.valuationArr.length > 0)\r\n            {\r\n                return this.handleValuation();\r\n            \r\n            }\r\n        }\r\n        \r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0 || (this.relationRuleIndex > 1 && this.ruleKey === \"from\"))\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        \r\n\r\n        let relationTypePromise; \r\n\r\n        //number of branches -> uprav \r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex)\r\n            {\r\n               this.ruleKey = this.ruleKey === \"from\" ? \"to\": \"from\"; \r\n               this.relationRuleIndex = 0;\r\n            }   \r\n            \r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n            this.relationRuleIndex ++; \r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        this.additionalRule.key = undefined;\r\n        this.additionalRule.index = 0; \r\n        this.consistencyExeption = [];\r\n\r\n\r\n        return new Promise(resolve => {relationTypePromise.then((results) => {\r\n            this.valuationArr = null;\r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        });});\r\n    }\r\n\r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let treeEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(treeEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                let connectElement = el.uri.value; \r\n                if (this.delUri(el.type.value) === \"BObject\" || el.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                {\r\n                    const lastTypes = this.rulesJson[\"lastTypes\"];\r\n                    let lastEl = [];\r\n                    for (let type of lastTypes)\r\n                    {\r\n                      lastEl = lastEl.concat(this.ontoController.getElementsByOntoType(type, this.relation.uri.value));\r\n                    }\r\n                    if (lastEl.length > 0) {\r\n                        connectElement = lastEl[0]; \r\n                    }\r\n                }\r\n\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: connectElement, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n\r\n        for (let index in valuations)\r\n        {\r\n            if (this.ontoController.getElementByProperty(\"origUri\",valuations[index].valuation) !== false)\r\n            {\r\n                valuations.splice(index, 1);   \r\n            }\r\n        }\r\n\r\n        \r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n  \r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.toT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"to\"};\r\n        });\r\n\r\n        const  labelFromE = this.selectElementsLabel(fromE);\r\n        const labelToE = this.selectElementsLabel(toE);\r\n        \r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    selectElementsLabel(element)\r\n    {\r\n         let ontoEl = this.ontoController.getOntoElement(element);\r\n         let label; \r\n         if (ontoEl === false)\r\n         {\r\n             if (element === this.elSettings.elUri)\r\n             {\r\n                label = this.elSettings.elName === \"\" ? this.delUri(element) : this.elSettings.elName; \r\n             }\r\n             else\r\n             {\r\n                 label = this.delUri(element)\r\n             }\r\n         }\r\n         else\r\n         {\r\n            label = ontoEl.label\r\n         }\r\n\r\n         return label; \r\n    }\r\n   \r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n            \r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        \r\n \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);\r\n            \r\n        }\r\n        else\r\n        {\r\n            return true; \r\n        }\r\n        \r\n        if (relType === \"updated\")\r\n        {\r\n            return true;\r\n        }\r\n        if (rule === false && !relationFlow.includes(\"save\"))\r\n        {\r\n            alert(\"Relation rule is not defined! Check rules.json!\"); \r\n    \r\n        }\r\n        \r\n        if (!relationFlow.includes(\"save\") && (relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1))\r\n        {\r\n           \r\n           \r\n            // Vyhod chybu, že není definované pravidlo pro dva typy!! \r\n            if (\"fromT\" in rule && \"toT\" in rule)\r\n            {\r\n                \r\n                this.elSettings.relType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.relType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, undefined, \"nazev\", \"\", \"\");\r\n\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            this.ontoController.addRelation(this.elSettings.relType, fromE, toE, undefined, \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map((ruleClass) => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           });\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};        \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) \r\n            {  \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (this.isSameCaseInsensitive(condition[index + 1],ontoType) || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    relationWasSelected (selectedType) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        //selected type do object property\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, this.relation.label.value);\r\n  \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    handleRelatedElements (elements, origin, ruleKey, rule) \r\n    {\r\n\r\n\r\n        rule = rule === undefined ? this.rulesJson[this.relationType] : rule;\r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1; \r\n        \r\n        if (origin === \"relationWasSelected\" || this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value) !== false)\r\n        {\r\n            \r\n            const nextElement = this.getNextElement();\r\n            \r\n            \r\n            let additionalRule = [];\r\n            let fatherType = \"\"; \r\n            let el = false; \r\n            let bObjectChild = false;\r\n            let prevEl = false; \r\n            let lastEl = null;\r\n            if (Array.isArray(nextElement) && nextElement[1] === false)\r\n            {\r\n               \r\n                prevEl = nextElement[0]; \r\n                fatherType = nextElement[0].ontoType; \r\n                const rdfEl = this.getElementByUri(nextElement[0].uri); \r\n                \r\n                if (rdfEl !== false && rdfEl.child.length > 0)\r\n                {\r\n                    \r\n                    el = this.getElementByUri(rdfEl.child[0]);\r\n                    this.selectedEl = el;\r\n                    bObjectChild = true;\r\n                }\r\n                this.ontoController.updateOntoModel(nextElement[0].uri,\"branchIndex\",this.relationRuleIndex,false);\r\n               \r\n                if ((this.relationRuleIndex > 1 || prevEl.fromRelation.length > 0) && !this.additionalRule.index > 0)\r\n                {\r\n                    this.additionalRule.index ++; \r\n                }\r\n            \r\n            }\r\n            else\r\n            {\r\n                this.selectedEl = nextElement; \r\n                el = this.getElementByUri(this.selectedEl.uri.value);\r\n                if (el.father.length > 0)\r\n                {\r\n                  fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                }\r\n            }\r\n    \r\n            if (fatherType !== \"\" && fatherType !== false)\r\n            {                \r\n        \r\n                const elements = this.ontoController.getElementsFromBranch(prevEl.uri);\r\n               \r\n                let addIndex = 1; \r\n                let prevAdd = []; \r\n                for (let index in elements)\r\n                {\r\n                    let node = this.ontoController.getOntoElement(elements[index]);\r\n                    if (node.origUri === \"first\")\r\n                    {\r\n                        elements.length = parseInt(index) + parseInt(1); \r\n                        break;\r\n                    }\r\n                }\r\n\r\n              \r\n                for (let index = elements.length - 1; index >= 0; index--) {\r\n                   \r\n                    let element = this.ontoController.getOntoElement(elements[index])\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),element.ontoType, addIndex);\r\n                 \r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        prevAdd = additionalRule;\r\n                        this.additionalRule.index ++;\r\n                        addIndex = this.additionalRule.index;\r\n                    }\r\n                    else\r\n                    {   \r\n                      \r\n                        if (prevAdd.includes(element.ontoType))\r\n                        {\r\n                            additionalRule = []; \r\n                            break; \r\n                        }\r\n                        else\r\n                        {\r\n                            lastEl = element; \r\n                            this.additionalRule.key = fatherType;\r\n                            additionalRule = prevAdd; \r\n                            break; \r\n                        }\r\n\r\n                    }\r\n\r\n                    if (index === elements.length - 1)\r\n                    {\r\n                        this.additionalRule.key = fatherType;\r\n                        additionalRule = prevAdd; \r\n                    }\r\n                }\r\n\r\n                if (additionalRule.length > 0)\r\n                {\r\n                    this.additionalRule.rule = this.ruleController.getSpecificRule(rule,ruleKey, this.countBTypesInTree(this.relationTree));\r\n                }\r\n            }\r\n          \r\n            if (additionalRule.length === 0)\r\n            {\r\n                if (el === false && bObjectChild === true) \r\n                {\r\n                    return this.nextTreeBranch();\r\n                }\r\n                if (origin !== \"relationWasSelected\"  && bObjectChild === true)\r\n                {\r\n\r\n                    //uprav vztah\r\n                    //tady uprav poslední node ve větvi! -> vlož seller\r\n      \r\n            \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n\r\n                    this.elementUri = prevEl.uri; \r\n\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n\r\n\r\n                    return this.updateRelationTypes(true); \r\n                    \r\n                }\r\n                else if (origin === \"relationWasSelected\" && (bObjectChild === true || prevEl !== false))\r\n                {\r\n                   // diferent branch f\r\n        \r\n                   this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n                   return this.nextTreeBranch(); \r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                    return this.ruleController.ruleSelection(rule,ruleKey,el,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.queryTree, this.relation.label.value);\r\n                }\r\n\r\n            }\r\n            else\r\n            {  \r\n                //selectUridle\r\n                if (el !== false)\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = \"\";\r\n                }\r\n                let lastLabel; \r\n                if (lastEl !== null)\r\n                {\r\n                    this.elementUri = lastEl.uri;\r\n                    lastLabel = lastEl.label;\r\n                }\r\n                else\r\n                {\r\n                    lastLabel = prevEl.label;\r\n                }\r\n\r\n                return  this.ruleController.ruleSelection(undefined,ruleKey,el,lastLabel,additionalRule,this.queryTree, this.relation.label.value);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const rule = this.rulesJson[this.relationType];\r\n            \r\n            //Zkontroluj zda element useless a jaký typ!!! \r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n\r\n            // check if\r\n            //podívej se jestli se nachází v onto modelu... \r\n            \r\n            //počítá se dle délky pole +1!!\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n        \r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.queryTree, this.relation.label.value));\r\n        }\r\n\r\n    }\r\n\r\n    getElementsWithoutType (element, elWithoutType)\r\n    {\r\n        const currEl = this.getElementByUri(element.uri.value);\r\n\r\n        if (currEl.child.length > 0)\r\n        {   \r\n            for (let child of currEl.child)\r\n            {\r\n                const childEl = this.getElementByUri(child); \r\n                if (!this.isElementInstace(childEl) && this.ontoController.getOntoElement(childEl.uri.value) === false)\r\n                { \r\n                    elWithoutType.push(childEl);\r\n\r\n                    elWithoutType = this.getElementsWithoutType(childEl,elWithoutType);\r\n                }\r\n            }\r\n        }\r\n        console.log(elWithoutType)\r\n        return elWithoutType; \r\n    }\r\n\r\n    checkElementsInRelationTree (tree, ontoModel) \r\n    {\r\n        let elementsWithoutType = [];\r\n        // let withoutType = true; \r\n        for (let element of tree)\r\n        {\r\n            //element s definovaným type \r\n            \r\n            elementsWithoutType = this.getElementsWithoutType(element, elementsWithoutType); \r\n            // withoutType = true;\r\n              /*\r\n            for (let node of ontoModel)\r\n            {\r\n                if(element.uri.value === node.uri)\r\n                {\r\n                 \r\n                    withoutType = false;\r\n                }\r\n            }\r\n          \r\n            if (withoutType === true && (!this.isElementUseless(element) || this.relation.uri.value === null) && !this.isElementInstace(element))\r\n            {\r\n                alert(element.uri.value + \" SSSSSS\")\r\n                elementsWithoutType.push(element); \r\n            }\r\n            */\r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n        \r\n      \r\n        promiseArr.push(this.rdfController.getRelationBTypes(relation[key][this.relationRuleIndex]));\r\n\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            console.log(result)\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][this.relationRuleIndex-1]));\r\n                    //doplnění prop u elementu\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n                  \r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            return result; \r\n        })\r\n   \r\n    }\r\n\r\n    \r\n    getNextElement () \r\n    {\r\n        //koko\r\n \r\n        if(this.relationIndex < 0)\r\n        {\r\n            return false; \r\n        }\r\n\r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n         \r\n        //ověření zda už nebyl element určen\r\n    \r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n            if (this.relationTree[this.relationIndex] !== undefined && ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                //Check on another samples \r\n                if (this.areChildrenInBranchUseless(this.relationTree[this.relationIndex]))\r\n                {\r\n                    const lastRel = ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1]; \r\n                    const lastDirection = ontoModel[index].direction[ontoModel[index].direction.length - 1]; \r\n                    \r\n                    let lastElement = this.ontoController.getLastElementUri(lastRel,lastDirection);  \r\n                    \r\n\r\n                    while (this.ontoController.getCardinalElement(lastElement, false) !== false)\r\n                    {\r\n                        lastElement = this.ontoController.getCardinalElement(lastElement,false);\r\n                    }\r\n                   \r\n                    lastElement = this.ontoController.getElementInRelRow(lastElement);\r\n            \r\n                    lastElement = this.ontoController.getOntoElement(lastElement);\r\n\r\n\r\n\r\n                    const allBranchBtypes = this.ontoController.getOntoBranch(lastRel, lastDirection); \r\n         \r\n                    //btype může jít do více realtionů\r\n                    for (let el of allBranchBtypes)\r\n                    {\r\n                        this.ontoController.addToProperty(el.uri, \"fromRelation\", this.relation.uri.value);\r\n                        this.ontoController.addToProperty(el.uri, \"direction\", this.ruleKey);\r\n                    }\r\n               \r\n                    return [lastElement, false];  \r\n                }\r\n                this.relationIndex --;\r\n                index = 0;  \r\n            }\r\n            \r\n        }  \r\n      \r\n        returnEl = this.relationTree[this.relationIndex];\r\n        \r\n        returnEl = returnEl === undefined ? false : returnEl;\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    areChildrenInBranchUseless (element)\r\n    {\r\n        if (element.childRel.includes(\"http://lod2-dev.vse.cz/ontology/puro#subTypeOf\"))\r\n        {\r\n           return false;\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n        //tady se to může projet od začátku do konce zas tolik to nevádí :) \r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let consistencyIndex = 0; \r\n        const consistencyTree = []; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node.fromRelation.includes(relation) && node.direction[node.direction.length - 1] === ruleKey && node.branchIndex.includes(this.relationRuleIndex))\r\n            {\r\n            \r\n                consistencyTree.push(node); \r\n            }\r\n        }\r\n\r\n   \r\n       \r\n        if (consistencyTree.length === 0)\r\n        {\r\n            return consistencyTree; \r\n        }\r\n        \r\n        let elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex],this.ontoController);\r\n        //nejsem si jist druhou podmínkou ale \r\n        \r\n        consistencyIndex ++;\r\n\r\n\r\n        while (consistencyIndex < consistencyTree.length && elementTypes.length === 0)\r\n        {\r\n            \r\n            elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex], this.ontoController);\r\n            consistencyIndex ++; \r\n        }\r\n      \r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    // element ve formátu queryTree!!\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n               \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n\r\n        this.lastElInBranch = false; \r\n\r\n\r\n        this.additionalRule = {key: undefined, rule: {}, index: 1}; \r\n\r\n\r\n        this.consistencyExeption = []; \r\n        // Nový začátek \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n               \r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (typeof record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n  \r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relationRuleIndex = 0; \r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n                console.log(prop)\r\n                console.log(JSON.parse(JSON.stringify(this[prop])))\r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n    getOntoSchema ()\r\n    {\r\n        return this.ontoSchemaController.transform(this.ontoController.getOntoModel());\r\n    }\r\n\r\n    getIframeURL ()\r\n    {\r\n\r\n        return this.rulesJson[\"iframeURL\"].replace(\"MODELID\",this.modelId); \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport fileDownload from 'js-file-download';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n\n\n\n\n\n\n//import RdfController from './controllers/RdfController.js';\n//import { thisTypeAnnotation } from \"@babel/types\";\n\n//přiřadit key k talčítkům -> zamyslet se nad využitím \nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n\n    this.eventController = new EventController();\n    this.state = {\n      svg: \"\", iframeURL: this.eventController.getIframeURL()\n    };\n\n    mermaid.initialize({\n      startOnLoad: false,\n      themeCSS: '#extensionEnd { fill: white; } #extensionStart { fill: white; }',\n    });\n  }\n\n  createGraph = (svg) => {\n\n    this.setState({ svg: svg });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"form-group col-md-6\" id=\"graph\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Puro model</label>\n            <div className=\"form-control  transformWindow embed-responsive\" id=\"exampleFormControlTextarea1\">\n              <PuroModel iframeURL={this.state.iframeURL} />\n            </div>\n          </div>\n\n          <div className=\"form-group col-md-6\" id=\"graph\">\n            <TransformWrapper\n              enablePadding={false}>\n              {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n                <React.Fragment>\n                  <div className=\"tools\">\n                    <label htmlFor=\"exampleFormControlTextarea1\">Onto model</label>\n                    <button className=\"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n                  </div>\n                  <div className=\"border\">\n                    <TransformComponent>\n                      <div dangerouslySetInnerHTML={{ __html: this.state.svg }} className=\"transformWindow\" id=\"exampleFormControlTextarea1\">\n                      </div>\n                    </TransformComponent>\n                  </div>\n                </React.Fragment>\n              )}\n            </TransformWrapper>\n          </div>\n          <QuestionPart graphCreation={this.createGraph} eventController={this.eventController} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass PuroModel extends React.Component {\n\n  // $(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\n\n\n  render() {\n    return <iframe onLoad={this.loaded} id=\"iframePuro\" className=\"embed-responsive-item\" src={this.props.iframeURL}></iframe>;\n  }\n\n\n}\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTransform: true, originalName: \"\", nameWasChange: false,\n      buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\"\n    };\n\n    this.eventController = this.props.eventController;\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined) {\n      event.preventDefault();\n    }\n\n    //window.addEventListener('unhandledrejection', function(event) {\n    //alert(\"Rule is not defined!\\nOnly the first answer is correct! \\nRules are not complete yet!\\nPage will be reloaded!\");\n    //window.location.reload(); \n    //});\n\n    this.eventController.getDefault(true).then(results => {\n      this.setState({ undoActive: false, svgUrl: \"\", buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false });\n    });\n\n  }\n\n  undoClick = () => {\n\n\n\n  }\n\n\n\n\n  handleClick = (selectedType, selectedUri, type) => {\n    let elName = this.state.elName;\n    let undo = false;\n    let setState = true;\n    let nameWasChange = this.state.nameWasChange;\n\n    if ((elName === \"\" && this.state.changeName === true && type !== \"Undo\") && selectedType.toLowerCase() !== \"none\") {\n      alert(\"Plese write name of the element!\");\n    }\n    else if (elName !== \"\" && !elName.match(/^[A-Za-z0-9-_*<>]+$/)) {\n      alert(\"Please change the name. It contains forbidden characters!\");\n    }\n    else {\n      if (type === \"Undo\") {\n\n        const history = this.eventController.undo();\n        if (history === false) {\n          this.handleSubmit();\n          setState = false;\n        }\n        else {\n          const inputVariables = history.inputVariables;\n          selectedType = inputVariables[0];\n          selectedUri = inputVariables[1];\n          type = inputVariables[2];\n          elName = inputVariables[3];\n          nameWasChange = inputVariables[4];\n\n          undo = true;\n        }\n\n      }\n      elName = elName.replace(/\\s/g, '_');\n\n      if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName)) {\n        alert(\"Element already exists! Please choose different name.\")\n      }\n      else if (setState === true) {\n\n        this.eventController.nextElement(selectedType, selectedUri, type, elName, nameWasChange).then(results => {\n\n          if (undo === false) {\n            let properties = (Object.getOwnPropertyNames(this.eventController));\n            let historyRecord = {};\n            for (let prop of properties) {\n              if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\") {\n                if (typeof prop !== 'function') {\n                  historyRecord[prop] = this.assignProp(this.eventController[prop])\n                }\n              }\n            }\n\n            this.eventController.saveHistory(historyRecord, [selectedType, selectedUri, type, elName, this.state.nameWasChange]);\n          }\n\n          let svg = this.eventController.getGraphSvg();\n\n          this.setState({ buttons: results.buttons, type: results.type, title: results.title, undoActive: true, elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange: false });\n\n          if (svg !== false) {\n            this.createGraph(svg);\n          }\n\n          if (this.state.type.includes(\"end\")) {\n            this.handleDownloadImage();\n          }\n\n        });\n      }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object') {\n      //how to \n      return JSON.parse(JSON.stringify(prop));\n    }\n    else {\n      return prop;\n    }\n\n  }\n\n  createGraph = (chart) => {\n\n    const cb = svg => {\n      this.setState({ svg: svg });\n      this.props.graphCreation(svg);\n    };\n    mermaid.render('id1', chart, cb);\n  }\n\n  handleChangeName = () => {\n\n\n    this.setState({ changeName: !this.state.changeName });\n    if (this.state.changeName === true) {\n      this.setState({ elName: \"\", nameWasChange: false });\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function () {\n        $(\".changeAlert\").alert('fade');\n      });\n    }\n    else {\n      this.setState({ elName: \"\", nameWasChange: true });\n\n    }\n  }\n\n  handleDownloadImage = () => {\n    const svgBlob = new Blob([this.state.svg], { type: \"image/svg+xml;charset=utf-8\" });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({ svgUrl: svgUrl });\n\n  }\n\n  handleDownloadSchema = () => {\n    const ontoSchema = JSON.stringify(this.eventController.getOntoSchema());\n    fileDownload(ontoSchema, 'ontoSchema.json');\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid text-center questionPart\">\n\n        <button type=\"Submint\" className={this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleSubmit}>\n          Start transformation\n          </button>\n        <div className={this.state.startTransform ? \"d-none\" : \"\"}>\n          <h3 className=\"questionTitle\">{this.state.title}</h3>\n          <div className=\"optionButtons d-none d-md-block\">\n            <div className=\"btn-group-vertical text-right\">\n              <button type=\"button\" className=\"btn btn-primary btnModal\" onClick={this.handleChangeName} disabled={this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\") || this.state.type === \"nextBranchElements\"}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n              <button type=\"button\" className=\"btn btn-primary btnModal\" onClick={() => this.handleClick(undefined, undefined, \"Undo\")} disabled={!this.state.undoActive}>Undo</button>\n              <button type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); }}>Cancel</button>\n            </div>\n          </div>\n          <div className={this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n            <div className=\"input-group inputName\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n              </div>\n              <input placeholder={this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.originalName} type=\"text\" className=\"form-control\" onChange={this.handleChange} value={this.state.elName}></input>\n            </div>\n            <h5 className={this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>\n          </div>\n          <div className=\"divButtons text-center\">\n            <TypeButtons buttons={this.state.buttons} onClickDownloadSchema={this.handleDownloadSchema} svgUrl={this.state.svgUrl} onClick={this.handleClick} type={this.state.type} elNames={this.state.changeName} originalName={this.state.originalName} />\n          </div>\n          <div class=\"alert alert-success col-md-6 mx-auto changeAlert\" role=\"alert\">\n            Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass TypeButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\")) {\n      return (\n        <div className=\"row col-md-5 mx-auto\">\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>\n          <select ref=\"relFrom\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"from\";\n            }).map((rel) => {\n              return <option value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <select ref=\"relTo\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"to\";\n            }).map((rel) => {\n              return <option value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <button className=\"btn btn-success mx-auto questionPart\" onClick={() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button>\n        </div>\n      )\n    }\n    else if (this.props.type.includes(\"end\")) {\n      return (\n        <div className=\"col-md-8 mx-auto\">\n          <a className=\"btn btn-success btnEnd\" href={this.props.svgUrl} download=\"ontoUml-graph.svg\">Download Onto-UML graph</a>\n          <button type=\"button\" className=\"btn btn-success btnEnd\" onClick={() => this.props.onClickDownloadSchema()}>Download Onto-Schema</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"row col-md-6 mx-auto\">\n          {this.props.buttons.map((value) => {\n            return <div className=\"col-md-4 mx-auto\">\n              <button key={this.props.uri} type=\"button\" className={value.name.toLowerCase() === \"none\" ? \" btn btn-secondary btnModal\" : \"btn btn-success btnModal\"} onClick={() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || (this.props.originalName === \"\" && this.props.buttons.length === 1) || (value.name.toLowerCase() === \"relator\" && this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n            </div>\n          })}\n        </div>\n      )\n    }\n\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return [<Layout />]\n\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}