{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","../node_modules/@trust/webcrypto/src/algorithms sync","controllers/RdfController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","RdfController","puro","getRelatorBtype","relator","fromUri","query","Promise","sparqlQuery","result","this","deleteDuplicity","findBTypeRelation","fatherElement","returnArr","endCall","elementsUri","uri","value","length","i","console","log","push","bind","findBTypeChild","getFullPath","forEach","node","father","fatherType","fatherTypeRelation","childType","child","childRel","connect","recursiveFindChild","lastResult","bTypeTree","lastCall","type","final","sparql","callback","puroXML","XMLSerializer","serializeToString","turtle","store","rdf","graph","parse","serialize","undefined","err","str","require","create","load","results","execute","getRelationBTypes","relationUri","getRelations","findRelation","elementUri","firstFind","a","properties","duplicity","checkArr","res","property","index","includes","k","some","concat","split","splice","$","ajax","url","async","cache","dataType","success","xml","RuleController","addToOntoModel","label","ontoType","puroType","relationName","direction","from","to","elName","elPuroType","elLabel","elUri","ontoModel","fromRelation","addRelation","fromType","toType","updateOntoModel","getOntoModel","getElementsRelation","getElementOntoType","element","getOntoElement","getElementsByOntoType","changeOrigin","origin","getLastElementUri","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","relationRuleIndex","ontoUri","ruleKey","passEl","lastRelElement","getElementByUri","ontoController","checkDuplicity","getRelatedTypes","rels","elements","types","rel","el","ImagController","createGraph","graphCommand","fromT","toT","trim","rules","ruleSelection","key","rule","queryTree","commands","additionalRules","offerTypes","question","needElName","getSpecificRule","getAdditionalRule","offer","isElementInstace","rulesJson","questions","replace","ruleClass","delUri","elementConsistencyRules","check","elTypes","superType","subType","elementConsistencySelection","allTypes","r","addRule","elementConsAddSelection","moreThanOne","addRules","selectedType","commonRuleSelection","fatherOnto","connectFrom","commonRules","val","classes","Array","isArray","EventController","getDefault","window","onerror","alert","relation","relations","relationOrderIndex","valuation","nextElement","bRelationRules","relationWasSelected","relFlow","elSettings","relationEl","additionalRule","ruleController","relationType","relType","updateRelTypes","updateRelationTypes","elRelTypes","relationRules","getRelationRules","valuationArr","button","shift","nextTreeBranch","selectedEl","getNextElement","elementsWithoutType","checkElementsInRelationTree","relationTree","withoutTypeIndex","lastElUri","unfinishedTypes","checkElementsConsistency","q","qType","mappedButtons","setIndexexToDefault","buttons","title","getAllTreeValuations","ontoRel","createRelCardinalityBtn","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","then","handleRelatedElements","valuations","relEl","getGraphSvg","imageController","fromE","toE","relationFlow","fromB","relOntoType","fromEType","toEType","findRule","condition","validity","relationTreePromise","relationIndex","tree","withoutType","isElementUseless","elementConsitencyTree","elementConsistencyIndex","promiseArr","rdfController","all","unshift","l","m2","returnEl","elementTypes","getConnectedElements","ruleIndex","name","JSON","stringify","jsonData","OntoModelController","ImageController","InputField","props","handleChange","event","setState","target","handleSubmit","preventDefault","addEventListener","location","reload","empty","eventController","startTransform","handleClick","state","changeName","svg","handleClickName","stateName","fieldValue","chart","fatherUrl","order","queryRoots","roots","mermaid","initialize","startOnLoad","cb","render","className","htmlFor","onChange","onClick","onClickName","onSubmit","React","Component","PuroModel","loaded","onLoad","src","Mermaid","dangerouslySetInnerHTML","__html","QuestionPart","data-toggle","data-target","placeholder","lenght","elNames","data-dismiss","ModalButtons","refs","createRef","ref","filter","relFrom","relTo","Board","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.77143f8b.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 319,\n\t\"./locale.js\": 319\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 696;","var map = {\n\t\"./N3Lexer\": 194,\n\t\"./N3Lexer.js\": 194,\n\t\"./N3Parser\": 195,\n\t\"./N3Parser.js\": 195,\n\t\"./N3Store\": 347,\n\t\"./N3Store.js\": 347,\n\t\"./N3StreamParser\": 348,\n\t\"./N3StreamParser.js\": 348,\n\t\"./N3StreamWriter\": 349,\n\t\"./N3StreamWriter.js\": 349,\n\t\"./N3Util\": 196,\n\t\"./N3Util.js\": 196,\n\t\"./N3Writer\": 197,\n\t\"./N3Writer.js\": 197\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 771;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 898;","import $ from 'jquery';\r\n\r\n\r\nexport default class RdfController {\r\n    \r\n    constructor() {\r\n\r\n        this.rdf = require('rdflib');\r\n        var puro ;\r\n        \r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"http://localhost:3000/puroOutput.xml\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n                this.puroXML = xml;\r\n                puro = xml; \r\n            }\r\n        });\r\n        this.puroXML = puro; \r\n    }\r\n\r\n\r\n    getRelatorBtype = (relator, fromUri) =>\r\n    {\r\n            var query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findBTypeRelation =  (fatherElement, returnArr,endCall) => \r\n    {\r\n           \r\n            var elementsUri = fatherElement.uri.value;\r\n            var query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label . \r\n                \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                var checkArr = []; \r\n                var connect = [];\r\n\r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    // otestovat jak funguje v případě dvou \r\n                    for (let i in result) {\r\n                        console.log(result)\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    //POZOR MUZE BYT CHYB kvuli opakovani\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n\r\n    findBTypeChild =  (fatherElement, returnArr,endCall) => \r\n        {\r\n               \r\n                var elementsUri = fatherElement.uri.value;\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?valuationLabel ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelaion}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, function callback(result) {  \r\n                    \r\n                    var checkArr = []; \r\n                    var connect = [];\r\n\r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n            \r\n                    if (result.length > 0)\r\n                    {\r\n                        // otestovat jak funguje v případě dvou \r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //POZOR MUZE BYT CHYB kvuli opakovani\r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                }.bind(this));          \r\n             }\r\n\r\n             getFullPath = () => \r\n             {\r\n                 var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                     {?child puro:subTypeOf ?uri}\r\n                     ?child a ?childType .\r\n                     ?child ?childRel ?uri . \r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {?uri puro:linkedTo ?connect}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                  this.sparqlQuery(query, function callback(result) {\r\n                      \r\n                      result.forEach(function(node) {\r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            node.childType = [node.childType.value];\r\n                            node.child = [node.child.value];\r\n                            node.childRel = [node.childRel.value];\r\n                            if (node.connect) {\r\n                                node.connect = [node.connect.value]\r\n                            }\r\n                            else\r\n                            {\r\n                                node.connect = [];\r\n                            }\r\n                            // tady to nastav ve SPARQ \r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                      this.deleteDuplicity(result,[\"valuation\"]);\r\n                      this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                             resolve(lastResult);\r\n                     });\r\n                 }.bind(this));\r\n             });\r\n             }\r\n\r\n             recursiveFindChild = (i, result, bTypeTree,lastCall, type) => \r\n             {       \r\n                 if(i === result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, function endCall(final) {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        }.bind(this));\r\n                     }\r\n                     else\r\n                     {\r\n                       \r\n                        this.findBTypeChild(result[i],bTypeTree, function endCall(final) {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        }.bind(this));\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             sparqlQuery = (sparql, callback) => {\r\n                var puroXML = this.puroXML;\r\n                puroXML = new XMLSerializer().serializeToString(puroXML);\r\n               \r\n                var store = this.rdf.graph();\r\n                var contentType = 'application/rdf+xml';\r\n                var baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                 this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                var rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n\r\n\r\n            //from nebo to poslat si ukazatel? \r\n            getRelationBTypes = (relationUri) => \r\n            {\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        \r\n                        // result.push({uri: {token:\"uri\", value: relationUri}});\r\n                        \r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   }.bind(this));\r\n                });\r\n\r\n\r\n            }\r\n\r\n            //začátek hlavního\r\n            getRelations = () => \r\n            {\r\n                // ještě by to chtělo sjednotit do pole \r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                  {?from a puro:BObject}\r\n                  UNION \r\n                  {?from a puro:BType}\r\n                  {?to a puro:BObject}\r\n                  UNION\r\n                  {?to a puro:BType} \r\n                  ?to a ?toType . \r\n                  ?from a ?fromType . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            findRelation = (elementUri) => {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            firstFind = async () => {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //result[index].connect\r\n            deleteDuplicity = (result, properties) => {\r\n                var duplicity;\r\n                var checkArr = []; \r\n                \r\n                // sjednocení datových typů na pole\r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import { updateExpression } from \"@babel/types\";\r\n\r\nexport default class RuleController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction,from, to, elName) => \r\n    {\r\n    \r\n       \r\n        let elPuroType;\r\n        let elLabel;\r\n        let elUri; \r\n        \r\n        if (elName !==  \"\" && elName !== undefined)\r\n        {\r\n            elPuroType = false;\r\n            elLabel = elName;\r\n            elUri = \"http://lod2-dev.vse.cz/data/ontomodels#\" + elName; \r\n        }\r\n        else\r\n        {\r\n            elPuroType = puroType;\r\n            elLabel = label;\r\n            elUri = uri; \r\n        }\r\n\r\n        this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: relationName, direction: direction, from: from, to:to});\r\n        console.log(this.ontoModel)\r\n        return true; \r\n    }\r\n\r\n    addRelation = (type, from, to, uri, label, fromType, toType) => \r\n    {\r\n        //fromT toT\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from:from, to:to,uri:uri, label:label, fromType: fromType, toType: toType});\r\n        \r\n        return true; \r\n    }\r\n\r\n    updateOntoModel = (elementsUri, property, value) =>\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                node[property] = value; \r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n      \r\n        let returnArr = []; \r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && node[direction] === uri)\r\n            {\r\n                //může být víc \r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" && (node[\"from\"] === uri || node[\"to\"] === uri))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        let ontoType = false; \r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n    getElementsByOntoType = (type) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType)\r\n            {\r\n                result.push(node.uri);\r\n            }\r\n       }\r\n\r\n       return result; \r\n\r\n    }\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n    getLastElementUri = (origin) => \r\n    {\r\n        var uri; \r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n            if (this.ontoModel[i].fromRelation === origin)\r\n            {\r\n                uri = this.ontoModel[i].uri;\r\n                return uri; \r\n            }\r\n            \r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, relationRuleIndex, puroType, ontoUri, ruleKey) => \r\n    {\r\n     \r\n        if (elName !== \"\" && puroType !== \"dataType\")\r\n        {\r\n        \r\n            let father;\r\n            let passEl; \r\n\r\n            if (puroType === \"superType\")\r\n            {\r\n                father = ontoUri + elName;\r\n                passEl = element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = ontoUri + elName;    \r\n                father = element.uri.value;\r\n            }\r\n            else\r\n            {\r\n                father = element.father[0];\r\n                passEl = ontoUri + elName; \r\n            }\r\n            \r\n            return [father, passEl];\r\n\r\n        }\r\n        else if( relationRuleIndex === 2 && addRulesLenght === 0)\r\n        {\r\n            \r\n            \r\n            let lastRelElement;\r\n            let passEl = (selectedUri === false) ? ontoUri + elName : selectedUri;\r\n            \r\n            for (let index = this.ontoModel.length - 1; index >= 0; index --)\r\n            {\r\n            \r\n                if (this.ontoModel[index][\"fromRelation\"] === relationUri)\r\n                {\r\n                    lastRelElement = this.ontoModel[index];\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (lastRelElement.direction !== ruleKey && lastRelElement.fromRelation === relationUri)\r\n            {\r\n                this.updateOntoModel(relationUri,ruleKey,passEl);\r\n                return relationUri; \r\n            }\r\n            else\r\n            {\r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n        else if (puroType === \"elementSelection\")\r\n        {   \r\n            let element = this.getElementByUri(selectedUri);\r\n            //father může být pole.. předělat!!!\r\n            let elementFather = this.ontoController.getOntoElement(element.father[0]);\r\n            return [elementFather.uri, element.uri.value];\r\n            //this.addRelation(\"Dodělat závislé na pravidlech\", elementFather.uri , element.uri.value);\r\n        }\r\n  \r\n    }\r\n\r\n    checkDuplicity = (label) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes = (elUri, direction, ontoType) => \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n\r\n        for (let rel of rels)\r\n        {\r\n          //Arrow \r\n          if (rel.ontoType === ontoType)\r\n          {\r\n              let el = (elUri === rel.to) ? rel.from : rel.to;\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType !== \"Arrow\")\r\n          {\r\n            if (rel.ontoType === \"Relator\")\r\n            {\r\n                types.push(rel.ontoType);\r\n            }\r\n            else \r\n            {\r\n                let el = (elUri === rel.to) ? rel.from : rel.to;\r\n                elements.push(el);\r\n                types.push(this.getElementOntoType(el)); \r\n            }\r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import { notEqual } from \"assert\";\r\nimport { linkRelationProperty } from \"rdflib/lib/util\";\r\n\r\nexport default class ImagController {\r\n\r\n    createGraph = (ontoModel) =>\r\n    {\r\n\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && node.from !== \"\" && node.to !== \"\") {\r\n                console.log(node)\r\n                if (node.ontoType === \"Arrow\")\r\n                {\r\n                    graphCommand += node.to.split('#')[1]  + \" --|> \" +  node.from.split('#')[1] + \"\\n\"; \r\n                }\r\n                else if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from && node.to) \r\n                    {\r\n                       let fromT = node.fromType;\r\n                        let toT = node.toType;\r\n\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        graphCommand += node.from.split('#')[1] +\" \"+ (fromT ? '\"'+fromT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+fromT[1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\"; \r\n                        graphCommand += node.label +\" \"+ (toT ? '\"'+toT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+toT[1]+'\"' : \"\") + \" \" + node.to.split('#')[1] + \" : <<Mediation>>\\n\"; \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // může být i noType -\r\n                    let fromT = node.fromType;\r\n                    let toT = node.toType;\r\n                \r\n                    graphCommand +=node.from.split('#')[1] +\" \"+ (fromT ? '\"'+fromT+'\"' : \"\") +\" .. \"+ (toT ? '\"'+toT+'\"' : \"\") + \" \" + node.to.split('#')[1] + (node.ontoType === \"Row\" ? \"\" : \" : <<\"+node.ontoType+\">>\") + \"\\n\"; \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        console.log(graphCommand);\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n\r\n}","export default class RuleController {\r\n\r\n    constructor (rules)\r\n    {\r\n        this.rulesJson = rules;   \r\n        \r\n    }\r\n\r\n    //ruleSelection queryTree, \r\n    ruleSelection = (rules, key, element, ontoType, rule, queryTree) => \r\n    {\r\n        let commands; \r\n        let additionalRules;\r\n        let offerTypes;\r\n        let uri;\r\n        let question;\r\n        let needElName;\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            console.log(rules)\r\n            console.log(key)\r\n            commands = this.getSpecificRule(rules,key);\r\n            additionalRules = this.getAdditionalRule(commands,ontoType);\r\n            offerTypes = (additionalRules.length > 0 ) ? offerTypes = additionalRules : offerTypes = commands.offer;   \r\n        }\r\n\r\n        //z elementu udělat otázku\r\n        if (element !== false)\r\n        {\r\n            if (this.isElementInstace(element,queryTree))\r\n            {\r\n                needElName =true;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[1].question.replace(\"VAL\",element.label.value);\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[0].question.replace(\"VAL\",element.label.value);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            uri = false; \r\n            question = rules.questions[2].question;\r\n        }\r\n       \r\n\r\n        let result = offerTypes.map(function (ruleClass) {\r\n            return {\"name\": ruleClass, \"uri\": uri ,\"origin\": key};\r\n        }.bind(this));\r\n\r\n        return Promise.resolve({\"buttons\": result, \"title\": question, \"elName\": needElName, \"type\": \"classSelection\"}); \r\n    }\r\n\r\n    isElementInstace = (element, queryTree) =>\r\n    {\r\n        for (let node of queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n\r\n    // this.ontoController.getOntoElement(this.relation.uri.value);\r\n    elementConsistencyRules = (element,  ontoController) => \r\n    {\r\n\r\n            // v případě undefinied vyhoď, že pravidlo není definováno \r\n            let rules = this.rulesJson[element.ontoType]; \r\n           \r\n            let check = []; \r\n            let addRule; \r\n            \r\n\r\n            //Tady by měla být pole jelikož to může být 1:N \r\n            // !!! Převod na metodu a úprava dle pravidel\r\n            // udělat connect -> subtype -> supertype jenom v případě arrow \r\n\r\n \r\n        \r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Arrow\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Arrow\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n\r\n    \r\n            for (let rule of rules)\r\n            {\r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes);\r\n            }\r\n\r\n            addRule = this.getSpecificRule(rules,\"connected\"); \r\n            if (addRule !== false)\r\n            {\r\n                \r\n            }\r\n            \r\n         \r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection = (rule,elTypes,key,element,check,rules,allTypes) =>\r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    // if includes none -> zkontrolovat lenght superType -> zeptat se jestli chci doplnit superType -> nabídnout co je v tabulce -> zkontrolovat jestli už není\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n                }\r\n                else \r\n                {\r\n                    let additionalRules =  this.getSpecificRule(rules, key + \"ed\", true);\r\n                    if (additionalRules !== false)\r\n                    {\r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n        if (type in rule)\r\n        {\r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n        }\r\n        return check; \r\n    }\r\n\r\n    getSpecificRule = (rules, key, moreThanOne = false) =>\r\n    {\r\n        let addRules = [];\r\n        for (let node of rules)\r\n        {\r\n         \r\n            if (node.key === key)\r\n            {\r\n                if (moreThanOne === true)\r\n                {\r\n                    addRules.push(node);\r\n                }\r\n                else\r\n                {   \r\n                    return node; \r\n                }   \r\n            }\r\n        }\r\n\r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n\r\n\r\n    getAdditionalRule = (rule, selectedType) =>\r\n    {\r\n\r\n        if (selectedType in rule)\r\n        {\r\n            return rule[selectedType];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n    }\r\n\r\n\r\n    commonRuleSelection = (element, key, ontoModel) => \r\n    {\r\n        let result = [];\r\n      \r\n        // tohle vyřeš na úrovni onto modelu!\r\n        let fatherOnto = [];\r\n        let childOnto = [];\r\n        let connection = 0;\r\n        if (element.connect !== null)\r\n        {\r\n            connection = element.connect.length + element.connectFrom.length; \r\n        }\r\n   \r\n        var fatherPuro =  this.delUri(element.fatherType);\r\n        var childPuro =   this.delUri(element.childType);\r\n        \r\n        for (let node of ontoModel)\r\n        {\r\n            if (element.father.includes(node.uri)) {\r\n                fatherOnto.push(node.ontoType);\r\n            }\r\n            \r\n        }\r\n        \r\n        // Změnit!! \r\n        for (var rule of this.rulesJson.commonRules)\r\n        {\r\n            \r\n            /*if ((fatherOnto.includes(rule.fatherOnto) || (fatherOnto.length === 0 && rule.fatherOnto === \"\")) &&\r\n                (fatherPuro.includes(rule.fatherPuro) || (fatherPuro.length === 0 && rule.fatherPuro === \"\")) &&\r\n                childPuro.includes(rule.childPuro) || childPuro === rule.childPuro &&\r\n                rule.hasRelation <= connection\r\n                )\r\n            */\r\n            if(true)\r\n            {\r\n                for(let val of rule.offer) \r\n                { \r\n                    //question atd...\r\n                    result.push({\"name\":this.rulesJson.classes[val], \"uri\":element.uri.value, \"origin\": key}); \r\n                }\r\n                return {\"buttons\": result, \"title\": element.label.value, type: \"elementSelection\"};\r\n            }\r\n        }\r\n    }\r\n\r\n    delUri = (uri) => \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n\r\n}","import jsonData from './rules.json';\r\nimport RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\n// TODO -> v případě dvou otců projdi cyklem a zkontroluj oba!!!!\r\n// TODO -> vyřešit vazby\r\n// TODO -> next element do objektového schématu -> zatím prototyp \r\n// TODO -> třída element pro sjednocení properties \r\n// UNDO \r\n\r\nexport default class EventController {\r\n    constructor() {\r\n        \r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData));      \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController(this.rulesJson);\r\n        var queryTreePromise = this.rdfController.getFullPath();\r\n\r\n        \r\n        queryTreePromise.then(function(results) {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        }.bind(this));\r\n        \r\n        var relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(function(results) {\r\n            this.relations = results;   \r\n            console.log(results);        \r\n        }.bind(this));\r\n\r\n                     \r\n        this.ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\";\r\n\r\n\r\n        this.selectedEl = null;\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = null;\r\n        this.relationIndex = 0; \r\n        this.relationType = null; \r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n        \r\n        this.setIndexexToDefault();\r\n    }\r\n    \r\n    getDefault = () =>\r\n    {\r\n     \r\n        // tady se zeptej na type relationu \r\n        // tohle není do defaultu ale do next element\r\n        // hod vyjmku v případě když nebude žádný relation k dispozici\r\n\r\n        window.onerror = () => {\r\n            alert(\"Error caught\");\r\n        };\r\n\r\n        let relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n            return this.nextElement(\"Relator\",this.relation.uri.value,\"BRelation\",\"from\");\r\n        }\r\n        else\r\n        {\r\n            let result = this.rulesJson.bRelationRules[0].offer.map(function (ruleClass) {\r\n                return {\"name\": ruleClass, \"uri\":relation.uri.value, \"origin\":\"from\"};\r\n            }.bind(this));\r\n            \r\n            return {\"buttons\": result, \"title\": this.rulesJson.bRelationRules[0].question.replace(\"VAL\",relation.label.value), \"type\": this.delUri(relation.type.value) };\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // předělat do objektů a metod-> sjednotit kód \r\n    //puroType createdClass \r\n    nextElement = async (selectedType, selectedUri, puroType, ruleKey,elName) =>\r\n    {  \r\n        \r\n        //první průchod na relataion \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n       \r\n           return this.relationWasSelected (selectedType, ruleKey);\r\n        }\r\n        else //(puroType === \"classSelection\" || puroType === \"elementSelection\") \r\n        {\r\n            //Jméno půjde měnit vždy.. teď záleží  \r\n            \r\n            \r\n            // create relation \r\n            let relationEl; \r\n            let additionalRule; \r\n            let relFlow = puroType;\r\n            let relType; \r\n            let elRelTypes;\r\n\r\n            if (puroType.includes(\"ontoRelation-save-bRelation\"))\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                }\r\n                selectedType = this.elSettings.selectedType;\r\n                selectedUri = this.elSettings.selectedUri;\r\n                puroType = this.elSettings.puroType;\r\n                ruleKey = this.elSettings.ruleKey;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n\r\n            }\r\n          \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {\r\n               additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],ruleKey),selectedType);\r\n\r\n               relationEl = this.ontoController.getRelationElements(elName, this.getElementByUri(selectedUri), selectedUri,this.relation.uri.value, additionalRule.length, this.relationRuleIndex, puroType, this.ontoUri, ruleKey);\r\n               this.elSettings = {selectedType: selectedType, selectedUri: selectedUri, puroType: puroType, ruleKey:ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\"};\r\n               //alert(relationEl)\r\n               if (relationEl === this.relation.uri.value)\r\n               {\r\n                  \r\n                 let updateRelTypes = this.updateRelationTypes();\r\n                 if (updateRelTypes !== false)\r\n                 {\r\n                     return updateRelTypes;\r\n                 }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                //kolala\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"Row\"\r\n                //Ulož DataType do ontoModelu -> pushovat na začátek\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,ruleKey);\r\n            }\r\n            else \r\n            {\r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n                    elRelTypes = selectedType;\r\n                }\r\n\r\n                selectedType = this.elSettings.selectedType;\r\n                selectedUri = this.elSettings.selectedUri;\r\n                puroType = this.elSettings.puroType;\r\n                ruleKey = this.elSettings.ruleKey;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n\r\n            }\r\n            \r\n            let relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n    \r\n            if (relationRules !== true)\r\n            {\r\n                //vrácení otázky v případě true relation ulož -> může se pokračovat\r\n                return Promise.resolve(relationRules); \r\n            }\r\n\r\n            //VALUES CHECK -> pak vrat další větev\r\n\r\n            if (this.valuationArr !== null)\r\n            {\r\n                if (this.valuationArr.length > 0)\r\n                {\r\n                    let button = [{\"name\": this.valuationArr[0].el, \"uri\":this.valuationArr[0].valuation, \"origin\":ruleKey}];\r\n                    // create good question \r\n                    let question = \"Which Datatype represents \" + this.delUri(this.valuationArr[0].valuation) + \"?\"; \r\n                    this.valuationArr.shift(); \r\n                    return Promise.resolve({\"buttons\": button , \"title\": question, \"type\": \"dataType\", \"elName\": true});   \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                    return this.nextTreeBranch(ruleKey); \r\n                }\r\n            }\r\n\r\n            //Přidání do ontomodelu \r\n            this.ontoController.addToOntoModel(selectedUri, this.delUri(selectedUri),selectedType,\r\n            this.delUri(this.selectedEl.type.value),this.relation.uri.value,ruleKey,undefined,undefined,elName);\r\n            \r\n\r\n            \r\n\r\n            //zjištění dodatečných pravide \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement;   \r\n                console.log(additionalRule);\r\n                //aditional rule \r\n                return Promise.resolve(this.ruleController.ruleSelection(undefined,ruleKey,this.selectedEl,undefined,additionalRule,this.queryTree));\r\n            }\r\n            else\r\n            {\r\n                //change selection or step plus\r\n                //kontrolaElementů na konci\r\n                // proměná co určuje, že se jedná o kontrolu elementu  \r\n\r\n                if (this.elementsWithoutType.length === 0)\r\n                {\r\n                    this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n                } \r\n                // přiřazení typu neurčeným elementům \r\n                if (this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length)\r\n                {\r\n                    let element = this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);\r\n                    \r\n                    this.withoutTypeIndex ++;\r\n                    \r\n                    return Promise.resolve(this.ruleController.commonRuleSelection(element, ruleKey,this.ontoController.getOntoModel())); \r\n                }\r\n                else\r\n                {\r\n                    if (this.ontoController.getOntoElement(this.relation.uri.value).from === \"\")\r\n                    {\r\n                        let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value, ruleKey, lastElUri);\r\n                    }\r\n                    //projdi všechny elementy a ověř úplnost typů !!!!!!!!!!!!\r\n                    //změnit strany případně nebo skočit na další relation!! jedeme dál..  \r\n                    // this.relator rule.Key pro check elementů\r\n                    \r\n                    let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, ruleKey); \r\n                    if (unfinishedTypes.length > 0)\r\n                    {\r\n                \r\n                        // upravit na funkci\r\n                        \r\n                        let question = \"\";\r\n                        \r\n                        console.log(unfinishedTypes);\r\n                        \r\n                        if (\"question\" in unfinishedTypes[0].rule)\r\n                        {\r\n\r\n                            for (let q of this.rulesJson.questions)\r\n                            {\r\n                                if (q.type === unfinishedTypes[0].rule.question)\r\n                                {\r\n                                    question = q.question;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            \r\n\r\n                            question = (question === \"\") ? unfinishedTypes[0].question : question; \r\n                            let qType = (unfinishedTypes[0].key in unfinishedTypes[0].rule) ? unfinishedTypes[0].rule[unfinishedTypes[0].key][0] : unfinishedTypes[0].rule.type[0];\r\n                            question =  question.replace(\"VAL\", this.delUri(unfinishedTypes[0].element)).replace(\"TyPe\",qType); \r\n                        }\r\n                        else\r\n                        {\r\n                            question = \"What is \" + unfinishedTypes[0].key + \" of \" + this.delUri(unfinishedTypes[0].element);\r\n                        }\r\n\r\n\r\n                        let mappedButtons = unfinishedTypes[0].types.map(function (ruleClass) {\r\n                            return {\"name\": ruleClass, \"uri\": unfinishedTypes[0].element, \"origin\": ruleKey};\r\n                        }.bind(this));\r\n\r\n                        return Promise.resolve({\"buttons\": mappedButtons, \"title\": question, type: unfinishedTypes[0].key, \"elName\": true}); \r\n                               \r\n                    }\r\n                    else\r\n                    {\r\n                     \r\n                        //projdi všechny již zvolené elementy v onto modelu a zkontroluj úplnost typů\r\n                        //relsationRuleIndex > 1 => další relation\r\n\r\n                        \r\n                        if (this.relationRuleIndex > 1)\r\n                        {\r\n                            //další relation!! \r\n                            this.setIndexexToDefault(); \r\n\r\n                            this.relationOrderIndex ++;\r\n                            \r\n                            if (this.relationOrderIndex === this.relations.length)\r\n                            {\r\n                                alert(\"Transformation is comlete!!!\");\r\n                                return Promise.resolve({buttons: [], title: \"The End\", type: \"end\"});\r\n                            }\r\n                            else\r\n                            {\r\n                                return Promise.resolve(this.getDefault());\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                        //Doplň VALUE \r\n                        if (this.valuationArr === null)\r\n                        {\r\n                            this.valuationArr = this.getAllTreeValuations(ruleKey);\r\n                            // vrat dotaz na Value\r\n                            if (this.valuationArr.length > 0)\r\n                            {\r\n                                let question = \"Which Datatype represents \" + this.delUri(this.valuationArr[0].valuation) + \"?\";\r\n                                let button = [{\"name\": this.valuationArr[0].el, \"uri\":this.valuationArr[0].valuation, \"origin\":ruleKey}];\r\n                                this.valuationArr.shift(); \r\n                                return{\"buttons\": button , \"title\": question, \"type\": \"dataType\", \"elName\": true};\r\n                            }\r\n                        }\r\n                        //přepnutí na další větev\r\n                        return this.nextTreeBranch(ruleKey);\r\n                    }\r\n                }\r\n\r\n            \r\n\r\n\r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n    updateRelationTypes = () =>\r\n    {\r\n        let ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        \r\n        if (ontoRel.to !== undefined && ontoRel.from !== undefined)\r\n        {\r\n            //koala\r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType === undefined)\r\n            {\r\n                let rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from,ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType === undefined) \r\n            {\r\n                let rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to);\r\n            }\r\n            else if (ontoRel.toType === undefined && ontoRel.fromType === undefined )\r\n            {\r\n                let rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from,ontoRel.to);\r\n            }\r\n        }\r\n        \r\n        return false; \r\n    }\r\n\r\n\r\n    nextTreeBranch = (ruleKey) => \r\n    {\r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from === \"\")\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, ruleKey, lastElUri);\r\n        }\r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        let relationTypePromise; \r\n\r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n       \r\n            ruleKey = this.relationRuleIndex === 0 ? \"from\" : \"to\";\r\n            relationTypePromise = this.getRelatedElements(this.relation,ruleKey);\r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        return new Promise(resolve => {relationTypePromise.then(function(results) {\r\n            this.valuationArr = null; \r\n            resolve (this.handleRelatedElements(results,\"nextElement\",ruleKey))\r\n        }.bind(this));});\r\n    }\r\n\r\n    getAllTreeValuations = (ruleKey) =>\r\n    {\r\n        let valuations = [];\r\n        for(let relEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(relEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: el.uri.value, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg = () =>\r\n    {\r\n      let ontoModel = this.ontoController.getOntoModel();\r\n      let svg = this.imageController.createGraph(ontoModel);\r\n      return svg; \r\n    }\r\n    \r\n    createRelCardinalityBtn = (type, rule, ruleKey, fromE, toE, relationFlow, elUri) =>\r\n    {\r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        let fromB = rule.fromT.map(function (ruleClass) {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey, direction: \"from\"};\r\n            }.bind(this));\r\n        \r\n        let toB = rule.fromT.map(function (ruleClass) {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey, direction: \"to\"};\r\n        }.bind(this));\r\n        \r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [this.delUri(fromE), this.delUri(toE)]};\r\n    }\r\n\r\n    getRelationRules = (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) => \r\n    {\r\n        \r\n        //type save relation - type -> podradnost -> ulozeni \r\n        // this.relationType = definice type \r\n        // \r\n    \r\n\r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        \r\n\r\n\r\n\r\n        //dostanu příchozí elementy \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);\r\n        }\r\n        else\r\n        {\r\n            //pouze upravím dosavadní element  modify\r\n            return true; \r\n        }\r\n\r\n\r\n        \r\n        if ((relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1) && !relationFlow.includes(\"save\"))\r\n        {\r\n            if (\"fromT\" in rule && \"toT\" in rule)\r\n            {\r\n                \r\n                this.elSettings.selectedType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.selectedType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, \"uriDomyslet\", \"nazev\", \"\", \"\");\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            //ulož do model\r\n            this.ontoController.addRelation(relOntoType, fromE, toE, \"uriDomyslet\", \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map(function (ruleClass) {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           }.bind(this));\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};\r\n\r\n           // pokud pouze jeden offer aplikuj a zavolej \r\n           if (rule.offer.length > 1)\r\n           {\r\n               // kod vyse ě\r\n           }\r\n           else\r\n           {\r\n               return  this.relationCardility (); \r\n           }\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    findRule = (rules, condition) =>\r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) {\r\n              \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (condition[index + 1] === ontoType || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    relationWasSelected = (selectedType, ruleKey) => \r\n    {\r\n       \r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        //selected type do object property\r\n  \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        //this.ontoController.addToOntoModel(this.relation.uri.value, this.relation.label.value, selectedType, this.relation.type.value,\r\n        //    this.relation.uri.value, undefined, this.relation.from.value, this.relation.to.value);\r\n\r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, this.relation.label.value);\r\n\r\n        \r\n        return new Promise(resolve => {relationTreePromise.then(function(results) {\r\n\r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", ruleKey, rule));\r\n\r\n         }.bind(this));});\r\n    }\r\n\r\n    handleRelatedElements = (elements, origin, ruleKey, rule) =>\r\n    {\r\n       \r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1; \r\n\r\n        if (origin === \"relationWasSelected\")\r\n        {\r\n            this.selectedEl = this.getNextElement();\r\n            \r\n            //rychlá záplata -> předělat -> už zvolen koko\r\n            let el = this.getElementByUri(this.selectedEl.uri.value)\r\n            let additionalRule = [];\r\n            \r\n            if (el.father.length > 0)\r\n            {\r\n                let fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                if (fatherType !== false)\r\n                {\r\n                   console.log(el);\r\n                   additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(rule,ruleKey),fatherType);\r\n                }\r\n            }\r\n\r\n            if (additionalRule.length === 0)\r\n            {\r\n           \r\n                return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl,undefined,undefined,this.queryTree));\r\n            }\r\n            else\r\n            {\r\n              return (this.ruleController.ruleSelection(undefined,ruleKey,this.selectedEl,undefined,additionalRule,this.queryTree));\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let rule = this.rulesJson[this.relationType];\r\n            //Zkontroluj zda element useless a jaký typ!!! \r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n            //počítá se dle délky pole +1!!\r\n            this.relationIndex --;\r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, undefined,undefined,this.queryTree));\r\n        }\r\n\r\n    }\r\n\r\n    checkElementsInRelationTree = (tree, ontoModel) =>\r\n    {\r\n        // možná by nebylo od věci zkontrolovat úplnost zvolených typů!!!\r\n        let elementsWithoutType = [];\r\n        let withoutType = true; \r\n        for (let element of tree)\r\n        {\r\n            withoutType = true;\r\n            for (let node of ontoModel)\r\n            {\r\n                if(element.uri.value === node.uri)\r\n                {\r\n                    withoutType = false;\r\n                }\r\n            }\r\n\r\n            if (withoutType === true && !this.isElementUseless(element) && ! this.isElementInstace(element))\r\n            {\r\n                elementsWithoutType.push(element); \r\n            }\r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements = (relation, key) =>\r\n    {\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n\r\n        for (let el of relation[key])\r\n        {\r\n            promiseArr.push(this.rdfController.getRelationBTypes(el));\r\n        }\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            for (let i = 0; i < result.length; i++) {\r\n                \r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][i]));\r\n                }\r\n                else\r\n                {\r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            \r\n            return result; \r\n        })\r\n\r\n\r\n        return this.rdfController.getRelationBTypes(relation[key].value);    \r\n    }\r\n\r\n    delUri = (uri) => \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n\r\n    l = (m2) =>\r\n    {\r\n        console.log(\"CECKKKKKKKKKKKKKKKKKKKKK\");\r\n        console.log(m2);\r\n    } \r\n\r\n    \r\n    getNextElement = () =>\r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n        //ověření zda už nebyl element určen\r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n            if (ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                this.relationIndex --;\r\n                index = 0;  \r\n            }\r\n            \r\n        }  \r\n        returnEl = this.relationTree[this.relationIndex];\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    isElementInstace = (element) =>\r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency = (relation,ruleKey) =>\r\n    {\r\n      \r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        if (this.elementConsitencyTree.length === 0)\r\n        {\r\n            for (let node of ontoModel)\r\n            {\r\n                if (node.fromRelation === relation && node.direction === ruleKey)\r\n                {\r\n                    this.elementConsitencyTree.push(node); \r\n                }\r\n            }\r\n\r\n            if (this.elementConsitencyTree.length === 0)\r\n            {\r\n               return this.elementConsitencyTree; \r\n            }\r\n        }\r\n        \r\n        let relOntoType = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        let elementTypes = this.ruleController.elementConsistencyRules(this.elementConsitencyTree[this.elementConsistencyIndex],this.ontoController);\r\n        //nejsem si jist druhou podmínkou ale \r\n        while (this.elementConsitencyTree.length < this.elementConsistencyIndex && elementTypes.length === 0)\r\n        {\r\n            this.elementConsistencyIndex ++; \r\n            elementTypes = this.ruleController.elementConsistencyRules(this.elementConsitencyTree[this.elementConsistencyIndex], this.ontoController);\r\n        }\r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    // element ve formátu queryTree!!\r\n    isElementUseless = (element) =>\r\n    {\r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri = (uri) =>\r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity = (elName) => \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements = (rule, elements) =>\r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault = () => \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport mermaid from \"mermaid\";\nimport Parser from 'html-react-parser';\nimport Pars from 'react-html-parser';\nimport EventController from './controllers/EventController.js'; \n\n//import RdfController from './controllers/RdfController.js';\n//import { thisTypeAnnotation } from \"@babel/types\";\n\n//přiřadit key k talčítkům -> zamyslet se nad využitím \nclass InputField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fieldValue: '', chart: \"\", title: \"\", fatherUrl: \"\", startTransform: true, \n      buttons: [], order: 0, \n      ontoModel: [], queryRoots: [], roots: [], changeName: false, elName: \"\", type: \"\"};\n\n\n    this.eventController = new EventController();\n    //this.RdfController = new RuleController(); \n\n    mermaid.initialize({\n      startOnLoad: false,\n      //themeCSS: 'g.classGroup text { font-size: 40px; }',\n        });\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault(); \n\n    window.addEventListener('unhandledrejection', function(event) {\n      alert(\"Rule is not defined!\\nOnly the first answer is correct! \\nRules are not complete yet!\\nPage will be reloaded!\");\n      window.location.reload(); \n     });\n\n    $(\"#tools\").empty();\n    var rules = this.eventController.getDefault();\n    this.setState({buttons: rules.buttons, title: rules.title, type: rules.type, startTransform: false});\n  }\n\n  handleClick = (selectedType, selectedUri, type, origin) => {\n     let elName = this.state.elName;\n  \n   \n     let chart = `classDiagram\n     class Shape{\n         <<interface>>\n         noOfVertices\n         draw()\n     }\n     class Color{\n         <<enumeration>>\n         RED\n         BLUE\n         GREEN\n         WHITE\n         BLACK\n     }`;\n\n    \n    \n     if (elName === \"\" && this.state.changeName === true)\n     {\n       alert(\"Plese write name of the element!\");\n     }\n     else\n     {\n\n        elName = elName.replace(/\\s/g, '_');\n        \n        if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName))\n        {\n          alert(\"Element already exists! Please choose different name.\")\n        }\n        else\n        {\n          this.eventController.nextElement(selectedType,selectedUri,type, origin, elName).then(function(results) {\n            console.log(\"call\");\n            console.log(results);\n            let svg = this.eventController.getGraphSvg(); \n  \n            this.setState({buttons: results.buttons,type: results.type, title: results.title, elName: \"\", changeName: results.elName});\n            \n            if (svg !== false)\n            {\n              this.createGraph(svg);\n            }\n            \n          }.bind(this));\n        }\n    }\n  }\n\n\n  createGraph(chart) {\n\n \n      \n  \n      const cb = function(chart){  \n   \n        this.setState({chart: chart});\n      }.bind(this);\n      \n      mermaid.render('id1',chart,cb);\n      \n    \n  }\n\n\n  handleClickName = (stateName) =>\n  {\n    this.setState({changeName : !stateName});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"form-group col-md-6\" id=\"graph\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Puro model</label>\n            <div className=\"form-control  transformWindow embed-responsive\" id=\"exampleFormControlTextarea1\">\n              <PuroModel /> \n            </div>\n          </div>\n          <div className=\"form-group col-md-6\" id=\"graph\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Onto model</label>\n            <div className=\"form-control transformWindow\" id=\"exampleFormControlTextarea1\">\n                <Mermaid chart = {this.state.chart}/>\n            </div>\n          </div>\n         \n            <QuestionPart startTransform = {this.state.startTransform} type = {this.state.type} title={this.state.title} onChange={this.handleChange} elName = {this.state.elName} buttons={this.state.buttons} onClick = {this.handleClick} onClickName = {this.handleClickName} changeName = {this.state.changeName} onSubmit={this.handleSubmit} />\n           \n        </div>\n       \n      </div>\n\n\n\n    );\n  }\n\n}\n\nclass PuroModel extends React.Component {\n\n  // $(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\n  loaded = () =>\n  {\n    \n    $(\"#iframePuro\").empty();\n  }\n  render() {\n    return  <iframe onLoad = {this.loaded}  id = \"iframePuro\" className=\"embed-responsive-item\" src = \"http://protegeserver.cz/purom4/?model=ca151b74998bee07d442652cc100f821\"></iframe>;\n  }\n\n\n}\n\nclass Mermaid extends React.Component {\n \n  render() {\n    return <div dangerouslySetInnerHTML={{__html: this.props.chart}}></div>;\n  }\n}\n\n\nclass QuestionPart extends React.Component {\n  render() {\n    return(\n      <div className = \"container-fluid text-center questionPart\">\n         <button type=\"Submint\" className= {this.props.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {this.props.onSubmit}>\n              Start transformation\n          </button>\n        <div className = {this.props.startTransform ? \"d-none\" : \"\"}>\n        <h3>{this.props.title}</h3>\n        <div className =  {this.props.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n                <div className = \"input-group inputName\">\n                      <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n                      </div>\n                      <input placeholder = \"Write name of the new element!\" type=\"text\" className=\"form-control\" onChange = {this.props.onChange}  value = {this.props.elName}></input>\n                  \n                  </div> \n              <h5 className = {this.props.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>  \n              </div>\n          <div className = \"divButtons text-center\">\n            <ModalButtons  buttons={this.props.buttons} onClick = {this.props.onClick} type = {this.props.type} elNames = {this.props.changeName} />\n          </div>\n         <div className = \"text-right col-md-6 mx-auto divLowBtn\"> \n          <button type = \"button\" className=\"btn btn-primary btnModal\" onClick = {(() => alert(\"Will be implemented!\"))}>Undo</button>\n          <button type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\">Cancel</button>\n         </div>\n         </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass ModalButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  \n  }\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\"))\n    {\n      return (\n        <div className=\"row col-md-4 mx-auto\">\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>  \n          <select ref = \"relFrom\" className = \"col-md-6 mx-auto form-control cardinalitySelect\">\n              {this.props.buttons.filter((val) => {\n                  return val.direction === \"from\";\n              }).map((rel) => { \n               return <option value = {rel.name}>{rel.name}</option>\n              })}\n          </select>\n            \n          <select ref = \"relTo\" className = \"col-md-6 mx-auto form-control cardinalitySelect\"> \n              {this.props.buttons.filter((val) => {\n                  return val.direction === \"to\";\n              }).map((rel) => { \n               return <option value = {rel.name}>{rel.name}</option>\n              })}\n          </select> \n        \n          <button className = \"btn btn-success mx-auto questionPart\" onClick = {() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button> \n        </div> \n      )\n    }\n    else if (this.props.type.includes(\"end\"))\n    {\n      return (\n        <div className = \"col-md-4 mx-auto\">\n         <button className = \"btn btn-success\" >Download Onto-UML graph</button>\n        </div>\n      ); \n    }\n    else\n    {\n      return (\n      <div className=\"row col-md-4 mx-auto\">\n      {this.props.buttons.map((value) => {\n        return  <div className = \"col-md-4 mx-auto\">\n                      <button key = {this.props.uri} type=\"button\"  className=\"btn btn-success btnModal\" onClick = {() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") ) ? \"Next\" : value.name}</button>\n                </div>\n      })}\n     </div>\n    )\n    }\n\n  }\n}\n\n\nclass Board extends React.Component {\n\n  render() {\n    return [\n      <InputField />\n    ]\n\n  }\n}\n\n\nReactDOM.render(\n  <Board />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}