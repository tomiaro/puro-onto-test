{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","../node_modules/@trust/webcrypto/src/algorithms sync","model.PNG","controllers/RdfController.js","controllers/OntoModelController.js","controllers/MainController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","RdfController","puro","getRelatorBtype","relator","fromUri","query","Promise","sparqlQuery","result","this","deleteDuplicity","findBTypeRelation","fatherElement","returnArr","endCall","elementsUri","uri","value","length","i","push","bind","findBTypeChild","getFullPath","forEach","node","father","fatherType","fatherTypeRelation","childType","child","childRel","connect","recursiveFindChild","lastResult","bTypeTree","lastCall","type","final","sparql","callback","puroXML","XMLSerializer","serializeToString","turtle","store","rdf","graph","parse","serialize","undefined","err","str","require","create","load","results","execute","getRelationBTypes","relationUri","getRelations","console","log","findRelation","elementUri","firstFind","a","properties","duplicity","checkArr","res","property","index","includes","k","some","concat","split","splice","$","ajax","url","async","cache","dataType","success","xml","OntoModelController","addToOntoModel","label","ontoType","puroType","relationName","direction","from","to","elName","elPuroType","elLabel","elUri","nameWasChange","ontoModel","fromRelation","addRelation","fromType","toType","updateOntoModel","getOntoModel","getElementsRelation","getElementOntoType","element","getOntoElement","getElementsByOntoType","changeOrigin","origin","getLastElementUri","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","relationRuleIndex","ontoUri","ruleKey","passEl","lastRelElement","elementFather","checkDuplicity","getRelatedTypes","rels","elements","types","rel","el","ontoModelHistory","JSON","stringify","MainController","buttons","title","origName","mapButtons","Array","isArray","buttonType","name","originalName","unfinishedType","questions","question","rule","q","qType","key","replace","delUri","ImagController","createGraph","graphCommand","findLabel","fromT","toT","trim","RuleController","rules","ruleSelection","queryTree","commands","additionalRules","offerTypes","needElName","getSpecificRule","getAdditionalRule","offer","isElementInstace","rulesJson","createButtons","elementConsistencyRules","ontoController","check","elTypes","superType","subType","elementConsistencySelection","allTypes","r","addRule","elementConsAddSelection","moreThanOne","addRules","selectedType","commonRuleSelection","fatherOnto","childPuroType","connection","commonRules","childPuro","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","EventController","jsonData","rdfController","imageController","ImageController","ruleController","historyController","then","relations","elSettings","relationOrderIndex","relation","relationIndex","relationType","setIndexexToDefault","valuation","nextElement","bRelationRules","changeElementsProperty","relationWasSelected","relFlow","relationEl","additionalRule","getElementByUri","relType","updateRelTypes","updateRelationTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","nextTreeBranch","selectedEl","getNextElement","elementsWithoutType","checkElementsInRelationTree","relationTree","withoutTypeIndex","lastElUri","unfinishedTypes","checkElementsConsistency","createQuestion","alert","getDefault","getAllTreeValuations","ontoRel","createRelCardinalityBtn","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","relEl","fromE","toE","relationFlow","fromB","ruleClass","toB","labelFromE","labelToE","relOntoType","fromEType","toEType","findRule","condition","validity","relationTreePromise","tree","withoutType","isElementUseless","elementConsitencyTree","elementConsistencyIndex","promiseArr","all","unshift","m2","returnEl","elementTypes","connectFrom","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","prop","Layout","props","svg","setState","state","eventController","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","src","alt","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","window","addEventListener","location","reload","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","handleChangeName","fadeTo","slideUp","svgBlob","Blob","URL","createObjectURL","data-toggle","data-target","disabled","data-dismiss","confirm","placeholder","orginalName","onChange","lenght","elNames","class","role","ModalButtons","refs","createRef","ref","filter","val","relFrom","relTo","href","download","Page","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3613ca43.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 317,\n\t\"./locale.js\": 317\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 680;","var map = {\n\t\"./N3Lexer\": 191,\n\t\"./N3Lexer.js\": 191,\n\t\"./N3Parser\": 192,\n\t\"./N3Parser.js\": 192,\n\t\"./N3Store\": 330,\n\t\"./N3Store.js\": 330,\n\t\"./N3StreamParser\": 331,\n\t\"./N3StreamParser.js\": 331,\n\t\"./N3StreamWriter\": 332,\n\t\"./N3StreamWriter.js\": 332,\n\t\"./N3Util\": 193,\n\t\"./N3Util.js\": 193,\n\t\"./N3Writer\": 194,\n\t\"./N3Writer.js\": 194\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 706;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 833;","module.exports = __webpack_public_path__ + \"static/media/model.7c8b6791.PNG\";","import $ from 'jquery';\r\n\r\n\r\nexport default class RdfController {\r\n    \r\n    constructor() {\r\n\r\n        this.rdf = require('rdflib');\r\n        var puro ;\r\n        \r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"puroOutput.xml\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n                this.puroXML = xml;\r\n                puro = xml; \r\n            }\r\n        });\r\n        this.puroXML = puro; \r\n    }\r\n\r\n\r\n    getRelatorBtype = (relator, fromUri) =>\r\n    {\r\n            var query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findBTypeRelation =  (fatherElement, returnArr,endCall) => \r\n    {\r\n            \r\n            var elementsUri = fatherElement.uri.value;\r\n            var query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label . \r\n                \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                var checkArr = []; \r\n                var connect = [];\r\n               \r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    // otestovat jak funguje v případě dvou \r\n                    \r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    //POZOR MUZE BYT CHYB kvuli opakovani\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n\r\n    findBTypeChild =  (fatherElement, returnArr,endCall) => \r\n        {\r\n               \r\n                var elementsUri = fatherElement.uri.value;\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?valuationLabel ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelaion}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, function callback(result) {  \r\n               \r\n                    var checkArr = []; \r\n                    var connect = [];\r\n\r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                  \r\n                    if (result.length > 0)\r\n                    {\r\n                    \r\n                        // otestovat jak funguje v případě dvou \r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //POZOR MUZE BYT CHYB kvuli opakovani\r\n                      \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                }.bind(this));          \r\n             }\r\n\r\n             getFullPath = () => \r\n             {\r\n                 var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                     {?child puro:subTypeOf ?uri}\r\n                     ?child a ?childType .\r\n                     ?child ?childRel ?uri . \r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {?uri puro:linkedTo ?connect}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                  this.sparqlQuery(query, function callback(result) {\r\n                      \r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            node.childType = [node.childType.value];\r\n                            node.child = [node.child.value];\r\n                            node.childRel = [node.childRel.value];\r\n                            if (node.connect) {\r\n                                node.connect = [node.connect.value]\r\n                            }\r\n                            else\r\n                            {\r\n                                node.connect = [];\r\n                            }\r\n                            // tady to nastav ve SPARQ \r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                      this.deleteDuplicity(result,[\"valuation\"]);\r\n                      this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                             resolve(lastResult);\r\n                     });\r\n                 }.bind(this));\r\n             });\r\n             }\r\n\r\n             recursiveFindChild = (i, result, bTypeTree,lastCall, type) => \r\n             {       \r\n                 if(i === result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, function endCall(final) {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        }.bind(this));\r\n                     }\r\n                     else\r\n                     {\r\n                       \r\n                        this.findBTypeChild(result[i],bTypeTree, function endCall(final) {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        }.bind(this));\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             sparqlQuery = (sparql, callback) => {\r\n                var puroXML = this.puroXML;\r\n                puroXML = new XMLSerializer().serializeToString(puroXML);\r\n               \r\n                var store = this.rdf.graph();\r\n                var contentType = 'application/rdf+xml';\r\n                var baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                 this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                var rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n\r\n     \r\n            //from nebo to poslat si ukazatel? \r\n            getRelationBTypes = (relationUri) => \r\n            {\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                    this.sparqlQuery(query, (result) => {\r\n                        \r\n                        // result.push({uri: {token:\"uri\", value: relationUri}});\r\n                        \r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            //začátek hlavního\r\n            getRelations = () => \r\n            {\r\n                // ještě by to chtělo sjednotit do pole \r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                  {?from a puro:BObject}\r\n                  UNION \r\n                  {?from a puro:BType}\r\n                  {?to a puro:BObject}\r\n                  UNION\r\n                  {?to a puro:BType} \r\n                  ?to a ?toType . \r\n                  ?from a ?fromType . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            findRelation = (elementUri) => {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            firstFind = async () => {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //result[index].connect\r\n            deleteDuplicity = (result, properties) => {\r\n                var duplicity;\r\n                var checkArr = []; \r\n                \r\n                // sjednocení datových typů na pole\r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import { updateExpression } from \"@babel/types\";\r\n\r\nexport default class OntoModelController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction,from, to, elName, nameWasChange = false) => \r\n    {\r\n    \r\n       \r\n        let elPuroType;\r\n        let elLabel;\r\n        let elUri; \r\n\r\n        if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n        {\r\n            elPuroType = false;\r\n            elLabel = elName;\r\n            elUri = \"http://lod2-dev.vse.cz/data/ontomodels#\" + elName; \r\n        }\r\n        else\r\n        {\r\n            elPuroType = puroType;\r\n            elLabel = nameWasChange ? elName : label; \r\n            elUri = uri; \r\n        }\r\n\r\n        this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: relationName, direction: direction, from: from, to:to});\r\n        console.log(this.ontoModel)\r\n\r\n\r\n\r\n        return this.ontoModel; \r\n    }\r\n\r\n    addRelation = (type, from, to, uri, label, fromType, toType) => \r\n    {\r\n        //fromT toT\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from:from, to:to,uri:uri, label:label, fromType: fromType, toType: toType});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    updateOntoModel = (elementsUri, property, value) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                node[property] = value; \r\n                return this.ontoModel;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n      \r\n        let returnArr = []; \r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && node[direction] === uri)\r\n            {\r\n                //může být víc \r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" && (node[\"from\"] === uri || node[\"to\"] === uri))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        let ontoType = false; \r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n    getElementsByOntoType = (type) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType)\r\n            {\r\n                result.push(node.uri);\r\n            }\r\n       }\r\n\r\n       return result; \r\n\r\n    }\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n    getLastElementUri = (origin) => \r\n    {\r\n        var uri; \r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n            if (this.ontoModel[i].fromRelation === origin)\r\n            {\r\n                uri = this.ontoModel[i].uri;\r\n                return uri; \r\n            }\r\n            else if(origin === undefined)\r\n            {\r\n                return this.ontoModel[i].uri;\r\n            }\r\n            \r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, relationRuleIndex, puroType, ontoUri, ruleKey, nameWasChange = false) => \r\n    {\r\n        \r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false)\r\n        {\r\n            let father;\r\n            let passEl; \r\n\r\n            if (puroType === \"superType\")\r\n            {\r\n                father = ontoUri + elName;\r\n                passEl = element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = ontoUri + elName;    \r\n                father = element.uri.value;\r\n            }\r\n            else\r\n            {\r\n                father = element.father[0];\r\n                passEl = ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if( relationRuleIndex === 2 && addRulesLenght === 0)\r\n        {\r\n            \r\n            \r\n            let lastRelElement;\r\n            let passEl = (selectedUri === false) ? ontoUri + elName : selectedUri;\r\n            \r\n            for (let index = this.ontoModel.length - 1; index >= 0; index --)\r\n            {\r\n                console.log(this.ontoModel);\r\n                if (this.ontoModel[index][\"fromRelation\"] === relationUri)\r\n                {\r\n                    lastRelElement = this.ontoModel[index];\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (lastRelElement.direction !== ruleKey && lastRelElement.fromRelation === relationUri)\r\n            {\r\n                this.updateOntoModel(relationUri,ruleKey,passEl);\r\n                return relationUri; \r\n            }\r\n            else\r\n            {\r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n        else if (puroType === \"elementSelection\")\r\n        {   \r\n            //father může být pole.. předělat!!!\r\n            let elementFather = this.getOntoElement(element.father[0]);\r\n            return [elementFather.uri, element.uri.value];\r\n            //this.addRelation(\"Dodělat závislé na pravidlech\", elementFather.uri , element.uri.value);\r\n        }\r\n\r\n       \r\n        \r\n    }\r\n\r\n    checkDuplicity = (label) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes = (elUri, direction, ontoType) => \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n\r\n        for (let rel of rels)\r\n        {\r\n          //Arrow \r\n          if (rel.ontoType === ontoType)\r\n          {\r\n              let el = (elUri === rel.to) ? rel.from : rel.to;\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType !== \"Arrow\")\r\n          {\r\n            if (rel.ontoType === \"Relator\")\r\n            {\r\n                types.push(rel.ontoType);\r\n            }\r\n            else \r\n            {\r\n                let el = (elUri === rel.to) ? rel.from : rel.to;\r\n                elements.push(el);\r\n                types.push(this.getElementOntoType(el)); \r\n            }\r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","export default class MainController{\r\n\r\n   \r\n   \r\n   \r\n    // orgin lze držet jako property objektu \r\n    // uri lze držet v property objektu \r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        \r\n        \r\n        //\"uri\": unfinishedTypes[0].element\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n     \r\n\r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", this.delUri(unfinishedType.element)).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            return \"What is \" + unfinishedType.key + \" of \" + this.delUri(unfinishedType.element)+\"?\";\r\n        }\r\n\r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n\r\n\r\n}","import { notEqual } from \"assert\";\r\nimport { linkRelationProperty } from \"rdflib/lib/util\";\r\nimport MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph = (ontoModel) =>\r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to) !== false && this.findLabel(node.from) !== false) {\r\n                if (node.ontoType === \"Arrow\")\r\n                {\r\n                    graphCommand += this.findLabel(node.to)  + \" --|> \" +  this.findLabel(node.from) + \"\\n\"; \r\n                }\r\n                else if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from && node.to) \r\n                    {\r\n                       let fromT = node.fromType;\r\n                        let toT = node.toType;\r\n\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        graphCommand += this.findLabel(node.from) +\" \"+ (fromT ? '\"'+fromT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+fromT[1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\"; \r\n                        graphCommand += node.label +\" \"+ (toT ? '\"'+toT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+toT[1]+'\"' : \"\") + \" \" + this.findLabel(node.to) + \" : <<Mediation>>\\n\"; \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // může být i noType -\r\n                    let fromT = node.fromType;\r\n                    let toT = node.toType;\r\n                \r\n                    graphCommand += this.findLabel(node.from) +\" \"+ (fromT ? '\"'+fromT+'\"' : \"\") +\" .. \"+ (toT ? '\"'+toT+'\"' : \"\") + \" \" + this.findLabel(node.to) + (node.ontoType === \"Row\" ? \"\" : \" : <<\"+node.ontoType+\">>\") + \"\\n\"; \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n\r\n    constructor (rules)\r\n    {\r\n        super();\r\n        this.rulesJson = rules;   \r\n        \r\n    }\r\n\r\n    //ruleSelection queryTree, \r\n    ruleSelection = (rules, key, element, ontoType, rule, queryTree) => \r\n    {\r\n        \r\n        let commands; \r\n        let additionalRules;\r\n        let offerTypes;\r\n        let uri;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            console.log(rules)\r\n            console.log(key)\r\n            commands = this.getSpecificRule(rules,key);\r\n            additionalRules = this.getAdditionalRule(commands,ontoType);\r\n            offerTypes = (additionalRules.length > 0 ) ? offerTypes = additionalRules : offerTypes = commands.offer;   \r\n        }\r\n\r\n        //z elementu udělat otázku\r\n        if (element !== false)\r\n        {\r\n            if (this.isElementInstace(element,queryTree))\r\n            {\r\n                needElName =true;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[1].question.replace(\"VAL\",element.label.value);\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[0].question.replace(\"VAL\",element.label.value);\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            \r\n            uri = false; \r\n            question = rules.questions[2].question;\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n    isElementInstace = (element, queryTree) =>\r\n    {\r\n        for (let node of queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n\r\n    // this.ontoController.getOntoElement(this.relation.uri.value);\r\n    elementConsistencyRules = (element,  ontoController) => \r\n    {\r\n\r\n            // v případě undefinied vyhoď, že pravidlo není definováno \r\n            let rules = this.rulesJson[element.ontoType]; \r\n           \r\n            let check = []; \r\n            let addRule; \r\n            \r\n\r\n            //Tady by měla být pole jelikož to může být 1:N \r\n            // !!! Převod na metodu a úprava dle pravidel\r\n            // udělat connect -> subtype -> supertype jenom v případě arrow \r\n\r\n \r\n        \r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Arrow\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Arrow\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n\r\n    \r\n            for (let rule of rules)\r\n            {\r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes);\r\n            }\r\n\r\n            addRule = this.getSpecificRule(rules,\"connected\"); \r\n            if (addRule !== false)\r\n            {\r\n                \r\n            }\r\n            \r\n         \r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection = (rule,elTypes,key,element,check,rules,allTypes) =>\r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    // if includes none -> zkontrolovat lenght superType -> zeptat se jestli chci doplnit superType -> nabídnout co je v tabulce -> zkontrolovat jestli už není\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n                }\r\n                else \r\n                {\r\n                    let additionalRules =  this.getSpecificRule(rules, key + \"ed\", true);\r\n                    if (additionalRules !== false)\r\n                    {\r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n        if (type in rule)\r\n        {\r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n        }\r\n        return check; \r\n    }\r\n\r\n    getSpecificRule = (rules, key, moreThanOne = false) =>\r\n    {\r\n        let addRules = [];\r\n        for (let node of rules)\r\n        {\r\n         \r\n            if (node.key === key)\r\n            {\r\n                if (moreThanOne === true)\r\n                {\r\n                    addRules.push(node);\r\n                }\r\n                else\r\n                {   \r\n                    return node; \r\n                }   \r\n            }\r\n        }\r\n\r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n\r\n\r\n    getAdditionalRule = (rule, selectedType) =>\r\n    {\r\n\r\n        if (selectedType in rule)\r\n        {\r\n            return rule[selectedType];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n    }\r\n\r\n\r\n    commonRuleSelection = (element, key, ontoModel) => \r\n    {\r\n        let result = [];\r\n\r\n        // tohle vyřeš na úrovni onto modelu!\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        const connection =  element.connect.length > 0 ? true : false;  \r\n   \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        \r\n        for (let node of ontoModel)\r\n        {\r\n            if (element.father.includes(node.uri)) {\r\n                fatherOnto.push(node.ontoType);\r\n            }\r\n            \r\n        }\r\n  \r\n        // Změnit!! \r\n        for (var rule of this.rulesJson.commonRules)\r\n        {\r\n\r\n            /*if ((fatherOnto.includes(rule.fatherOnto) || (fatherOnto.length === 0 && rule.fatherOnto === \"\")) &&\r\n                (fatherPuro.includes(rule.fatherPuro) || (fatherPuro.length === 0 && rule.fatherPuro === \"\")) &&\r\n                childPuro.includes(rule.childPuro) || childPuro === rule.childPuro &&\r\n                rule.hasRelation <= connection\r\n                )\r\n            */\r\n           if ((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))) &&\r\n            (connection === rule.connection || rule.connection === 0) && (element.childType.some(r=> rule.childPuro.includes(r) || \r\n            (rule.childPuro.includes(\"none\"))) \r\n           ))\r\n            {\r\n\r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, \"elementSelection\",false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","import EventController from \"./EventController\";\r\n\r\nexport default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        console.log(this.propertiesHistory)\r\n        console.log(this.inputVariables)\r\n        console.log(this.ontoModelHistory)\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","import jsonData from './rules.json';\r\nimport RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\n// TODO -> v případě dvou otců projdi cyklem a zkontroluj oba!!!!\r\n// TODO -> vyřešit vazby\r\n// TODO -> next element do objektového schématu -> zatím prototyp \r\n// TODO -> třída element pro sjednocení properties \r\n// UNDO \r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();\r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData));      \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController(this.rulesJson);\r\n        this.historyController = new HistoryController();\r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;   \r\n            console.log(results);        \r\n        });\r\n\r\n                     \r\n        this.ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\";\r\n\r\n\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    getDefault ()\r\n    {\r\n     \r\n        // tady se zeptej na type relationu \r\n        // tohle není do defaultu ale do next element\r\n        // hod vyjmku v případě když nebude žádný relation k dispozic\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n            return this.nextElement(\"Relator\",this.relation.uri.value,\"BRelation\",\"from\");\r\n        }\r\n        else\r\n        {\r\n            //this.elUri = relation.uri.value;\r\n\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question = this.rulesJson.bRelationRules[0].question.replace(\"VAL\",relation.label.value);\r\n            return this.createButtons(this.rulesJson.bRelationRules[0].offer, question,this.delUri(relation.type.value), false, relation.label.value)\r\n\r\n            \r\n        }\r\n    }\r\n    // předělat do objektů a metod-> sjednotit kód \r\n    //puroType createdClass \r\n    //ruleKey držet v property objektu \r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n        //první průchod na relataion\r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n          \r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n           return this.relationWasSelected(selectedType, this.ruleKey);\r\n        }\r\n        else \r\n        {\r\n            //Jméno půjde měnit vždy.. teď záleží   \r\n            // create relation \r\n            let relationEl; \r\n            let additionalRule; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            if (puroType.includes(\"ontoRelation-save-bRelation\"))\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                }\r\n\r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n            }\r\n\r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {\r\n                \r\n               additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey),selectedType)\r\n               relationEl = this.ontoController.getRelationElements(elName, this.getElementByUri(this.elementUri), this.elementUri,this.relation.uri.value, additionalRule.length, this.relationRuleIndex, puroType, this.ontoUri, this.ruleKey, nameWasChange);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\"};\r\n               if (relationEl === this.relation.uri.value)\r\n               {\r\n                  \r\n                 const updateRelTypes = this.updateRelationTypes();\r\n                 if (updateRelTypes !== false)\r\n                 {\r\n                     return updateRelTypes;\r\n                 }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"Row\" // rovná čára mezi elementy \r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey);\r\n            }\r\n            else \r\n            {\r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n                    elRelTypes = selectedType;\r\n                }\r\n\r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n            } \r\n            \r\n          \r\n            let relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n    \r\n            if (relationRules !== true)\r\n            {\r\n                //vrácení otázky v případě true relation ulož -> může se pokračovat\r\n                return Promise.resolve(relationRules); \r\n            }\r\n\r\n            if (this.valuationArr !== null)\r\n            {\r\n                if (this.valuationArr.length > 0)\r\n                {\r\n                    return this.handleValuation; \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                    return this.nextTreeBranch(this.ruleKey); \r\n                }\r\n            }\r\n            //Přidání do ontomodelu \r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            this.delUri(this.selectedEl.type.value),this.relation.uri.value,this.ruleKey,undefined,undefined,elName, nameWasChange);\r\n            //zjištění dodatečných pravide \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();   \r\n                console.log(additionalRule);\r\n                //aditional rule \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,undefined,additionalRule,this.queryTree);\r\n            }\r\n            else\r\n            {\r\n                //change selection or step plus\r\n                //kontrolaElementů na konci\r\n                // proměná co určuje, že se jedná o kontrolu elementu  \r\n                if (this.elementsWithoutType.length === 0)\r\n                {\r\n                    this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n                } \r\n                // přiřazení typu neurčeným elementům \r\n                if (this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length)\r\n                {\r\n                    const element = this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);\r\n                    \r\n                    this.withoutTypeIndex ++;\r\n                    \r\n                    this.elementUri = element.uri.value;\r\n\r\n                    return this.ruleController.commonRuleSelection(element, this.ruleKey,this.ontoController.getOntoModel()); \r\n                }\r\n                else\r\n                {\r\n                    if (this.ontoController.getOntoElement(this.relation.uri.value).from === \"\")\r\n                    {\r\n                        const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                    }\r\n                    //projdi všechny elementy a ověř úplnost typů !!!!!!!!!!!!\r\n                    //změnit strany případně nebo skočit na další relation!! jedeme dál..  \r\n                    // this.relator rule.Key pro check elementů\r\n                    \r\n                    let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    if (unfinishedTypes.length > 0)\r\n                    {\r\n                        // upravit na funkci\r\n                       \r\n                        const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n                        this.elementUri = unfinishedTypes[0].element; \r\n                        return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n                    }\r\n                    else\r\n                    {\r\n                     \r\n                        //projdi všechny již zvolené elementy v onto modelu a zkontroluj úplnost typů\r\n                        //relsationRuleIndex > 1 => další relation\r\n                        \r\n                        if (this.relationRuleIndex > 1)\r\n                        {\r\n                            //další relation!! \r\n                            this.setIndexexToDefault(); \r\n                            this.relationOrderIndex ++;\r\n                            if (this.relationOrderIndex === this.relations.length)\r\n                            {\r\n                                alert(\"Transformation is comlete!!!\");\r\n                                return {buttons: [], title: \"The End\", type: \"end\"};\r\n                            }\r\n                            else\r\n                            {\r\n                                return this.getDefault();\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                        //Doplň VALUE \r\n                        if (this.valuationArr === null)\r\n                        {\r\n                            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n                            // vrat dotaz na Value\r\n                            if (this.valuationArr.length > 0)\r\n                            {\r\n                               return this.handleValuation(); \r\n                            }\r\n                        }\r\n                        //přepnutí na další větev\r\n                    \r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n    updateRelationTypes ()\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        \r\n\r\n        if (ontoRel.to !== undefined && ontoRel.from !== undefined)\r\n        {\r\n            //koala\r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType === undefined)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from,ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType === undefined) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to);\r\n            }\r\n            else if (ontoRel.toType === undefined && ontoRel.fromType === undefined )\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from,ontoRel.to);\r\n            }\r\n        }\r\n        \r\n        return false; \r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n        const question = \"Which Datatype represents \" + this.delUri(this.valuationArr[0].valuation) + \"?\"; \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n        return buttons;  \r\n    }\r\n\r\n    nextTreeBranch () \r\n    {\r\n      \r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from === \"\")\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        let relationTypePromise; \r\n\r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n       \r\n            this.ruleKey = this.relationRuleIndex === 0 ? \"from\" : \"to\";\r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey );\r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        return new Promise(resolve => {relationTypePromise.then(function(results) {\r\n            this.valuationArr = null; \r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        }.bind(this));});\r\n    }\r\n\r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let relEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(relEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: el.uri.value, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n      let ontoModel = this.ontoController.getOntoModel();\r\n      //const lastEl = this.ontoController.getOntoElement(this.ontoController.getLastElementUri());\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n\r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey, direction: \"to\"};\r\n        });\r\n        const labelFromE = this.getElementByUri(fromE) === false ? this.delUri(fromE) : this.getElementByUri(fromE).label.value;\r\n        const labelToE = this.getElementByUri(toE) === false ? this.delUri(toE) : this.getElementByUri(toE).label.value ;\r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n        \r\n        //type save relation - type -> podradnost -> ulozeni \r\n        // this.relationType = definice type \r\n        // \r\n    \r\n\r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        \r\n\r\n\r\n\r\n        //dostanu příchozí elementy \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n          \r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);\r\n        }\r\n        else\r\n        {\r\n            //pouze upravím dosavadní element  modify\r\n            return true; \r\n        }\r\n\r\n\r\n        \r\n        if ((relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1) && !relationFlow.includes(\"save\"))\r\n        {\r\n            if (\"fromT\" in rule && \"toT\" in rule)\r\n            {\r\n                \r\n                this.elSettings.selectedType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.selectedType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, \"uriDomyslet\", \"nazev\", \"\", \"\");\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            //ulož do model\r\n            this.ontoController.addRelation(relOntoType, fromE, toE, \"uriDomyslet\", \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map(function (ruleClass) {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           }.bind(this));\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};\r\n\r\n           // pokud pouze jeden offer aplikuj a zavolej \r\n           if (rule.offer.length > 1)\r\n           {\r\n               // kod vyse ě\r\n           }\r\n           else\r\n           {\r\n               return  this.relationCardility (); \r\n           }\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) {\r\n              \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (condition[index + 1] === ontoType || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    relationWasSelected (selectedType) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        //selected type do object property\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        //this.ontoController.addToOntoModel(this.relation.uri.value, this.relation.label.value, selectedType, this.relation.type.value,\r\n        //    this.relation.uri.value, undefined, this.relation.from.value, this.relation.to.value);\r\n\r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, this.relation.label.value);\r\n\r\n      \r\n        \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    handleRelatedElements  (elements, origin, ruleKey, rule) \r\n    {\r\n       \r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1; \r\n\r\n       \r\n        if (origin === \"relationWasSelected\")\r\n        {\r\n            this.selectedEl = this.getNextElement();\r\n            \r\n            //rychlá záplata -> předělat -> už zvolen koko\r\n            const el = this.getElementByUri(this.selectedEl.uri.value)\r\n            console.log(this.queryTree);\r\n            let additionalRule = [];\r\n            \r\n            if (el.father.length > 0)\r\n            {\r\n                let fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                if (fatherType !== false)\r\n                {\r\n                   console.log(el);\r\n                   additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(rule,ruleKey),fatherType);\r\n                }\r\n            }\r\n\r\n            if (additionalRule.length === 0)\r\n            {\r\n\r\n                this.elementUri = this.selectedEl.uri.value;\r\n                return (this.ruleController.ruleSelection(rule,ruleKey,el,undefined,undefined,this.queryTree));\r\n            }\r\n            else\r\n            {\r\n             this.elementUri = this.selectedEl.uri.value;\r\n              return (this.ruleController.ruleSelection(undefined,ruleKey,el,undefined,additionalRule,this.queryTree));\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let rule = this.rulesJson[this.relationType];\r\n            //Zkontroluj zda element useless a jaký typ!!! \r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n            //počítá se dle délky pole +1!!\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n        \r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, undefined,undefined,this.queryTree));\r\n        }\r\n\r\n    }\r\n\r\n    checkElementsInRelationTree (tree, ontoModel) \r\n    {\r\n        // možná by nebylo od věci zkontrolovat úplnost zvolených typů!!!\r\n        let elementsWithoutType = [];\r\n        let withoutType = true; \r\n        for (let element of tree)\r\n        {\r\n            withoutType = true;\r\n            for (let node of ontoModel)\r\n            {\r\n                if(element.uri.value === node.uri)\r\n                {\r\n                    withoutType = false;\r\n                }\r\n            }\r\n\r\n            if (withoutType === true && !this.isElementUseless(element) && ! this.isElementInstace(element))\r\n            {\r\n                elementsWithoutType.push(element); \r\n            }\r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n        for (let el of relation[key])\r\n        {\r\n            promiseArr.push(this.rdfController.getRelationBTypes(el));\r\n        }\r\n   \r\n        return Promise.all(promiseArr).then(result => {\r\n          \r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][i]));\r\n                    //doplnění prop u elementu\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n                  \r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n\r\n                 //doplnění prop elementu\r\n                \r\n\r\n\r\n\r\n            }\r\n\r\n            console.log(result);\r\n            return result; \r\n        })\r\n\r\n\r\n        return this.rdfController.getRelationBTypes(relation[key].value);    \r\n    }\r\n\r\n\r\n\r\n    l (m2)\r\n    {\r\n        console.log(\"CECKKKKKKKKKKKKKKKKKKKKK\");\r\n        console.log(m2);\r\n    } \r\n\r\n    \r\n    getNextElement () \r\n    {\r\n        \r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n     \r\n        //ověření zda už nebyl element určen\r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n            if (ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                this.relationIndex --;\r\n                index = 0;  \r\n            }\r\n            \r\n        }  \r\n        returnEl = this.relationTree[this.relationIndex];\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n      \r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        if (this.elementConsitencyTree.length === 0)\r\n        {\r\n            for (let node of ontoModel)\r\n            {\r\n                if (node.fromRelation === relation && node.direction === ruleKey)\r\n                {\r\n                    this.elementConsitencyTree.push(node); \r\n                }\r\n            }\r\n\r\n            if (this.elementConsitencyTree.length === 0)\r\n            {\r\n               return this.elementConsitencyTree; \r\n            }\r\n        }\r\n        \r\n        let relOntoType = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        let elementTypes = this.ruleController.elementConsistencyRules(this.elementConsitencyTree[this.elementConsistencyIndex],this.ontoController);\r\n        //nejsem si jist druhou podmínkou ale \r\n        while (this.elementConsitencyTree.length < this.elementConsistencyIndex && elementTypes.length === 0)\r\n        {\r\n            this.elementConsistencyIndex ++; \r\n            elementTypes = this.ruleController.elementConsistencyRules(this.elementConsitencyTree[this.elementConsistencyIndex], this.ontoController);\r\n        }\r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    // element ve formátu queryTree!!\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n               \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n        \r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js'; \nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n\n\n\n\n\n//import RdfController from './controllers/RdfController.js';\n//import { thisTypeAnnotation } from \"@babel/types\";\n\n//přiřadit key k talčítkům -> zamyslet se nad využitím \nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      svg: \"\"  \n    };\n    \n\n    this.eventController = new EventController();\n    mermaid.initialize({\n      startOnLoad: false,\n       themeCSS: '#extensionEnd { fill: white; }',\n        });\n  }\n\n  createGraph = (svg) =>\n  {\n\n    this.setState({svg: svg});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"form-group col-md-6\" id=\"graph\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Puro model</label>\n            <div className=\"form-control  transformWindow embed-responsive\" id=\"exampleFormControlTextarea1\">\n                <img src={require('./model.PNG')} className = \"img-fluid\"  alt=\"puro-model\"/>\n            </div>\n          </div>\n\n          <div className=\"form-group col-md-6\" id=\"graph\">\n            \n            <TransformWrapper\n            enablePadding = {false}>\n             {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n          <React.Fragment>\n            <div className=\"tools\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Onto model</label>\n              <button  className = \"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n            </div>\n            <TransformComponent>\n            <div dangerouslySetInnerHTML={{__html: this.state.svg}} className=\"form-control transformWindow\" id=\"exampleFormControlTextarea1\"> \n            </div>\n            </TransformComponent>\n          </React.Fragment>\n        )}\n      \n   \n         \n      </TransformWrapper>\n          </div>\n\n\n            <QuestionPart graphCreation = {this.createGraph} />\n           \n        </div>\n       \n      </div>\n\n\n\n    );\n  }\n\n}\n\n\n\nclass PuroModel extends React.Component {\n\n  // $(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\n  loaded = () =>\n  {\n    \n    $(\"#iframePuro\").empty();\n  }\n  render() {\n    return  <iframe onLoad = {this.loaded}  id = \"iframePuro\" className=\"embed-responsive-item\" src = \"http://protegeserver.cz/purom4/?model=ca151b74998bee07d442652cc100f821\"></iframe>;\n  }\n\n\n}\n\nclass Mermaid extends React.Component {\n \n  render() {\n    return <div className dangerouslySetInnerHTML={{__html: this.props.chart}}></div>;\n  }\n}\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n    startTransform: true, originalName: \"\", nameWasChange: false,  \n    buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\"};\n    \n    this.eventController = new EventController();\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined)\n    {\n      event.preventDefault(); \n    }\n    \n    window.addEventListener('unhandledrejection', function(event) {\n       alert(\"Rule is not defined!\\nOnly the first answer is correct! \\nRules are not complete yet!\\nPage will be reloaded!\");\n       window.location.reload(); \n     });\n     \n      this.eventController.getDefault().then(results => {\n      this.setState({undoActive: false, svgUrl: \"\",buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false});\n    });\n    \n  }\n  \n  undoClick = () =>\n  {\n\n\n\n  }\n\n \n  \n\n  handleClick = (selectedType, selectedUri, type) => {\n     let elName = this.state.elName;\n     let undo = false;\n     let setState = true;\n     let nameWasChange = this.state.nameWasChange;\n\n     if (elName === \"\" && this.state.changeName === true && type !== \"Undo\")\n     {\n       alert(\"Plese write name of the element!\");\n     }\n     else if (elName !== \"\" && elName.match(/^[A-z]*[<>,.*|]+[A-z]*$/))\n     {\n       alert(\"Please change the name. It contains forbidden characters!\");\n     }\n     else\n     {\n\n     \n\n\n        if (type === \"Undo\")\n        {\n         \n          const history = this.eventController.undo(); \n          if (history === false)\n          {\n            this.handleSubmit();\n            setState = false;\n          }\n          else\n          {\n            const inputVariables = history.inputVariables;\n            selectedType = inputVariables[0];\n            selectedUri = inputVariables[1];\n            type =  inputVariables[2];\n            elName = inputVariables[3];  \n            nameWasChange = inputVariables[4];\n  \n            undo = true;\n          }\n\n        }\n        elName = elName.replace(/\\s/g, '_');\n        \n        if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName))\n        {\n          alert(\"Element already exists! Please choose different name.\")\n        }\n        else if (setState === true)\n        {\n          \n          this.eventController.nextElement(selectedType,selectedUri,type, elName, nameWasChange).then(results => {\n            \n            if (undo === false)\n            {\n              let properties = (Object.getOwnPropertyNames(this.eventController));\n              let historyRecord = {}; \n              for (let prop of properties)\n              {\n                 if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\")\n                 {\n                    if (typeof prop !== 'function')\n                    {\n                      historyRecord[prop] = this.assignProp(this.eventController[prop])\n                    }    \n                 }\n              }\n\n              this.eventController.saveHistory(historyRecord, [selectedType,selectedUri,type, elName, this.state.nameWasChange]);\n            }\n\n            let svg = this.eventController.getGraphSvg(); \n            this.setState({buttons: results.buttons,type: results.type, title: results.title,undoActive: true,elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange:false});      \n            \n            if (svg !== false)\n            {\n              this.createGraph(svg);\n            }\n\n            if(this.state.type.includes(\"end\"))\n            {\n              this.handleDownloadImage();\n            }\n            \n          });\n        }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object')\n    {\n     //how to \n     return JSON.parse(JSON.stringify(prop));\n    }\n    else\n    {\n      return prop; \n    }\n\n  }\n\n  createGraph = (chart) => {\n\n      const cb = svg => {  \n        this.setState({svg:svg});\n        this.props.graphCreation(svg);\n      \n      };\n      mermaid.render('id1',chart,cb);\n      \n    \n  }\n\n  handleChangeName = () => {\n    this.setState({changeName: !this.state.changeName});\n    if (this.state.changeName === true)\n    {\n      this.setState({elName: \"\", nameWasChange: false});\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function(){\n        $(\".changeAlert\").alert('fade');\n       });\n    }\n    else\n    {\n      this.setState({elName: \"\", nameWasChange : true});\n\n    }\n  }\n\n  handleDownloadImage = () => \n  { \n    const svgBlob = new Blob([this.state.svg], {type:\"image/svg+xml;charset=utf-8\"});\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({svgUrl: svgUrl});\n  \n  }\n\n  render() {\n    return(\n      <div className = \"container-fluid text-center questionPart\">\n         <button type=\"Submint\" className= {this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {this.handleSubmit}>\n              Start transformation\n          </button>\n        <div className = {this.state.startTransform ? \"d-none\" : \"\"}>\n        <h3>{this.state.title}</h3>\n        <div className = \"optionButtons d-none d-md-block\">\n        <div className = \"btn-group-vertical text-right\"> \n          <button  type = \"button\" className =  \"btn btn-primary btnModal\"   onClick = {this.handleChangeName} disabled = {this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\")}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n          <button type = \"button\" className=\"btn btn-primary btnModal\" onClick = {() => this.handleClick(undefined,undefined,\"Undo\")} disabled = {!this.state.undoActive}>Undo</button>\n          <button type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); } }>Cancel</button>\n        </div>\n        </div>\n        <div className =  {this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n                <div className = \"input-group inputName\">\n                      <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n                      </div>\n                      <input placeholder = {this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.orginalName}    type=\"text\" className=\"form-control\" onChange = {this.handleChange}  value = {this.state.elName}></input>\n                  </div> \n              <h5 className = {this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>  \n        </div>\n        <div className = \"divButtons text-center\">\n            <ModalButtons  buttons={this.state.buttons} svgUrl = {this.state.svgUrl} onClick = {this.handleClick} type = {this.state.type} elNames = {this.state.changeName} originalName = {this.state.originalName}/>\n        </div>\n        <div class=\"alert alert-success col-md-6 mx-auto changeAlert\"  role=\"alert\">\n         Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass ModalButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\"))\n    {\n      return (\n        <div className=\"row col-md-5 mx-auto\">\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>  \n          <select ref = \"relFrom\" className = \"col-md-6 mx-auto form-control cardinalitySelect\">\n              {this.props.buttons.filter((val) => {\n                  return val.direction === \"from\";\n              }).map((rel) => { \n               return <option value = {rel.name}>{rel.name}</option>\n              })}\n          </select>\n            \n          <select ref = \"relTo\" className = \"col-md-6 mx-auto form-control cardinalitySelect\"> \n              {this.props.buttons.filter((val) => {\n                  return val.direction === \"to\";\n              }).map((rel) => { \n               return <option value = {rel.name}>{rel.name}</option>\n              })}\n          </select> \n        \n          <button className = \"btn btn-success mx-auto questionPart\" onClick = {() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button> \n        </div> \n      )\n    }\n    else if (this.props.type.includes(\"end\"))\n    {\n      return (\n        <div className = \"col-md-5 mx-auto\">\n         <a className = \"btn btn-success\" href = {this.props.svgUrl} download = \"ontoUml-graph.svg\">Download Onto-UML graph</a>\n        </div>\n      ); \n    }\n    else\n    {\n      return (\n      <div className=\"row col-md-6 mx-auto\">\n      {this.props.buttons.map((value) => {\n        return  <div className = \"col-md-4 mx-auto\">\n                      <button key = {this.props.uri} type=\"button\"  className=\"btn btn-success btnModal\" onClick = {() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || ( this.props.originalName === \"\" && this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n                </div>\n      })}\n     </div>\n    )\n    }\n\n  }\n}\n\nclass Page extends React.Component {\n\n  render() {\n    return [\n      <Layout />\n    ]\n\n  }\n}\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}