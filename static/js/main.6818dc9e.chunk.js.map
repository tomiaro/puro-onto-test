{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","controllers/MainController.js","controllers/RdfController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/OntoSchemaController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","MainController","jsonData","ontologyURL","ontoUri","$","ajax","type","url","async","cache","dataType","success","json","this","rulesJson","JSON","parse","stringify","windowUrl","URL","window","location","href","modelId","searchParams","get","element","text","console","log","buttons","title","elName","origName","mapButtons","Array","isArray","buttonType","name","Promise","originalName","labelEL","key","questions","q","replace","label","question","unfinishedType","rule","qType","elLabel","preposition","isSameCaseInsensitive","tree","index","node","delUri","value","uri","result","split","push","object","find","other","localeCompare","undefined","sensitivity","direction","RdfController","puro","rdf","require","modelURL","xml","puroXML","error","jqXHR","textStatus","errorThrown","alert","includes","document","referrer","relator","fromUri","query","sparqlQuery","deleteDuplicity","fatherElement","returnArr","endCall","elementsUri","length","i","findBTypeRelation","bind","debug","findBTypeChild","forEach","father","fatherType","fatherTypeRelation","recursiveFindChild","lastResult","deleteDuplicityInFinal","uniquePropertie","elements","prop","filter","item","pos","indexOf","j","property","concat","splice","bTypeTree","lastCall","final","sparql","callback","turtle","XMLSerializer","serializeToString","store","graph","serialize","err","str","create","load","results","execute","relationUri","elementUri","properties","duplicity","checkArr","res","k","some","OntoModelController","addToOntoModel","ontoType","puroType","relationName","nameWasChange","branchIndex","origUri","elPuroType","elUri","getOntoElement","ontoModel","fromRelation","from","to","updateOntoModel","addRelation","fromType","toType","slice","el","getOntoModel","getElementsRelation","nextRel","getElementOntoType","getElementsByOntoType","origin","changeOrigin","getLastElementUri","getLastElement","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","lastEl","isElInstance","ruleKey","branchesCount","passEl","ontoEl","elementFather","foundFather","lastRelElement","getElementInRelRow","lastElUri","isRelationExist","getOntoBranch","relation","superType","toLowerCase","isRelationComplete","relatedElement","relElements","getElementInRelation","rels","types","rel","getCardinalElement","relationType","all","getOpositeDirection","el1","el2","selectedEl","firstEl","createButtons","ontoModelHistory","ImagController","graphCommand","findLabel","relationSpec","getRelationSpec","base","toKey","trim","relations","normRelType","showType","RuleController","rules","previousElName","isElementInstance","relationLabel","countBtypes","offerTypes","needElName","getSpecificRule","offer","additionalQuestion","connect","getQuestion","ontoController","minCount","maxCount","check","elInRelation","childrenCount","elTypes","getRelatedTypes","subType","elementConsistencySelection","moreThanOneRule","allTypes","suffix","additionalRules","r","addRule","elementConsAddSelection","mincCountount","bTypeNumber","indexCount","isNaN","moreThanOne","addRules","toString","findSimpleRule","last","selectedType","fathers","start","fatheFound","addNone","fatherOnto","childPuroType","childType","child","condition","validity","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","OntoScheController","ontoUmlSchema","schemaInit","relCount","ontoClassTransformation","opositeIndex","fromIndex","toIndex","relationTransformation","nodeCopy","nodeCopy2","schemas","compile","getSchema","ONTOUML_2","validator","ontoClass","parseInt","EventController","rdfController","imageController","ImageController","ruleController","historyController","ontoSchemaController","OntoSchmeController","getFullPath","then","queryTree","getRelations","elSettings","relationOrderIndex","relationIndex","setIndexexToDefault","firstCall","relationTree","commonRuleSelection","valuation","charAt","toUpperCase","bRelationRules","changeElementsProperty","relationWasSelected","getElementByProperty","consistencyCheck","additionalRule","relFlow","lastElInBranch","cPhaseHandle","updateCardinality","updateRelationTypes","relationEl","ontoRelation","relationRuleIndex","consistencyExeption","getAdditionalRule","countBTypesInTree","getElementByUri","isElementInstace","relType","updateRelTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","ontoRel","updateRel","nextTreeBranch","purType","getNextElement","ruleSelection","getDefault","next","elementsWithoutType","checkElementsInRelationTree","withoutTypeIndex","relationEls","labels","commonRule","getUsableFather","reload","unfinishedTypes","checkElementsConsistency","exeption","createQuestion","getAllTreeValuations","cardinalitySet","createRelCardinalityBtn","ontoRelFromN","ontoRelToN","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","treeEl","connectElement","lastTypes","createGraph","fromE","toE","relationFlow","fromB","fromT","ruleClass","toB","toT","labelFromE","selectElementsLabel","labelToE","relOntoType","fromEType","toEType","findRule","isCardinalityNeed","relationTreePromise","lastLabel","nextElement","bObjectChild","prevEl","rdfEl","getElementsFromBranch","addIndex","prevAdd","updateRelType","dupArray","lastChild","connectFrom","elWithoutType","currEl","childEl","isInAnohterRelation","deleteDuplicityInRelTree","fatherWithouType","getElementsWithoutType","elementConsitencyTree","elementConsistencyIndex","promiseArr","getRelationBTypes","unshift","returnEl","isElementUseless","isRelationShareType","ontoElement","addToProperty","areChildrenInBranchUseless","lastRel","lastDirection","lastElement","allBranchBtypes","currentRelation","getConnectRelation","childRel","consistencyIndex","consistencyTree","elementTypes","elementConsistencyRules","checkDuplicity","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","transform","fatherOfFather","Layout","props","svg","setState","eventController","state","iframeURL","getIframeURL","fullSize","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","width","height","display","position","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","fullSizeSvg","addClass","removeClass","handleChangeName","fadeTo","slideUp","svgBlob","Blob","createObjectURL","handleDownloadSchema","ontoSchema","getOntoSchema","fileDownload","data-toggle","data-target","disabled","data-dismiss","confirm","placeholder","onChange","lenght","onClickDownloadSchema","elNames","role","TypeButtons","refs","createRef","Math","random","ref","val","relFrom","relTo","download","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.6818dc9e.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 304,\n\t\"./locale.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 659;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 795;","var map = {\n\t\"./N3Lexer\": 197,\n\t\"./N3Lexer.js\": 197,\n\t\"./N3Parser\": 198,\n\t\"./N3Parser.js\": 198,\n\t\"./N3Store\": 359,\n\t\"./N3Store.js\": 359,\n\t\"./N3StreamParser\": 360,\n\t\"./N3StreamParser.js\": 360,\n\t\"./N3StreamWriter\": 361,\n\t\"./N3StreamWriter.js\": 361,\n\t\"./N3Util\": 199,\n\t\"./N3Util.js\": 199,\n\t\"./N3Writer\": 200,\n\t\"./N3Writer.js\": 200\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 823;","import $ from 'jquery';\r\nexport default class MainController{\r\n    \r\n    ontologyURL  = \"http://lod2-dev.vse.cz/ontology/puro#\"; \r\n    ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\"\r\n\r\n    constructor()\r\n    {\r\n        \r\n        let jsonData;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"rules.json\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function(json) {\r\n                jsonData = json;\r\n            }\r\n        });\r\n        \r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData)); \r\n        const windowUrl = new URL(window.location.href);\r\n        this.modelId = windowUrl.searchParams.get(\"model\");\r\n    }\r\n\r\n    debug (element, text)\r\n    {\r\n        console.log([JSON.parse(JSON.stringify(element)), text])\r\n    }\r\n\r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    getQuestion(labelEL, key)\r\n    {\r\n        \r\n        for (let q of this.rulesJson.questions)\r\n        {\r\n            if (q.type === key)\r\n            {\r\n                \r\n                const replace = typeof labelEL === \"string\" ? labelEL : labelEL.label; \r\n                return q.question.replace(\"VAL\", replace); \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            console.log(unfinishedType)\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", unfinishedType.elLabel).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            const preposition = this.isSameCaseInsensitive(unfinishedType.key, \"connect\") ? \" to \" : \" of \";\r\n            return \"What is \" + unfinishedType.key + preposition + unfinishedType.elLabel +\"?\";\r\n        }\r\n\r\n    }\r\n\r\n    countBTypesInTree(tree)\r\n    {\r\n        let index = 0; \r\n        for (let node of tree)\r\n        {\r\n            if (this.delUri(node.type.value) === \"BType\")\r\n            {\r\n                index ++; \r\n            }\r\n        }\r\n       \r\n        return index; \r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n     getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n      }\r\n\r\n    isSameCaseInsensitive(text, other) {\r\n        return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;\r\n    }\r\n\r\n    getOpositeDirection (direction)\r\n    {\r\n        return  direction = direction === \"from\" ? \"to\" : \"from\"; \r\n    }\r\n}","import $ from 'jquery';\r\nimport MainController from './MainController';\r\n\r\n\r\nexport default class RdfController extends MainController {\r\n    \r\n    constructor() {\r\n        super(); \r\n        this.rdf = require('rdflib');\r\n        let puro ;\r\n        \r\n        const modelURL = this.rulesJson[\"modelURL\"].replace(\"MODELID\", this.modelId)\r\n        // puroOutput.xml\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url:   modelURL,\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n          \r\n                this.puroXML = xml;\r\n                console.log(this.puroXML)\r\n                puro = xml; \r\n            },\r\n            error: function (jqXHR, textStatus, errorThrown) {\r\n             alert(errorThrown.includes(\"Failed to execute\"))\r\n             if (errorThrown.includes(\"Failed to execute\"))\r\n             {\r\n                alert(\"You are redirected from unsecured site! \\n Please add this site to exceptions in broswer to let it work. \\n Settings -> privacy and securtity -> web settings -> insecure content -> add [*.]tomiaro.github.io\"); \r\n             }\r\n             else\r\n             {\r\n                alert(\"There is the problem to load serialized PURO model! \\n\" + errorThrown );\r\n             }\r\n             window.location.replace(document.referrer); \r\n            }\r\n        });\r\n        \r\n        this.puroXML = puro; \r\n     \r\n    }\r\n\r\n    // get elements connect to relator\r\n    getRelatorBtype  (relator, fromUri) \r\n    {\r\n            const query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n    }\r\n\r\n    // get elements related to B-Relation\r\n    findBTypeRelation (fatherElement, returnArr,endCall)  \r\n    {       \r\n\r\n            const elementsUri = fatherElement.uri.value;\r\n            const query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label .         \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                console.log(JSON.parse(JSON.stringify(result)));\r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n        // get children of the element\r\n        findBTypeChild  (fatherElement, returnArr,endCall) \r\n        {\r\n                const elementsUri = fatherElement.uri.value;\r\n                \r\n                const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelation}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, result => {  \r\n                    this.debug(result);\r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                \r\n                    if (result.length > 0)\r\n                    {\r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        }\r\n                    }\r\n                    else\r\n                    { \r\n                      \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                });          \r\n             }\r\n\r\n             //get all entities from PURO model\r\n             getFullPath ()  \r\n             {\r\n                 const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri} ?child a ?childType . ?child ?childRel ?uri . } \r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                     FILTER NOT EXISTS {?uri puro:instanceOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  this.sparqlQuery(query, result => {\r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                  \r\n                      this.deleteDuplicity(result,[\"valuation\", \"connect\", \"childType\", \"child\", \"childRel\"]);\r\n                      this.recursiveFindChild(0,result,[], lastResult => {\r\n                             lastResult = this.deleteDuplicityInFinal(lastResult);\r\n                             lastResult = this.uniquePropertie(lastResult);\r\n                             resolve(lastResult);\r\n                     });\r\n                 });\r\n             });\r\n             }\r\n\r\n             // delete doubled properties \r\n             uniquePropertie (elements)\r\n             {\r\n                for (let element of elements)\r\n                {\r\n                    for (let prop in element)\r\n                    {\r\n                        if (Array.isArray(element[prop]))\r\n                        {\r\n                            element[prop] = element[prop].filter(function(item, pos) {\r\n                                return element[prop].indexOf(item) === pos;\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             deleteDuplicityInFinal (elements)\r\n             {\r\n                for (let i = 0; i < elements.length; i++) {\r\n                    for (let j = 0; j < elements.length; j++) {\r\n                        if (elements[i].uri.value === elements[j].uri.value && i !== j)\r\n                        {\r\n                            for (let property in elements[i])\r\n                            {\r\n                                if (Array.isArray(elements[i][property]))\r\n                                {\r\n                                   elements[j][property] = elements[j][property].filter(e => e !== elements[i][property]); \r\n                                   elements[i][property] = elements[i][property].concat(elements[j][property]); \r\n                                }\r\n                            }\r\n\r\n                            elements.splice(j, 1);\r\n                        }            \r\n                    }   \r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             recursiveFindChild (i, result, bTypeTree,lastCall, type)\r\n             {      \r\n                 if(i >= result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        });\r\n                     }\r\n                     else\r\n                     {\r\n                        this.findBTypeChild(result[i],bTypeTree,  final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        });\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             // prepare sparql query\r\n             sparqlQuery (sparql, callback)  {\r\n                const puroXML = new XMLSerializer().serializeToString(this.puroXML);\r\n               \r\n                const store = this.rdf.graph();\r\n                const contentType = 'application/rdf+xml';\r\n                const baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                const rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n            // get elements connected to B-Relation\r\n            getRelationBTypes (relationUri) \r\n            {\r\n                let query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    this.sparqlQuery(query, (result) => {\r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            // get all B-Relations\r\n            getRelations  () \r\n            {\r\n                const query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation} \r\n                  FILTER NOT EXISTS{?to a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?from a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?to a puro:BValuation}\r\n                  FILTER NOT EXISTS{?from a puro:BValuation}\r\n                  ?to a ?toType . \r\n                  ?from a ?fromType .\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            // get linked element\r\n            findRelation  (elementUri) {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            // initalization\r\n            async firstFind  ()  {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //delete duplicity in results\r\n            deleteDuplicity  (result, properties) {\r\n                let duplicity;\r\n                let checkArr = []; \r\n                 \r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class OntoModelController extends MainController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    \r\n      \r\n    // Create element in OntoModel \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction, elName, nameWasChange, ontoUri, branchIndex, origUri) => \r\n    {\r\n    \r\n        if (this.getOntoElement(this.ontoUri + elName) === false)\r\n        {\r\n            let elPuroType;\r\n            let elLabel;\r\n            let elUri; \r\n            nameWasChange = nameWasChange === undefined ? false : nameWasChange;\r\n            origUri = origUri === undefined ? \"\" : origUri;\r\n            if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n            {\r\n\r\n                elPuroType = false;\r\n                elLabel = elName;\r\n                elUri = this.ontoUri + elName; \r\n\r\n            }\r\n            else\r\n            {\r\n                elPuroType = puroType;\r\n                elLabel = nameWasChange ? elName : label; \r\n                elUri = uri; \r\n            }\r\n\r\n            if (this.getOntoElement(elUri) === false)\r\n            {\r\n                this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: [relationName], direction: [direction], from: [undefined], to:[undefined],type:\"Class\", branchIndex: [branchIndex], origUri:origUri});\r\n            }    \r\n        }\r\n        else\r\n        { \r\n            if (nameWasChange) this.updateOntoModel(uri, \"label\",elName);\r\n            this.updateOntoModel(uri, \"fromRelation\",relationName);\r\n            this.updateOntoModel(uri, \"direction\",direction);\r\n            this.updateOntoModel(uri, \"branchIndex\",branchIndex);\r\n        }\r\n        console.log(this.ontoModel)\r\n        return this.ontoModel; \r\n    }\r\n\r\n    // Checks if relation has defined connected elements\r\n    isRelationComplete (relation)\r\n    {\r\n        if (relation.type === \"relation\" && relation.from.length > 0 && relation.to.length > 0)\r\n        {\r\n            return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    // gets the most genereral entity to input entity \r\n    getCardinalElement (element, superType)\r\n    {\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.from[0] === element && superType === false)\r\n            {\r\n                return node.to[0]; \r\n            }\r\n            else if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.to[0] === element && superType === true)\r\n            {\r\n                return node.from[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n    getElementByProperty (property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[property] === value)\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    // get another element which is connect to input element \r\n    getReletadELement (element, relationName)\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && (node.from.includes(element.uri) || node.to.includes(element.uri)) && this.isRelationComplete(node))\r\n            {\r\n                let relatedElement; \r\n                if (node.from.includes(element.uri)) \r\n                {\r\n                    relatedElement = node.to[0];\r\n                }\r\n                else\r\n                {\r\n                    relatedElement = node.from[0];\r\n                } \r\n                relatedElement = this.getOntoElement(relatedElement);\r\n                if (relatedElement.fromRelation.includes(relationName))\r\n                {\r\n                    return relatedElement; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    // add relationship into the model\r\n    addRelation = (type, from, to, uri,label, fromType, toType) => \r\n    {\r\n        uri = uri === undefined ? this.ontoUri.slice(0,-1) + \"/relation/\"+type+\"/\"+this.delUri(from)+this.delUri(to) : uri; \r\n        fromType = fromType === undefined ? [] : [fromType];\r\n        toType = toType === undefined ? [] : [toType]; \r\n        from = from === undefined || \"\" || from.length === 0 ? [] : [from];\r\n        to = to === undefined || \"\" || to.length === 0 ? [] : [to];\r\n        \r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && el.from.includes(from) && el.to.includes(to))\r\n            {\r\n                return this.ontoModel;\r\n            }\r\n        }\r\n\r\n\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from: from, to: to,uri:uri, label:label, fromType: fromType, toType: toType, fromRelation: []});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    // update element in the model\r\n    updateOntoModel = (elementsUri, property, value, duplicity = true) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    if (duplicity === true || !node[property].includes(value))\r\n                    {\r\n                        node[property].push(value);\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if (duplicity === true || node[property] !== value)\r\n                    {\r\n                        node[property] = value;\r\n                    } \r\n                }\r\n                return this.ontoModel;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // add property value to element\r\n    addToProperty (uri, property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                 \r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    node[property].push(value); \r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    //get relation which is element connect to\r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n        \r\n       \r\n        let returnArr = []; \r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            let nextRel = false;\r\n            if (Array.isArray(node[direction]))\r\n            {\r\n                nextRel = node[direction].includes(uri) ? true : false; \r\n            }\r\n\r\n        \r\n            if (node[\"type\"] === \"relation\" && nextRel === true)\r\n            {\r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" &&  (node[\"from\"].includes(uri) || node[\"to\"].includes(uri)))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n\r\n    getElementsByOntoType = (type, origin) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType && (origin === undefined || node.fromRelation.includes(origin)))\r\n            {  \r\n                result.push(node.uri);\r\n            }\r\n       }\r\n       return result; \r\n\r\n    }\r\n\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n\r\n    getRelation(from, to)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.from.includes(from) && node.from.includes(to))\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // get last element in the branch\r\n    getLastElementUri = (origin, direction, branchIndex) => \r\n    {\r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n            for (let j = 0; j < this.ontoModel[i].fromRelation.length; j++) {\r\n               \r\n                if ((this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].branchIndex.includes(branchIndex) && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\"))\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\" && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && direction === undefined && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri; \r\n                }\r\n                else if(origin === undefined && direction === undefined  && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    // get last element in relation row\r\n    getElementInRelRow (lastElUri)\r\n    {\r\n        \r\n        const relElements = this.getElementInRelation(lastElUri,\"*\",\"from\",false); \r\n        if (relElements.length === 0)\r\n        {\r\n            return lastElUri;\r\n        }\r\n        \r\n        const fatherChildren = this.getElementInRelation(relElements[0].element.uri,\"*\",\"to\",this.getOntoElement(lastElUri).ontoType); \r\n\r\n        return fatherChildren[0].element.uri; \r\n\r\n    }\r\n\r\n\r\n    getLastElement = (origin, direction) =>\r\n    {\r\n        const uri = this.getLastElementUri(origin, direction);\r\n        return this.getOntoElement(uri); \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // selects the relation elements for event controller processing\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, lastEl, puroType, isElInstance, ruleKey, nameWasChange, branchesCount) => \r\n    {\r\n  \r\n        const ontoEl = this.getOntoElement(selectedUri);\r\n   \r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false && isElInstance === false && (element !== false || ontoEl !== false))\r\n        {    \r\n           \r\n            let father;\r\n            let passEl; \r\n            if (puroType === \"superType\")\r\n            {\r\n                father = this.ontoUri + elName;\r\n                passEl = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = this.ontoUri + elName;    \r\n                father = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else\r\n            {\r\n\r\n                if (element !== false)\r\n                {\r\n                   \r\n                    father = element.father[0] === undefined ? element.uri.value : element.father[0];\r\n                   \r\n                }\r\n                else\r\n                {\r\n                    father = ontoEl.uri;\r\n                }\r\n                passEl = this.ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if (relationUri === null)\r\n        {\r\n            if (element.father.length > 0)\r\n            {\r\n\r\n                return [element.father[0], element.uri.value];\r\n            }\r\n            else return false; \r\n            \r\n        }\r\n        else if (puroType.includes(\"elementSelection\") || (element !== false && this.getOntoElement(element.father[0]) !== false))\r\n        {   \r\n            let elementFather = \"foundFather\" in element ? element.foundFather : this.getOntoElement(element.father[0]);\r\n            if ((puroType.includes(\"invert\") || !puroType.includes(\"elementSelection\")) && !puroType.includes(\"classSelection\"))\r\n            {\r\n \r\n                return [element.uri.value, elementFather.uri];\r\n            }\r\n            else\r\n            {\r\n                return [elementFather.uri,element.uri.value];\r\n            \r\n            }\r\n        }\r\n        else if((addRulesLenght === 0 && lastEl === true) || element === false || isElInstance === true)\r\n        {\r\n            let lastRelElement = this.getLastElement(relationUri);\r\n            lastRelElement = this.getOntoElement(this.getElementInRelRow(lastRelElement.uri))\r\n          \r\n            const passEl = (element === false || isElInstance === true) ? this.ontoUri + elName : selectedUri;\r\n\r\n            let lastElUri = this.getLastElementUri(relationUri,ruleKey, branchesCount);\r\n            lastElUri = this.getElementInRelRow(lastElUri); \r\n    \r\n            if (lastRelElement !== false && (lastRelElement.direction[lastRelElement.direction.length - 1] !== ruleKey || branchesCount > 1) && addRulesLenght === 0)\r\n            {\r\n             \r\n                if (lastElUri !== false && !this.isRelationExist(lastElUri,passEl) &&  this.getOntoBranch(relationUri, ruleKey).length > 1)\r\n                {\r\n                    return [lastElUri, passEl];\r\n                }\r\n              \r\n                this.updateOntoModel(relationUri,ruleKey,passEl, false);\r\n                return relationUri; \r\n            }\r\n            else if (element === false || lastRelElement !== false || isElInstance === true)\r\n            {\r\n                \r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n        \r\n    }\r\n\r\n    checkDuplicity (label) \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes (elUri, direction, ontoType) \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n        for (let rel of rels)\r\n        {\r\n          if (rel.ontoType === ontoType || (ontoType === \"Generalization\" && rel.ontoType.includes(\"memberOf\")))\r\n          {\r\n              const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType === \"Relator\")\r\n          {\r\n            types.push(rel.ontoType); \r\n          }\r\n          else if (ontoType === false)\r\n          {\r\n            const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n            elements.push(el);\r\n            types.push(this.getElementOntoType(el)); \r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    getElementsFromBranch(element)\r\n    {\r\n\r\n        let returnArr = [element];\r\n        let el = element;\r\n    \r\n        while (this.getCardinalElement(el,true) !== false)\r\n        {   \r\n            el = this.getCardinalElement(el, true);\r\n            returnArr.push(el);\r\n        }\r\n\r\n        return returnArr; \r\n    }\r\n\r\n    getElementInRelation(elementUri, relationType, direction, ontoType)\r\n    {\r\n        let returnArr = [];\r\n        const all = relationType === \"*\" ? true : false; \r\n        ontoType = ontoType === undefined || false ? false : ontoType; \r\n\r\n        for (let relation of this.ontoModel)\r\n        {\r\n     \r\n            if (relation.type === \"relation\" && (relation.ontoType === relationType || all) && relation[this.getOpositeDirection(direction)].includes(elementUri))\r\n            {   \r\n                let el = this.getOntoElement(relation[direction][0]);\r\n         \r\n                if (ontoType === false || ontoType === el.ontoType)\r\n                {\r\n                    returnArr.push({element : el, relationType: relation.ontoType}); \r\n                } \r\n            }\r\n        }\r\n        return returnArr; \r\n    }\r\n\r\n    isRelationExist(el1, el2)\r\n    {\r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && ((el.from === el1 && el.to === el2) || (el.from === el2 && el.to === el1)))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoBranch(relation, key, branchIndex)\r\n    {\r\n        let returnArr = [];\r\n        branchIndex = branchIndex === undefined ? false : branchIndex;\r\n        for (let el of this.ontoModel)\r\n        {\r\n            for (let index in el.fromRelation)\r\n            {\r\n                if (el.fromRelation[index] === relation && el.direction[index] === key && (branchIndex === false || el.branchIndex.includes(branchIndex)))\r\n                {\r\n                    returnArr.push(el);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n    \r\n    connectToBranchElement(relation, key, selectedEl)\r\n    {\r\n\r\n        const question =  \"To which element is the \" + this.delUri(selectedEl.uri.value) + \" connected?\";\r\n\r\n        const firstEl = (this.getOntoBranch(relation, key)[0]);\r\n        const lastEl = this.getLastElement(relation, key);\r\n\r\n        if (firstEl === undefined || lastEl === false)\r\n        {\r\n            return false\r\n        }\r\n        else\r\n        {\r\n            \r\n            return this.createButtons([firstEl.label, lastEl.label],question, \"nextBranchElements\", false, \"\");\r\n        }\r\n\r\n    }\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n}\r\n\r\n","import MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph  (ontoModel) \r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to[0]) !== false && this.findLabel(node.from[0]) !== false) {\r\n                if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from.length > 0 && node.to.length > 0) \r\n                    {\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key] ? '\"'+node.fromType[key][1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\";\r\n                        }\r\n                        \r\n                        for (let key in node.to)\r\n                        {\r\n                            graphCommand += node.label +\" \"+ (node.toType[key] ? '\"'+node.toType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key]  ? '\"'+node.toType[key][1]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + \" : <<Mediation>>\\n\"; \r\n                        }\r\n                      \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    const relationSpec = this.getRelationSpec(node.ontoType);\r\n                    if (node.from.length === node.to.length)\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0] + (node.toType[key] ? '\"'+node.toType[key]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            let base = this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0];\r\n                            \r\n                            for (let toKey in node.to)\r\n                            {\r\n                                graphCommand += base + (node.toType[toKey] ? '\"'+node.toType[toKey]+'\"' : \"\") + \" \" + this.findLabel(node.to[toKey]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n    \r\n    getRelationSpec (ontoType)\r\n    {\r\n        for(let rel of this.rulesJson.relations)\r\n        {\r\n            \r\n            if (ontoType in rel)\r\n            {\r\n                \r\n                const normRelType = rel[ontoType]; \r\n                const showType = \"showType\" in rel && rel[\"showType\"] === true ? true : false;  \r\n                let code; \r\n                switch(normRelType.toLowerCase())\r\n                {\r\n                    case \"arrowline\": code = \" <|-- \";  \r\n                        break; \r\n                    case \"simpleline\": code = \" -- \"; \r\n                        break; \r\n                    case \"simplearrow\": code =\" --> \"\r\n                        break; \r\n                    case \"dashedline\": code = \" .. \"; \r\n                        break; \r\n                    case \"composition\": code = \" *-- \"; \r\n                        break; \r\n                    case \"aggregation\": code = \" o-- \"; \r\n                        break; \r\n                    default:  code = \" -- \"; \r\n                }\r\n            \r\n                return [code, showType]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n     \r\n    ruleSelection (rules, key, element, previousElName, rule, isElementInstance, relationLabel, countBtypes)\r\n    {\r\n        let commands; \r\n        let offerTypes;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            console.log(rules)\r\n            commands = this.getSpecificRule(rules,key, false, countBtypes);\r\n            offerTypes = commands.offer;  \r\n        }\r\n\r\n        if (element !== false)\r\n        {\r\n            let additionalQuestion = \"\";\r\n\r\n            if (element.connect.length > 1)\r\n            { \r\n                additionalQuestion = \"\\n \" + this.getQuestion(relationLabel, \"relSpecific\");\r\n            }\r\n            \r\n            if (isElementInstance === true)\r\n            {\r\n                needElName =true;\r\n\r\n                question = this.getQuestion(element.label.value, \"instance\") + additionalQuestion;\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n\r\n                question = this.getQuestion(element.label.value, \"BType\") + additionalQuestion;\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            needElName = true;\r\n            question = this.getQuestion(previousElName, \"bTypeChild\");\r\n\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n\r\n    moreThanOneRule (ontoController, element,minCount,maxCount, check)\r\n    {\r\n        const elInRelation = ontoController.getElementInRelation(element.uri,\"*\",\"from\",false)[0]; \r\n        const childrenCount = ontoController.getElementInRelation(elInRelation.element.uri,elInRelation.relationType,\"to\", element.ontoType).length;\r\n        if (childrenCount < maxCount)\r\n        {\r\n            const types = childrenCount < minCount ? [element.ontoType] : [element.ontoType, \"None\"]\r\n            check.push({key: \"subType\", types: types, element: elInRelation.element.uri, rule:{type:[element.ontoType],question:this.getQuestion(elInRelation.element,\"moreThanOne\")}}); \r\n        }\r\n        return check; \r\n\r\n    }\r\n\r\n    elementConsistencyRules (element,  ontoController)  \r\n    {\r\n            let rules = this.rulesJson[element.ontoType];    \r\n            let check = []; \r\n\r\n\r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Generalization\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Generalization\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n            \r\n            for (let rule of rules)\r\n            {\r\n             \r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes, ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes,ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes, ontoController);\r\n                if (rule.key === \"moreThanOne\")\r\n                {\r\n                    check = this.moreThanOneRule(ontoController,element,rule.minCount,rule.maxCount,check);\r\n                }\r\n            }\r\n\r\n\r\n            if ((check.length > 0 && check[0].types.includes(\"Relator\") && check[0].types.includes(\"None\")))\r\n            {\r\n                check.splice(0, 1);  \r\n            }\r\n\r\n            for (let i = 0; i < check.length; i++) {\r\n                check[i][\"elLabel\"] =  ontoController.getOntoElement(check[i].element).label;  \r\n            }\r\n\r\n\r\n\r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection (rule,elTypes,key,element,check,rules,allTypes, ontoController) \r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                \r\n                const suffix = key[key.length - 1] === \"e\" ? \"d\" : \"ed\";\r\n                const additionalRules =  this.getSpecificRule(rules, key + suffix, true);\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n                }\r\n                else \r\n                {\r\n                    if (additionalRules !== false)\r\n                    {\r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                                if (\"moreThanOne\" in addRule && addRule[\"moreThanOne\"] === true && elTypes.length < 2)\r\n                                {\r\n                                    check = this.moreThanOneRule(ontoController,element,addRule.mincCountount,addRule.maxCount,check);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n    \r\n        if (type in rule)\r\n        {\r\n      \r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                \r\n                for (let index in check)\r\n                {\r\n                  \r\n                    if (check[index].key === type && check[index].element === element.uri)\r\n                    {\r\n                        check.splice(index, 1);\r\n                    }\r\n                }\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n\r\n        }\r\n    \r\n        return check; \r\n       \r\n    }\r\n\r\n    numberOfRuleStep (relationType, key, bTypeNumber)\r\n    {\r\n        const rule = this.getSpecificRule(this.rulesJson[relationType], key, false, bTypeNumber);\r\n        let indexCount = 0; \r\n\r\n        for (let key in rule)\r\n        {\r\n            if (!isNaN(key))\r\n            {\r\n                indexCount ++; \r\n            }\r\n        }\r\n\r\n        return indexCount; \r\n    }\r\n\r\n    getSpecificRule (rules, key, moreThanOne, bTypeNumber)\r\n    {\r\n        let addRules = [];\r\n        \r\n        bTypeNumber = bTypeNumber === undefined ? false : bTypeNumber.toString(); \r\n        moreThanOne = moreThanOne === undefined ? false : moreThanOne; \r\n\r\n        if (bTypeNumber !== false)\r\n        {\r\n            for (let node of rules)\r\n            {\r\n                if (node.key === key &&  (\"bTypeNumber\" in node) && node.bTypeNumber.includes(bTypeNumber))\r\n                {\r\n                    \r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                     \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (moreThanOne === false && addRules < 1)\r\n            {\r\n                addRules = this.findSimpleRule(rules,key,moreThanOne, true);\r\n                if (addRules.length === 1 && moreThanOne === false) return addRules[0]; \r\n            }\r\n        }\r\n        else\r\n        {\r\n          addRules = this.findSimpleRule(rules,key,moreThanOne, false);\r\n          if (addRules.length === 1 && moreThanOne === false) return addRules[0]; \r\n        }\r\n\r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n    findSimpleRule (rules, key, moreThanOne, last)\r\n    {\r\n        const returnArr = []; \r\n        \r\n        for (let node of rules)\r\n        {\r\n            \r\n            if (node.key === key && (last === false || !(\"bTypeNumber\" in node))) \r\n            {\r\n                if (moreThanOne === true)\r\n                {\r\n                    returnArr.push(node);\r\n                }\r\n                else\r\n                {   \r\n                    return [node]; \r\n                }   \r\n            }\r\n        }\r\n\r\n        return returnArr; \r\n\r\n\r\n\r\n    }\r\n\r\n    getAdditionalRule (rule, selectedType, index)\r\n    {\r\n        if (rule !== false && index.toString() in rule && selectedType in rule[index])\r\n        {\r\n            return rule[index][selectedType]; \r\n        }\r\n        \r\n        return [];\r\n    \r\n    }\r\n\r\n\r\n    commonRuleSelection (element, fathers,start, ontoModel, fatheFound, addNone) \r\n    {\r\n\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        let rules = \"commonRules\";\r\n        let types = \"fatherOnto\";\r\n \r\n        let type = \"elementSelection\"; \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        if (fatheFound)\r\n        {\r\n            types = \"childOnto\";  \r\n            rules = \"specialCasesRules\";\r\n            fatherOnto.push(element.foundFather.ontoType); \r\n        }\r\n        else\r\n        {\r\n            for (let node of ontoModel)\r\n            {\r\n                if (fathers.includes(node.uri)) {\r\n                    fatherOnto.push(node.ontoType);\r\n                }\r\n                \r\n            }\r\n        }\r\n \r\n        for (let rule of this.rulesJson[rules])\r\n        {\r\n           if (start === true && rule[types][0] === \"NoRelation\")\r\n           {\r\n             const question = \"Which type is \"+element.label.value+\"?\";\r\n             return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n           }\r\n           else if ((fatherOnto.some(r=> rule[types].includes(r)) || (rule[types].includes(\"none\"))))\r\n           {\r\n                if ((\"invert\" in rule && rule[\"invert\"] === true) || fatheFound === true)\r\n                {\r\n                    type += \"-invert\"\r\n                }\r\n                \r\n                const offerTypes = JSON.parse(JSON.stringify(rule.offer));\r\n                \r\n                if (addNone === true && !offerTypes.includes(\"None\"))\r\n                {\r\n                    offerTypes.push(\"None\");\r\n                }\r\n                \r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) \r\n            {  \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (this.isSameCaseInsensitive(condition[index + 1],ontoType) || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n}","export default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2] !== undefined && this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","import MainController from './MainController';\r\n\r\nexport default class OntoScheController extends MainController{\r\n \r\n    transform (ontoModel)\r\n    {\r\n        const ontoUmlSchema = this.schemaInit(); \r\n        let relCount = 0; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if(node.type === \"Class\" || node.ontoType.toLowerCase() === \"relator\")\r\n            {\r\n              ontoUmlSchema[\"contents\"].push(this.ontoClassTransformation(node)); \r\n            }\r\n        }\r\n\r\n        for (let node of ontoModel)\r\n        {\r\n          if (node.type === \"relation\" && node.ontoType.toLowerCase() !== \"relator\") {\r\n              let key; \r\n              \r\n              if (node.from.length >= node.to.length)\r\n              {\r\n                 key = \"from\";\r\n              }\r\n              else\r\n              {\r\n                key = \"to\"; \r\n              }\r\n              \r\n              let opositeIndex = 0;\r\n              for (let index in node[key])\r\n              {\r\n                 \r\n                 let fromIndex = key === \"from\" ? index : opositeIndex; \r\n                 let toIndex = key === \"to\" ? index : opositeIndex; \r\n                  \r\n                 ontoUmlSchema[\"contents\"].push(this.relationTransformation(node, relCount, fromIndex, toIndex));\r\n                 relCount += 2;  \r\n                 if (index <= node[key].length)\r\n                 {\r\n                    opositeIndex = index; \r\n                 }\r\n              }\r\n          }\r\n          else if (node.ontoType.toLowerCase() === \"relator\")\r\n          {\r\n            \r\n            let key; \r\n              \r\n            if (node.from.length >= node.to.length)\r\n            {\r\n              key = \"from\";\r\n            }\r\n            else\r\n            {\r\n              key = \"to\"; \r\n            }\r\n            \r\n            let opositeIndex = 0;\r\n\r\n            for (let index in node[key])\r\n            {\r\n              let nodeCopy = JSON.parse(JSON.stringify(node));\r\n              let nodeCopy2 = JSON.parse(JSON.stringify(node));  \r\n\r\n              nodeCopy[\"uri\"] += \"rel1\"\r\n              nodeCopy2[\"uri\"] += \"rel2\"\r\n        \r\n              nodeCopy[\"ontoType\"] = \"mediation\"\r\n              nodeCopy2[\"ontoType\"] = \"mediation\"\r\n              \r\n              if (key === \"from\")\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][index][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][index][1];\r\n\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy2[\"fromType\"] = node[\"toType\"][opositeIndex][0];\r\n                  nodeCopy2[\"toType\"] = node[\"toType\"][opositeIndex][1];\r\n                  nodeCopy2[\"to\"] = [nodeCopy[\"to\"][opositeIndex]];\r\n                }\r\n\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][index]];\r\n                \r\n              }\r\n              else\r\n              {\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy[\"fromType\"] = node[\"fromType\"][opositeIndex][0]; \r\n                  nodeCopy[\"toType\"] = node[\"fromType\"][opositeIndex][1];\r\n                  nodeCopy[\"from\"] = [nodeCopy[\"from\"][opositeIndex]];\r\n                }\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][index][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][index][1];\r\n                \r\n\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][index]];\r\n              }\r\n              \r\n              nodeCopy[\"to\"] = [node.uri];\r\n              nodeCopy2[\"from\"] = [node.uri];\r\n              \r\n              console.log (JSON.parse(JSON.stringify(nodeCopy)))\r\n              console.log (JSON.parse(JSON.stringify(nodeCopy2)))\r\n\r\n              if (!(key === \"to\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy, relCount, 0,0));\r\n                relCount += 2;\r\n              } \r\n              \r\n              if (!(key === \"from\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy2, relCount,0,0));\r\n                relCount += 2; \r\n              } \r\n \r\n              if (index < node[this.getOpositeDirection(key)].length - 1)\r\n              {\r\n                 opositeIndex = index; \r\n              }\r\n              else\r\n              {\r\n                 opositeIndex = false; \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n       \r\n        const isValid = validator(ontoUmlSchema);\r\n\r\n        if (isValid)\r\n        {\r\n          return ontoUmlSchema; \r\n        }\r\n        else\r\n        {\r\n          alert(\"Model is not valid! Check OntoSchemaCotroller!\"); \r\n          return {}; \r\n        }\r\n    }\r\n\r\n    schemaInit ()\r\n    {\r\n        return {\r\n            \"type\": \"Package\",\r\n            \"id\": \"puroConversion\",\r\n            \"name\": null,\r\n            \"description\": null,\r\n            \"contents\": [],\r\n            \"propertyAssignments\": null\r\n            }\r\n    }\r\n\r\n    ontoClassTransformation (ontoClass)\r\n    {\r\n      return  {\r\n            \"type\": \"Class\",\r\n            \"id\": ontoClass.uri ,\r\n            \"name\": ontoClass.label,\r\n            \"description\": null,\r\n            \"properties\": null,\r\n            \"literals\": null,\r\n            \"propertyAssignments\": null,\r\n            \"stereotypes\": [ontoClass.ontoType.toLowerCase()],\r\n            \"isAbstract\": null,\r\n            \"isDerived\": null\r\n            }\r\n    }\r\n\r\n    relationTransformation (relation, relCount, fromIndex, toIndex)\r\n    {\r\n\r\n        if (relation.ontoType === \"Generalization\")\r\n        {\r\n             return {\r\n                \"type\": \"Generalization\",\r\n                \"id\": relation.uri,\r\n                \"name\": null,\r\n                \"description\": null,\r\n                \"general\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.from[fromIndex]\r\n                },\r\n                \"specific\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.to[toIndex]\r\n                },\r\n                \"propertyAssignments\": {\r\n                  \"nonStandardProperty\": null\r\n                }\r\n              };\r\n        }\r\n        else\r\n        {\r\n            return {\r\n              \"type\": \"Relation\",\r\n              \"id\": relation.uri,\r\n              \"name\": null,\r\n              \"description\": null,\r\n              \"properties\": [\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + relCount,\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.from[fromIndex]\r\n                  },\r\n                  \"cardinality\": relation.fromType[fromIndex] === \"\" || undefined ? null : relation.fromType[fromIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                },\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + (parseInt(relCount) + 1),\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.to[toIndex]\r\n                  },\r\n                  \"cardinality\": relation.toType[toIndex] === \"\" || undefined ? null : relation.toType[toIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                }\r\n              ],\r\n              \"propertyAssignments\": {\r\n                \"nonStandardProperty\": null\r\n              },\r\n              \"stereotypes\": [relation.ontoType.toLowerCase()],\r\n              \"isAbstract\": true,\r\n              \"isDerived\": false\r\n            }\r\n        }\r\n    }\r\n}","import RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\nimport OntoSchmeController from './OntoSchemaController.js';\r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();   \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController();\r\n        this.historyController = new HistoryController();\r\n        this.ontoSchemaController = new OntoSchmeController(); \r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;          \r\n        });\r\n\r\n        this.elSettings = {};\r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    //runs when b-relation is selected\r\n    getDefault (firstCall)\r\n    {       \r\n        if (this.relationOrderIndex === this.relations.length || this.relations.length === 0)\r\n        {\r\n            if (firstCall === true)\r\n            {\r\n                \r\n                this.relationTree = this.queryTree;\r\n            \r\n                this.ruleKey = \"from\";\r\n                this.elementUri = this.relationTree[this.relationOrderIndex].uri.value;\r\n                this.relation = {uri:{value: null}};\r\n                return this.ruleController.commonRuleSelection(this.relationTree[this.relationOrderIndex], true,this.ontoController.getOntoModel());\r\n            }\r\n            alert(\"Transformation is comlete!!!\");\r\n            return {buttons: [], title: \"The End\", type: \"end\"};\r\n        }\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n            const question = relation.label.value.charAt(0).toUpperCase() + relation.label.value.slice(1) + \" was typed as a Relator.\"\r\n            return this.createButtons(\"Relator\",question,this.delUri(relation.type.value),false,relation.label.value);\r\n        }\r\n        else\r\n        {\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question =this.getQuestion(relation.label.value, \"bRelation\");\r\n\r\n            return this.createButtons(this.rulesJson.bRelationRules, question,this.delUri(relation.type.value), false, relation.label.value);            \r\n        }\r\n    }\r\n\r\n    // process every PURO entity\r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n        let relationRules; \r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n           \r\n           return this.relationWasSelected(selectedType, elName);\r\n        }\r\n        else if (puroType === \"needFather\") \r\n        {\r\n            if (selectedType.toLowerCase() === \"none\")\r\n            {\r\n                this.selectedEl[\"foundFather\"] = selectedType.toLowerCase();\r\n            }\r\n            else\r\n            {\r\n                this.selectedEl[\"foundFather\"] = this.ontoController.getElementByProperty(\"label\",selectedType);\r\n            }\r\n\r\n            return  this.consistencyCheck(); \r\n        }\r\n        else \r\n        {\r\n            \r\n            let relationEl; \r\n            let additionalRule = []; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            \r\n            if (puroType.includes(\"ontoRelation-save-bRelation\") || puroType.includes(\"material\") )\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"to\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"material\")\r\n                    {\r\n                        // for material relationship -> not implemented \r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                    relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                  \r\n                }\r\n\r\n                if (this.lastElInBranch === \"cPhase-next\")\r\n                {\r\n                   \r\n                    return this.cPhaseHandle();\r\n                }\r\n                else\r\n                {\r\n                    if (Object.keys(this.elSettings).length === 0 && this.lastElInBranch === \"cPhase\")\r\n                    {\r\n                        const updateCardinality = this.updateRelationTypes();\r\n                        if (updateCardinality !== false)\r\n                        {\r\n                            return updateCardinality; \r\n                        } \r\n                        else\r\n                        {\r\n                            return this.cPhaseHandle(); \r\n                        }\r\n\r\n                    }\r\n                    selectedType = this.elSettings.selectedType;\r\n                    puroType = this.elSettings.puroType;\r\n                    elName = this.elSettings.elName;\r\n                    relationEl = this.elSettings.relationEl;\r\n                    additionalRule = this.elSettings.additionalRule; \r\n                    nameWasChange = this.elSettings.nameWasChange;\r\n                }\r\n\r\n            }\r\n            if (!Array.isArray(selectedType) && selectedType.toLowerCase() === \"none\")\r\n            {  \r\n                this.elSettings.selectedType = selectedType; \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                this.additionalRule.key = \"stop\"; \r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n            \r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                this.consistencyExeption.push({uri: this.elementUri, ontoType:selectedType, type: puroType});\r\n            \r\n                return this.consistencyCheck(); \r\n            }\r\n            \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {            \r\n               if ((this.additionalRule.key!== \"stop\" && this.additionalRule.key === undefined && (this.additionalRule.index > 1 || this.ontoController.getOntoBranch(this.relation.uri.value,this.ruleKey, this.relationRuleIndex).length === 0)) && this.relation.uri.value !== null)\r\n               {\r\n\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),selectedType, 1)\r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        this.additionalRule.index = 2; \r\n                        this.additionalRule.rule =  this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree));\r\n                        this.additionalRule.key = selectedType;\r\n                    }\r\n               } \r\n               else if (this.additionalRule.index > 1 && this.additionalRule.key !== \"stop\")\r\n               {\r\n                 additionalRule = this.ruleController.getAdditionalRule(this.additionalRule.rule, selectedType, this.additionalRule.index);\r\n                 if (additionalRule.length > 0)\r\n                 {\r\n                    this.additionalRule.index ++; \r\n                 }\r\n                 else\r\n                 {\r\n                    this.additionalRule.key = \"last\";\r\n                 }\r\n\r\n               }\r\n               \r\n               const el = this.getElementByUri(this.elementUri);\r\n               const isElInstance = el !== false && el.father.length > 0 ? this.isElementInstace(this.getElementByUri(el.father[0])): false ; \r\n               relationEl = this.ontoController.getRelationElements(elName,el , this.elementUri,this.relation.uri.value, additionalRule.length, additionalRule.length === 0, puroType, isElInstance, this.ruleKey, nameWasChange,this.relationRuleIndex);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\", elUri: this.elementUri};\r\n            \r\n               \r\n            \r\n               if ((relationEl === this.relation.uri.value) || this.lastElInBranch === \"cPhase\")\r\n               {\r\n                 const updateRelTypes = this.updateRelationTypes(); \r\n\r\n                if (updateRelTypes !== false)\r\n                {\r\n                    this.lastElInBranch += \"-next\"; \r\n                    return updateRelTypes;\r\n                }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"connect\"\r\n                \r\n\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey, undefined,undefined,undefined,undefined,this.elementUri);\r\n            }\r\n            else \r\n            {\r\n             \r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n              \r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n               \r\n                    elRelTypes = selectedType;\r\n                }\r\n              \r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n                this.elementUri = this.elSettings.elUri;\r\n               \r\n            } \r\n            relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n         \r\n            if (relationRules !== true)\r\n            {\r\n                return Promise.resolve(relationRules); \r\n            }\r\n            \r\n            if (this.valuationArr !== null)\r\n            {\r\n                if (this.valuationArr.length > 0)\r\n                {   \r\n\r\n                    return this.handleValuation();\r\n                \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                   \r\n                    if (this.ruleKey === \"to\" && this.relation.to.length === this.relationRuleIndex)\r\n                    {\r\n                        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value); \r\n\r\n                        if (this.updateRelationTypes() === false && ontoRel.from.length === ontoRel.to.length)\r\n                        {\r\n                            return this.cPhaseHandle();\r\n                        }\r\n                        else\r\n                        {\r\n                            const lastEl = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                            this.ontoController.updateOntoModel(this.relation.uri.value,\"to\",lastEl);\r\n    \r\n                            this.elementUri = lastEl; \r\n                            this.lastElInBranch = \"cPhase\";\r\n    \r\n                            const updateRel = this.updateRelationTypes();\r\n                            if (updateRel === false)\r\n                            {\r\n                                return this.cPhaseHandle();\r\n                            }\r\n                            else\r\n                            {\r\n                                return updateRel;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            } \r\n            const purType = this.selectedEl === false || !(\"type\" in this.selectedEl) ? false : this.delUri(this.selectedEl.type.value);\r\n\r\n            let origUri = undefined; \r\n            if (this.relationTree[this.relationTree.length - 1].uri.value === this.elementUri)\r\n            {\r\n               const ontoEl = this.ontoController.getOntoElement(this.elementUri); \r\n               if (ontoEl === false)\r\n               {\r\n                 origUri = \"first\"\r\n               }    \r\n            }\r\n\r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            purType,this.relation.uri.value,this.ruleKey,elName, nameWasChange, this.ontoUri, this.relationRuleIndex, origUri);\r\n          \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();\r\n                console.log(this.selectedEl)\r\n                this.elementUri = this.selectedEl === false || Array.isArray(this.selectedEl) ? \"\" : this.selectedEl.uri.value; \r\n                \r\n                this.selectedEl = this.elementUri === \"\" ? false : this.selectedEl; \r\n                \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,additionalRule,this.isElementInstace(this.getElementByUri(this.elementUri)), this.relation.label.value);\r\n            }\r\n            else if (this.additionalRule.key === \"last\")\r\n            {   \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                else\r\n                {\r\n                   \r\n                    this.additionalRule.key = \"stop\";\r\n                    return this.consistencyCheck(); \r\n                }\r\n            }\r\n            else\r\n            {\r\n                \r\n                this.additionalRule.key = \"stop\"; \r\n                \r\n                if (this.relation.uri.value !== null && this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                }\r\n        \r\n                return this.consistencyCheck();\r\n                    \r\n                \r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n    cPhaseHandle ()\r\n    {\r\n        if (this.relation[this.ruleKey].length <= this.relationRuleIndex)\r\n        {\r\n            this.relationOrderIndex ++;\r\n            this.setIndexexToDefault();\r\n            return this.getDefault();\r\n        } \r\n        else\r\n        {\r\n            return this.nextTreeBranch(); \r\n        }\r\n    }\r\n\r\n    consistencyCheck ()\r\n    {\r\n       \r\n        let next = this.selectedEl !== false && \"foundFather\" in this.selectedEl ? true : false;\r\n        let addNone = false;\r\n        if (this.elementsWithoutType.length === 0 || !next)\r\n        {\r\n            this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n        }     \r\n       \r\n        if ((this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length) || next)\r\n        {        \r\n           \r\n            \r\n            if (next === true && this.selectedEl[\"foundFather\"] === \"None\")\r\n            {\r\n                this.withoutTypeIndex ++; \r\n            }\r\n\r\n            const element = next ? this.selectedEl : this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);   \r\n\r\n            if (\"needToFindFather\" in element && !next)\r\n            {\r\n                const relationEls = this.ontoController.getOntoBranch(this.relation.uri.value, this.ruleKey, this.relationRuleIndex); \r\n                if (relationEls.length < 2)\r\n                {\r\n                    element[\"foundFather\"] = relationEls[0];\r\n                    next = true; \r\n                    addNone = true;\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    const labels = []; \r\n                    const question = \"To which element is \" + element.label.value + \" connected?\"; \r\n                    this.selectedEl = element; \r\n    \r\n                    for (let el of relationEls)\r\n                    {\r\n                        if (!labels.includes(el.label))\r\n                        {\r\n                            labels.push(el.label);\r\n                        }\r\n                    }\r\n                    labels.push(\"None\");\r\n    \r\n                    return this.createButtons(labels,question,\"needFather\", false, \"\")\r\n                }\r\n\r\n            }\r\n            \r\n            let commonRule = false;  \r\n            if (element !== false)\r\n            {   \r\n                this.withoutTypeIndex ++;\r\n                this.elementUri = element.uri.value;\r\n            \r\n                commonRule = this.ruleController.commonRuleSelection(element,this.getUsableFather(element),this.ruleKey,this.ontoController.getOntoModel(), next, addNone);\r\n            }\r\n\r\n            if (commonRule === undefined)\r\n            {   \r\n                alert(\"Common rule is not defined! Check rules.json\");\r\n                window.location.reload();\r\n            }\r\n            else if (commonRule !== false)\r\n            {\r\n                this.selectedEl = {}; \r\n                \r\n                return commonRule;\r\n            }\r\n        }\r\n\r\n        let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    \r\n        if (unfinishedTypes.length > 0)\r\n        {              \r\n            for (let exeption of this.consistencyExeption)\r\n            {\r\n                for (let index in unfinishedTypes)\r\n                {\r\n                    if(exeption.uri === unfinishedTypes[index].element && unfinishedTypes[index].types.includes(exeption.ontoType) && exeption.type === unfinishedTypes[index].key)\r\n                    {\r\n                        unfinishedTypes.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n    \r\n            if ((unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"Relator\") && unfinishedTypes[0].types.includes(\"None\")) || (unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"None\") && unfinishedTypes[0].types.length === 1))\r\n            {\r\n                unfinishedTypes.splice(0, 1);  \r\n            }\r\n        }\r\n        \r\n        if (unfinishedTypes.length > 0)\r\n        {\r\n            const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n            this.elementUri = unfinishedTypes[0].element;\r\n            return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n        }\r\n        else if (this.relation.uri.value === null)\r\n        {\r\n            return this.getDefault(); \r\n        }\r\n        else\r\n        {\r\n            \r\n            if (this.relation === null)\r\n            {\r\n                this.getDefault(); \r\n            }\r\n            \r\n            if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n            {\r\n                this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n                if (this.valuationArr.length > 0)\r\n                { \r\n                   return this.handleValuation(); \r\n                }\r\n            }\r\n            \r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex && this.ruleKey !== \"from\")\r\n            {\r\n                const rel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n                if (rel.to.length < this.relationRuleIndex)\r\n                {\r\n                    const lastEl = this.ontoController.getLastElement(rel.uri,\"to\");\r\n                    this.ontoController.updateOntoModel(rel.uri, \"to\", lastEl.uri);\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n\r\n                    const cardinalitySet = this.updateRelationTypes(true); \r\n                    if (cardinalitySet !== false) return cardinalitySet; \r\n                }\r\n\r\n\r\n                this.setIndexexToDefault();\r\n                this.relationOrderIndex ++;\r\n                return this.getDefault();\r\n            } \r\n            else\r\n            {\r\n                \r\n                return this.nextTreeBranch(); \r\n            }   \r\n    \r\n        }\r\n    }\r\n\r\n    //checks if there is necessity to update cardinality in relaion ships\r\n    updateRelationTypes ()\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        \r\n        if (ontoRel.to.length > 0 && ontoRel.from.length > 0)\r\n        {\r\n           \r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType.length < ontoRel.from.length)\r\n            {   \r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from[ontoRel.fromType.length],ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType.length < ontoRel.to.length) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n            /*   else if (ontoRel.ontoType === \"Relator\" && !(\"materialExists\" in ontoRel))\r\n            {\r\n                this.ontoController.addToProperty(ontoRel.uri,\"materialExists\", true); \r\n                return this.createButtons([\"yes\", \"no\"], \"is there material\",\"relator-material\",\"sda\",\"sdsad\"); \r\n            } */\r\n            else if (ontoRel.toType.length < ontoRel.to.length || ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                const ontoRelFromN = ontoRel.from.length <= ontoRel.fromType.length ? ontoRel.from.length - 1 :  ontoRel.fromType.length\r\n                const ontoRelToN = ontoRel.to.length <= ontoRel.toType.length ? ontoRel.to.length - 1 :  ontoRel.toType.length\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from[ontoRelFromN],ontoRel.to[ontoRelToN]);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n\r\n        const question = this.getQuestion(this.delUri(this.valuationArr[0].valuation),\"valuations\"); \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n\r\n        return buttons;  \r\n    }\r\n\r\n    // selects next branch in PURO model\r\n    nextTreeBranch () \r\n    {\r\n        if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n        {\r\n         \r\n            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n            if (this.valuationArr.length > 0)\r\n            {\r\n                return this.handleValuation(); \r\n            }\r\n        }\r\n        \r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0 || (this.relationRuleIndex > 1 && this.ruleKey === \"from\"))\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        \r\n\r\n        let relationTypePromise; \r\n\r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex)\r\n            {\r\n               this.ruleKey = this.ruleKey === \"from\" ? \"to\": \"from\"; \r\n               this.relationRuleIndex = 0;\r\n            }   \r\n     \r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n            this.relationRuleIndex ++; \r\n\r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        this.additionalRule.key = undefined;\r\n        this.additionalRule.index = 0; \r\n        this.consistencyExeption = [];\r\n\r\n\r\n        return new Promise(resolve => {relationTypePromise.then((results) => {\r\n            this.valuationArr = null;\r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        });});\r\n    }\r\n\r\n    // get all B-Valuations from the branch \r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let treeEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(treeEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                let connectElement = el.uri.value; \r\n                if (this.delUri(el.type.value) === \"BObject\" || el.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                {\r\n                    const lastTypes = this.rulesJson[\"lastTypes\"];\r\n                    let lastEl = [];\r\n                    for (let type of lastTypes)\r\n                    {\r\n                      lastEl = lastEl.concat(this.ontoController.getElementsByOntoType(type, this.relation.uri.value));\r\n                    }\r\n                    if (lastEl.length > 0) {\r\n                        connectElement = lastEl[0]; \r\n                    }\r\n                }\r\n\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: connectElement, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n\r\n        for (let index in valuations)\r\n        {\r\n            if (this.ontoController.getElementByProperty(\"origUri\",valuations[index].valuation) !== false)\r\n            {\r\n                valuations.splice(index, 1);   \r\n            }\r\n        }\r\n\r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    // create cardinality buttons\r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n  \r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.toT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"to\"};\r\n        });\r\n\r\n        const  labelFromE = this.selectElementsLabel(fromE);\r\n        const labelToE = this.selectElementsLabel(toE);\r\n        \r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    //selects elements label\r\n    selectElementsLabel(element)\r\n    {\r\n         let ontoEl = this.ontoController.getOntoElement(element);\r\n         let label; \r\n         if (ontoEl === false)\r\n         {\r\n             if (element === this.elSettings.elUri)\r\n             {\r\n                label = this.elSettings.elName === \"\" ? this.delUri(element) : this.elSettings.elName; \r\n             }\r\n             else\r\n             {\r\n                 label = this.delUri(element)\r\n             }\r\n         }\r\n         else\r\n         {\r\n            label = ontoEl.label\r\n         }\r\n\r\n\r\n         return label; \r\n    }\r\n\r\n    //checks if cardinality is needed to be set\r\n    isCardinalityNeed (relType)\r\n    {\r\n        for (let rel of this.rulesJson.relations)\r\n        {\r\n             for (let key in rel)\r\n             {\r\n                 if (key === relType && \"cardinality\" in rel)\r\n                 {\r\n                    return rel[\"cardinality\"]; \r\n                 }\r\n             }\r\n        }\r\n\r\n        return true; \r\n    }\r\n   \r\n    //selects relation rules\r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n       \r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        let createCardinality = true; \r\n \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.ruleController.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);    \r\n        }\r\n        else\r\n        {\r\n            return true; \r\n        }\r\n        \r\n        if (relType === \"updated\")\r\n        {\r\n            return true;\r\n        }\r\n        if (rule === false && !relationFlow.includes(\"save\"))\r\n        {\r\n            alert(\"Relation rule is not defined! Check rules.json!\"); \r\n    \r\n        }\r\n        \r\n        if (!relationFlow.includes(\"save\") && (relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1))\r\n        {\r\n           \r\n            if (\"fromT\" in rule && \"toT\" in rule && createCardinality === true && this.isCardinalityNeed(relOntoType))\r\n            {\r\n            \r\n                this.elSettings.relType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.relType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, undefined, \"nazev\", \"\", \"\");\r\n\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            this.ontoController.addRelation(this.elSettings.relType, fromE, toE, undefined, \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map((ruleClass) => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           });\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};        \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    // choose what to do when B-Relation was selected\r\n    relationWasSelected (selectedType, elName) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        elName = elName === \"\" ? this.relation.label.value : elName;\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        \r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, elName);\r\n  \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            \r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    // choose what to do when branch/B-Relation is selected\r\n    handleRelatedElements (elements, origin, ruleKey, rule) \r\n    {\r\n\r\n\r\n        rule = rule === undefined ? this.rulesJson[this.relationType] : rule;\r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1;        \r\n        \r\n        this.debug(this.relationTree, \"tree\")\r\n    \r\n        if (origin === \"relationWasSelected\" || this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value) !== false)\r\n        {\r\n         \r\n            const nextElement = this.getNextElement();\r\n            \r\n            let additionalRule = [];\r\n            let fatherType = \"\"; \r\n            let el = false; \r\n            let bObjectChild = false;\r\n            let prevEl = false; \r\n            let lastEl = null;\r\n            if (Array.isArray(nextElement) && nextElement[1] === false)\r\n            {\r\n               \r\n                prevEl = nextElement[0]; \r\n                fatherType = nextElement[0].ontoType; \r\n                const rdfEl = this.getElementByUri(nextElement[0].uri); \r\n                \r\n                if (rdfEl !== false && rdfEl.child.length > 0)\r\n                {\r\n                    \r\n                    el = this.getElementByUri(rdfEl.child[0]);\r\n                    this.selectedEl = el;\r\n                    bObjectChild = true;\r\n                }\r\n                this.ontoController.updateOntoModel(nextElement[0].uri,\"branchIndex\",this.relationRuleIndex,false);\r\n                \r\n                if ((this.relationRuleIndex > 1 || prevEl.fromRelation.length > 0) && !this.additionalRule.index > 0)\r\n                {\r\n                    this.additionalRule.index ++; \r\n                }\r\n            \r\n            }\r\n            else\r\n            {\r\n                this.selectedEl = nextElement; \r\n        \r\n                if (this.selectedEl !== false)\r\n                {\r\n                    el = this.getElementByUri(this.selectedEl.uri.value);\r\n                    if (el.father.length > 0)\r\n                    {\r\n                      fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                      prevEl = this.ontoController.getOntoElement(el.father[0]);\r\n                    }\r\n                }\r\n\r\n            }\r\n    \r\n            if (fatherType !== \"\" && fatherType !== false)\r\n            {                \r\n                const elements = this.ontoController.getElementsFromBranch(prevEl.uri);\r\n         \r\n                let addIndex = 1; \r\n                let prevAdd = []; \r\n                for (let index in elements)\r\n                {\r\n                    let node = this.ontoController.getOntoElement(elements[index]);\r\n                    if (node.origUri === \"first\")\r\n                    {\r\n                        elements.length = parseInt(index) + parseInt(1); \r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for (let index = elements.length - 1; index >= 0; index--) {\r\n                    let element = this.ontoController.getOntoElement(elements[index])\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),element.ontoType, addIndex);\r\n                   \r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        \r\n                        prevAdd = additionalRule;\r\n                        this.additionalRule.index ++;\r\n                        addIndex = this.additionalRule.index;\r\n                    }\r\n                    else\r\n                    {   \r\n                      \r\n                        if (prevAdd.includes(element.ontoType))\r\n                        {\r\n                            additionalRule = []; \r\n                            break; \r\n                        }\r\n                        else\r\n                        {\r\n                            lastEl = element; \r\n                            this.additionalRule.key = fatherType;\r\n                            additionalRule = prevAdd; \r\n                            break; \r\n                        }\r\n\r\n                    }\r\n\r\n                    if (index === elements.length - 1)\r\n                    {\r\n                        this.additionalRule.key = fatherType;\r\n                        additionalRule = prevAdd; \r\n                    }\r\n                }\r\n       \r\n                if (additionalRule.length > 0)\r\n                {\r\n                   \r\n                    this.additionalRule.rule = this.ruleController.getSpecificRule(rule,ruleKey, this.countBTypesInTree(this.relationTree));\r\n                }\r\n   \r\n            }\r\n            \r\n            \r\n            if (additionalRule.length === 0)\r\n            {\r\n                if (el === false && bObjectChild === true) \r\n                {\r\n                    return this.nextTreeBranch();\r\n                }\r\n                if (origin !== \"relationWasSelected\")\r\n                {\r\n                 \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n\r\n                    this.elementUri = prevEl.uri; \r\n\r\n                    this.lastElInBranch = \"cPhase\";\r\n    \r\n                    const updateRelType = this.updateRelationTypes(true); \r\n                    \r\n                    if (updateRelType === false)\r\n                    {\r\n                        return this.cPhaseHandle(); \r\n                    }\r\n                    else\r\n                    {\r\n                        return updateRelType; \r\n                    }\r\n                    \r\n                }\r\n                else if (origin === \"relationWasSelected\" && (bObjectChild === true || prevEl !== false))\r\n                {\r\n                   this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n                   return this.nextTreeBranch(); \r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = this.selectedEl === false || Object.keys(this.selectedEl).length === 0 ? \"\" : this.selectedEl.uri.value; \r\n                    return this.ruleController.ruleSelection(rule,ruleKey,el,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.isElementInstace(el), this.relation.label.value,this.countBTypesInTree(this.relationTree));\r\n                }\r\n\r\n            }\r\n            else\r\n            {  \r\n                if (el !== false)\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = \"\";\r\n                }\r\n                let lastLabel; \r\n                if (lastEl !== null)\r\n                {\r\n                    this.elementUri = lastEl.uri;\r\n                    lastLabel = lastEl.label;\r\n                }\r\n                else\r\n                {\r\n                    lastLabel = prevEl.label;\r\n                }\r\n                \r\n                return  this.ruleController.ruleSelection(undefined,ruleKey,el,lastLabel,additionalRule,this.isElementInstace(el), this.relation.label.value);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const rule = this.rulesJson[this.relationType];\r\n\r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n\r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.isElementInstace(this.selectedEl), this.relation.label.value,this.countBTypesInTree(this.relationTree)));\r\n        }\r\n\r\n    }\r\n\r\n    deleteDuplicityInRelTree (dupArray)\r\n    {\r\n        let checkArr = dupArray;\r\n        for (let node of this.relationTree)\r\n        {\r\n            for (let child of dupArray)\r\n            {\r\n                if (node.uri.value === child)\r\n                {\r\n                    checkArr = checkArr.filter(e => e !== child); \r\n                }\r\n            }\r\n        }\r\n\r\n        return checkArr;\r\n    }\r\n\r\n    // checks if PURO lement is also in another Branch\r\n    isInAnohterRelation (element)\r\n    {\r\n       let lastChild = null; \r\n       while (element.connect.length === 0 && element.connectFrom.length === 0 && element.child.length > 0 )\r\n       {\r\n         for (let child of element.child)\r\n         {\r\n            child = this.getElementByUri(child);\r\n\r\n            if(!this.isElementInstace(child)) \r\n            {\r\n                element = child; \r\n                break; \r\n            }\r\n            else if (element.child[element.child.length - 1] === child.uri.value && child.child.length ===  0 && this.isElementInstace(child))\r\n            {\r\n                lastChild = child; \r\n            }\r\n         }\r\n\r\n         if (lastChild !== null) \r\n         {\r\n             element = lastChild;\r\n             break; \r\n         }\r\n\r\n       }\r\n\r\n       if ((element.connectFrom.includes(this.relation.uri.value) || element.connect.includes(this.relation.uri.value)) || (element.child.length === 0 && element.connectFrom.length === 0 && element.connect.length === 0))\r\n       {\r\n           return false;\r\n       }\r\n       else\r\n       {\r\n           return true; \r\n       }\r\n    }\r\n\r\n    getElementsWithoutType (element, elWithoutType)\r\n    {\r\n        const currEl = this.getElementByUri(element.uri.value);\r\n        if (currEl.child.length > 0)\r\n        {   \r\n            \r\n            for (let child of currEl.child)\r\n            {\r\n                const childEl = this.getElementByUri(child); \r\n                if ((!this.isElementInstace(childEl) || (childEl.child.length > 1)) && this.ontoController.getOntoElement(childEl.uri.value) === false && !this.isInAnohterRelation(childEl))\r\n                { \r\n                    if (!childEl.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                    {   \r\n                        elWithoutType.push(childEl);\r\n                    }\r\n                    else\r\n                    {\r\n                       \r\n                        const checkArr = this.deleteDuplicityInRelTree(childEl.child);\r\n\r\n                        if (checkArr.length > 0)\r\n                        {\r\n                            for (let uri of checkArr)\r\n                            {\r\n                              \r\n                                const el = this.getElementByUri(uri); \r\n                                let fatherWithouType = this.getUsableFather(el); \r\n                                fatherWithouType = this.deleteDuplicityInRelTree(fatherWithouType);\r\n                                for (let i in fatherWithouType)\r\n                                {\r\n                                    fatherWithouType[i] = this.getElementByUri(fatherWithouType[i]);\r\n                                    fatherWithouType[i][\"needToFindFather\"] = true; \r\n                                }\r\n                                \r\n                                elWithoutType = elWithoutType.concat(fatherWithouType);\r\n                            }\r\n                        }\r\n\r\n                        \r\n                    }\r\n        \r\n                    elWithoutType = this.getElementsWithoutType(childEl,elWithoutType);\r\n                }\r\n\r\n            }\r\n        }\r\n        return elWithoutType; \r\n    }\r\n\r\n    checkElementsInRelationTree (tree) \r\n    {\r\n        let elementsWithoutType = [];\r\n        for (let element of tree)\r\n        {\r\n            elementsWithoutType = this.getElementsWithoutType(element, elementsWithoutType); \r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n      \r\n        promiseArr.push(this.rdfController.getRelationBTypes(relation[key][this.relationRuleIndex]));\r\n\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][this.relationRuleIndex-1]));\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            return result; \r\n        })\r\n   \r\n    }\r\n\r\n    // get next element from puro branch\r\n    getNextElement () \r\n    {\r\n        if(this.relationIndex < 0)\r\n        {\r\n            return false; \r\n        }\r\n\r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]) && this.isElementInstace(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n        \r\n     \r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n           \r\n            if (this.relationTree[this.relationIndex] !== undefined && ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                \r\n                if (this.isRelationShareType(this.getElementByUri(this.relationTree[this.relationIndex].uri.value),this.relation.uri.value,this.relationType))\r\n                {\r\n                    const ontoElement = this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value);\r\n                    \r\n                    this.ontoController.addToProperty(ontoElement.uri, \"fromRelation\", this.relation.uri.value);\r\n                    this.ontoController.addToProperty(ontoElement.uri, \"direction\", this.ruleKey);\r\n                    \r\n                    return [ontoElement, false]; \r\n                }\r\n                else if (this.areChildrenInBranchUseless(this.relationTree[this.relationIndex]))\r\n                {\r\n                    const lastRel = ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1]; \r\n                    let lastDirection = ontoModel[index].direction[ontoModel[index].direction.length - 1]; \r\n\r\n                    if (ontoModel[index].fromRelation.length > 1 && ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1] === ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 2])\r\n                    {\r\n                        lastDirection = this.getOpositeDirection(lastDirection)\r\n                    }\r\n\r\n                    \r\n                    let lastElement = this.ontoController.getLastElementUri(lastRel,lastDirection, undefined ,this.relation.uri);  \r\n                    \r\n            \r\n                    while (this.ontoController.getCardinalElement(lastElement, false) !== false)\r\n                    {\r\n                        lastElement = this.ontoController.getCardinalElement(lastElement,false);\r\n                    }\r\n                   \r\n                    lastElement = this.ontoController.getElementInRelRow(lastElement);\r\n            \r\n                    lastElement = this.ontoController.getOntoElement(lastElement);\r\n\r\n                    const allBranchBtypes = this.ontoController.getOntoBranch(lastRel, lastDirection); \r\n         \r\n                    \r\n                    for (let el of allBranchBtypes)\r\n                    {\r\n                        \r\n                        this.ontoController.addToProperty(el.uri, \"fromRelation\", this.relation.uri.value);\r\n                        this.ontoController.addToProperty(el.uri, \"direction\", this.ruleKey);\r\n                    }\r\n                    \r\n                    return [lastElement, false];  \r\n                }\r\n                else\r\n                {\r\n                    this.relationIndex --;\r\n                    index = 0;  \r\n                    \r\n                }\r\n\r\n            }\r\n            \r\n        }  \r\n    \r\n        returnEl = this.relationTree[this.relationIndex];\r\n\r\n        returnEl = returnEl === undefined ? false : returnEl;\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    isRelationShareType (el, currentRelation, direction)\r\n    {\r\n        const ontoEl = this.ontoController.getOntoElement(el.uri.value) \r\n        if (ontoEl === false || !ontoEl.fromRelation.includes(currentRelation)) return false;\r\n\r\n        direction = direction === \"from\"? \"connect\" : \"connectFrom\"; \r\n        \r\n        let result = [];\r\n\r\n        result = this.getConnectRelation(el,direction,currentRelation, result); \r\n\r\n        if (result.includes(true))\r\n        {\r\n            return true; \r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    getConnectRelation (el, direction, currentRelation, result)\r\n    {\r\n        for (let child of el.child)\r\n        {\r\n            let childEl = this.getElementByUri(child);\r\n            if (childEl[direction].includes(currentRelation))\r\n            {\r\n                result.push(true); \r\n                break; \r\n            }\r\n            else if (childEl.child.length > 0)\r\n            {\r\n              this.getConnectRelation(childEl,direction,currentRelation, result); \r\n            }\r\n        }\r\n        \r\n        return result; \r\n    }\r\n\r\n    areChildrenInBranchUseless (element)\r\n    {\r\n        if (element.childRel.includes(\"http://lod2-dev.vse.cz/ontology/puro#subTypeOf\") && this.relationTree.length > 1)\r\n        {\r\n           return false;\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        if (typeof element !== \"object\") return false;  \r\n\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\" || this.delUri(type) === \"Some_objects\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let consistencyIndex = 0; \r\n        const consistencyTree = []; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node.fromRelation.includes(relation) && node.direction[node.direction.length - 1] === ruleKey && node.branchIndex.includes(this.relationRuleIndex))\r\n            {\r\n            \r\n                consistencyTree.push(node); \r\n            }\r\n        }\r\n\r\n   \r\n       \r\n        if (consistencyTree.length === 0)\r\n        {\r\n            return consistencyTree; \r\n        }\r\n        \r\n        let elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex],this.ontoController);\r\n\r\n        consistencyIndex ++;\r\n\r\n\r\n        while (consistencyIndex < consistencyTree.length && elementTypes.length === 0)\r\n        {\r\n            \r\n            elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex], this.ontoController);\r\n            consistencyIndex ++; \r\n        }\r\n      \r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        if (typeof uri !== \"string\") return false; \r\n\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n\r\n        this.lastElInBranch = false; \r\n\r\n\r\n        this.additionalRule = {key: undefined, rule: {}, index: 1}; \r\n\r\n\r\n        this.consistencyExeption = []; \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n               \r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (typeof record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n  \r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relationRuleIndex = 0; \r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n                console.log(prop)\r\n                console.log(JSON.parse(JSON.stringify(this[prop])))\r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n    getOntoSchema ()\r\n    {\r\n        return this.ontoSchemaController.transform(this.ontoController.getOntoModel());\r\n    }\r\n\r\n    getIframeURL ()\r\n    {\r\n\r\n        return this.rulesJson[\"iframeURL\"].replace(\"MODELID\",this.modelId); \r\n    }\r\n\r\n    fullSizeSvg ()\r\n    {\r\n        let index = 0; \r\n       \r\n        for (let node of this.ontoController.getOntoModel())\r\n        {\r\n            if (node.type === \"Class\")\r\n            {\r\n                index ++; \r\n            }\r\n            \r\n            if (index === 4)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    //get PURO element which is father to the element and is puro B-Type\r\n    getUsableFather (element)\r\n    {\r\n        const returnArr = []; \r\n        for (let node of element.father)\r\n        {\r\n            let father = this.getElementByUri(node);\r\n            if (this.isElementInstace(father) === false) returnArr.push(father.uri.value); \r\n\r\n            while (this.isElementInstace(father))\r\n            {\r\n                for (let fatherOfFather of father.father)\r\n                {\r\n              \r\n                    father = this.getElementByUri(fatherOfFather);\r\n                    if (this.isElementInstace(father) === false)\r\n                    {\r\n                   \r\n                        returnArr.push(father.uri.value); \r\n                    }\r\n                }\r\n                if (returnArr.length > 0) break; \r\n            }\r\n\r\n\r\n        }\r\n        element.father = returnArr; \r\n        return returnArr;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport fileDownload from 'js-file-download';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport Iframe from 'react-iframe';\n\n\n\nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n\n    this.eventController = new EventController();\n    this.state = {\n      svg: \"\", iframeURL: this.eventController.getIframeURL(), fullSize: false \n    };\n    \n    mermaid.initialize({\n      startOnLoad: false,\n      themeCSS: '#extensionEnd { fill: white; } #extensionStart { fill: white; } ',\n    });\n  }\n\n  createGraph = (svg) => {\n\n    this.setState({ svg: svg });  \n  }\n\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"form-group col-md-6\" id=\"puroModelContainer\">\n            <label htmlFor=\"puroModel\">Puro model</label>\n            <div className=\"transformWindow border\" id=\"puroModel\">\n              <Iframe url= {this.state.iframeURL}\n                width=\"607px\"\n                height=\"307px\"\n                id=\"iframePuro\"\n                className=\"myClassname\"\n                display=\"initial\"\n                position=\"relative\"/>\n            </div>\n          </div>\n   \n          <div className=\"form-group col-md-6\" id=\"ontoModelContainer\">\n            <TransformWrapper\n              enablePadding={false}>\n              {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n                <React.Fragment>\n                  <div className=\"tools\">\n                    <label htmlFor=\"ontoModel\">Onto model</label>\n                    <button className=\"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n                  </div>\n                  <div className=\"border\">\n                    <TransformComponent>\n                      <div dangerouslySetInnerHTML={{ __html: this.state.svg }} className=\"transformWindow\" id=\"ontoModel\">\n                      </div>\n                    </TransformComponent>\n                  </div>\n                </React.Fragment>\n              )}\n            </TransformWrapper>\n          </div>\n          <QuestionPart graphCreation={this.createGraph} eventController={this.eventController} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTransform: true, originalName: \"\", nameWasChange: false,\n      buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\", \n    };\n\n    this.eventController = this.props.eventController;\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined) {\n      event.preventDefault();\n    }\n\n    this.eventController.getDefault(true).then(results => {\n      this.setState({ undoActive: false, svgUrl: \"\", buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false });\n    });\n\n  }\n\n  undoClick = () => {\n\n\n\n  }\n\n  handleClick = (selectedType, selectedUri, type) => {\n    let elName = this.state.elName;\n    let undo = false;\n    let setState = true;\n    let nameWasChange = this.state.nameWasChange;\n\n    elName = elName.trim();\n    elName = elName.replace(/ /g,\"_\"); \n\n    if ((elName === \"\" && this.state.changeName === true && type !== \"Undo\") && selectedType.toLowerCase() !== \"none\") {\n      alert(\"Plese write name of the element!\");\n    }\n    else if (elName !== \"\" && !elName.match(/^[A-Za-z0-9-_*<>]+$/)) {\n      alert(\"Please change the name. It contains forbidden characters!\");\n    }\n    else {\n      if (type === \"Undo\") {\n\n        const history = this.eventController.undo();\n        if (history === false) {\n          this.handleSubmit();\n          setState = false;\n        }\n        else {\n          const inputVariables = history.inputVariables;\n          selectedType = inputVariables[0];\n          selectedUri = inputVariables[1];\n          type = inputVariables[2];\n          elName = inputVariables[3];\n          nameWasChange = inputVariables[4];\n\n          undo = true;\n        }\n\n      }\n      elName = elName.replace(/\\s/g, '_');\n\n      if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName)) {\n        alert(\"Element already exists! Please choose different name.\")\n      }\n      else if (setState === true) {\n       \n        this.eventController.nextElement(selectedType, selectedUri, type, elName, nameWasChange).then(results => {\n          \n          if (results === undefined || false) alert(\"Rule is not defined. \\n Check rules.json\")\n\n          if (undo === false) {\n            let properties = (Object.getOwnPropertyNames(this.eventController));\n            let historyRecord = {};\n            for (let prop of properties) {\n              if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\") {\n                if (typeof prop !== 'function') {\n                  historyRecord[prop] = this.assignProp(this.eventController[prop])\n                }\n              }\n            }\n            this.eventController.saveHistory(historyRecord, [selectedType, selectedUri, type, elName, this.state.nameWasChange]);\n          }\n\n          // Set graph\n          let svg = this.eventController.getGraphSvg();\n\n          this.setState({ buttons: results.buttons, type: results.type, title: results.title, undoActive: true, elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange: false });\n\n          if (svg !== false) {\n            this.createGraph(svg);\n\n\n          }\n\n          if (this.state.type.includes(\"end\")) {\n            this.handleDownloadImage();\n          }\n\n        });\n      }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object') {\n      return JSON.parse(JSON.stringify(prop));\n    }\n    else {\n      return prop;\n    }\n\n  }\n\n  createGraph = (chart) => {\n    const cb = svg => {\n      this.setState({ svg: svg });\n      this.props.graphCreation(svg);\n      if (this.eventController.fullSizeSvg())\n      {\n        $(\"#id1\").addClass(\"fullSize\");\n      }\n      else\n      {\n        $(\"#id1\").removeClass(\"fullSize\");\n      }\n\n    };\n\n    mermaid.render(\"id1\", chart, cb);\n  }\n\n  handleChangeName = () => {\n\n\n    this.setState({ changeName: !this.state.changeName });\n    if (this.state.changeName === true) {\n      this.setState({ elName: \"\", nameWasChange: false });\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function () {\n        $(\".changeAlert\").alert('fade');\n      });\n    }\n    else {\n      this.setState({ elName: \"\", nameWasChange: true });\n\n    }\n  }\n\n  handleDownloadImage = () => {\n    const svgBlob = new Blob([this.state.svg], { type: \"image/svg+xml;charset=utf-8\" });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({ svgUrl: svgUrl });\n\n  }\n\n  handleDownloadSchema = () => {\n    const ontoSchema = JSON.stringify(this.eventController.getOntoSchema());\n    fileDownload(ontoSchema, 'ontoSchema.json');\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid text-center questionPart\">\n\n        <button type=\"Submint\" className={this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleSubmit}>\n          Start transformation\n          </button>\n        <div className={this.state.startTransform ? \"d-none\" : \"\"}>\n          <h3 className=\"questionTitle\">{this.state.title}</h3>\n          <div className=\"optionButtons  d-md-block\">\n            <div className=\"btn-group-vertical text-right\">\n              <button id = \"changeNameBtn\" type=\"button\" className=\"btn btn-primary btnModal\" onClick={this.handleChangeName} disabled={this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\") || this.state.type === \"nextBranchElements\" || this.state.type === \"needFather\"}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n              <button id = \"undoBtn\" type=\"button\" className=\"btn btn-primary btnModal\" onClick={() => this.handleClick(undefined, undefined, \"Undo\")} disabled={!this.state.undoActive}>Undo</button>\n              <button id = \"cancelBtn\" type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); }}>Cancel</button>\n            </div>\n          </div>\n          <div className={this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n            <div className=\"input-group inputName\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n              </div>\n              <input placeholder={this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.originalName} type=\"text\" className=\"form-control\" onChange={this.handleChange} value={this.state.elName}></input>\n            </div>\n            <h5 className={this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>\n          </div>\n          <div className=\"divButtons text-center\">\n            <TypeButtons buttons={this.state.buttons} title = {this.state.title} onClickDownloadSchema={this.handleDownloadSchema} svgUrl={this.state.svgUrl} onClick={this.handleClick} type={this.state.type} elNames={this.state.changeName} originalName={this.state.originalName} />\n          </div>\n          <div className=\"alert alert-success col-md-6 mx-auto changeAlert\" role=\"alert\">\n            Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass TypeButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\")) {\n      return (\n        <div className=\"row col-md-5 mx-auto\" key = {Math.random().toString(16).slice(2)}>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>\n          <select ref=\"relFrom\" className=\"col-md-6 mx-auto form-control cardinalitySelect\" >\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"from\";\n            }).map((rel, index) => {\n              return <option key = {index}  value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <select ref=\"relTo\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val, index) => {\n              return val.direction === \"to\";\n            }).map((rel, index) => {\n              return <option key = {index} value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <button className=\"btn btn-success mx-auto questionPart\" onClick={() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button>\n        </div>\n      )\n    }\n    else if (this.props.type.includes(\"end\")) {\n      return (\n        <div className=\"col-md-8 mx-auto\">\n          <a className=\"btn btn-success btnEnd\" href={this.props.svgUrl} download=\"ontoUml-graph.svg\">Download Onto-UML graph</a>\n          <button type=\"button\" className=\"btn btn-success btnEnd\" onClick={() => this.props.onClickDownloadSchema()}>Download Onto-Schema</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"row col-md-6 mx-auto\">\n          {this.props.buttons.map((value, index) => {\n            return <div className=\"col-md-4 mx-auto\" key = {index}>\n              <button key={this.props.uri} type=\"button\" className={value.name.toLowerCase() === \"none\" ? \" btn btn-secondary btnModal\" : \"btn btn-success btnModal\"} onClick={() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || \n              this.props.title.split(\" \").includes(value.name) || (this.props.originalName === \"\" && this.props.buttons.length === 1) || (value.name.toLowerCase() === \"relator\" && this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n            </div>\n          })}\n        </div>\n      )\n    }\n\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return [<Layout />]\n\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}