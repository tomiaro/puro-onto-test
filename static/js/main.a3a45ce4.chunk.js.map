{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","controllers/MainController.js","controllers/RdfController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/OntoSchemaController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","MainController","jsonData","ontologyURL","ontoUri","$","ajax","type","url","async","cache","dataType","success","json","this","rulesJson","JSON","parse","stringify","windowUrl","URL","window","location","href","modelId","searchParams","get","element","text","console","log","buttons","title","elName","origName","mapButtons","Array","isArray","buttonType","name","Promise","originalName","labelEL","key","questions","q","replace","label","question","unfinishedType","rule","qType","elLabel","preposition","isSameCaseInsensitive","tree","index","node","delUri","value","uri","result","split","push","object","find","other","localeCompare","undefined","sensitivity","direction","RdfController","puro","rdf","require","modelURL","xml","puroXML","error","jqXHR","textStatus","errorThrown","alert","document","referrer","statusText","includes","relator","fromUri","query","sparqlQuery","deleteDuplicity","fatherElement","returnArr","endCall","elementsUri","length","i","findBTypeRelation","bind","debug","findBTypeChild","forEach","father","fatherType","fatherTypeRelation","recursiveFindChild","lastResult","deleteDuplicityInFinal","uniquePropertie","elements","prop","filter","item","pos","indexOf","j","property","concat","splice","bTypeTree","lastCall","final","sparql","callback","turtle","XMLSerializer","serializeToString","store","graph","serialize","err","str","create","load","results","execute","relationUri","elementUri","properties","duplicity","checkArr","res","k","some","OntoModelController","addToOntoModel","ontoType","puroType","relationName","nameWasChange","branchIndex","origUri","elPuroType","elUri","getOntoElement","ontoModel","fromRelation","from","to","updateOntoModel","addRelation","fromType","toType","slice","el","getOntoModel","getElementsRelation","nextRel","getElementOntoType","getElementsByOntoType","origin","changeOrigin","getLastElementUri","getLastElement","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","lastEl","isElInstance","ruleKey","branchesCount","passEl","ontoEl","elementFather","foundFather","lastRelElement","getElementInRelRow","lastElUri","isRelationExist","getOntoBranch","relation","superType","toLowerCase","isRelationComplete","relatedElement","relElements","getElementInRelation","rels","types","rel","getCardinalElement","relationType","all","getOpositeDirection","el1","el2","selectedEl","firstEl","createButtons","ontoModelHistory","ImagController","graphCommand","findLabel","relationSpec","getRelationSpec","base","toKey","trim","relations","normRelType","showType","RuleController","rules","previousElName","isElementInstance","relationLabel","countBtypes","offerTypes","needElName","getSpecificRule","offer","additionalQuestion","connect","getQuestion","ontoController","minCount","maxCount","check","elInRelation","childrenCount","elTypes","getRelatedTypes","subType","elementConsistencySelection","moreThanOneRule","allTypes","suffix","additionalRules","r","addRule","elementConsAddSelection","mincCountount","bTypeNumber","indexCount","isNaN","moreThanOne","addRules","toString","findSimpleRule","last","selectedType","fathers","start","fatheFound","addNone","fatherOnto","childPuroType","childType","child","condition","validity","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","OntoScheController","ontoUmlSchema","schemaInit","relCount","ontoClassTransformation","opositeIndex","fromIndex","toIndex","relationTransformation","nodeCopy","nodeCopy2","schemas","compile","getSchema","ONTOUML_2","validator","ontoClass","parseInt","EventController","rdfController","imageController","ImageController","ruleController","historyController","ontoSchemaController","OntoSchmeController","getFullPath","then","queryTree","getRelations","elSettings","relationOrderIndex","relationIndex","setIndexexToDefault","firstCall","relationTree","commonRuleSelection","valuation","charAt","toUpperCase","bRelationRules","changeElementsProperty","relationWasSelected","getElementByProperty","consistencyCheck","additionalRule","relFlow","lastElInBranch","cPhaseHandle","updateCardinality","updateRelationTypes","relationEl","ontoRelation","relationRuleIndex","consistencyExeption","getAdditionalRule","countBTypesInTree","getElementByUri","isElementInstace","relType","updateRelTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","ontoRel","updateRel","nextTreeBranch","purType","getNextElement","ruleSelection","getDefault","next","elementsWithoutType","checkElementsInRelationTree","withoutTypeIndex","relationEls","labels","commonRule","getUsableFather","reload","unfinishedTypes","checkElementsConsistency","exeption","createQuestion","getAllTreeValuations","cardinalitySet","createRelCardinalityBtn","ontoRelFromN","ontoRelToN","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","treeEl","connectElement","lastTypes","createGraph","fromE","toE","relationFlow","fromB","fromT","ruleClass","toB","toT","labelFromE","selectElementsLabel","labelToE","relOntoType","fromEType","toEType","findRule","isCardinalityNeed","relationTreePromise","lastLabel","nextElement","bObjectChild","prevEl","rdfEl","getElementsFromBranch","addIndex","prevAdd","updateRelType","dupArray","lastChild","connectFrom","elWithoutType","currEl","childEl","isInAnohterRelation","deleteDuplicityInRelTree","fatherWithouType","getElementsWithoutType","elementConsitencyTree","elementConsistencyIndex","promiseArr","getRelationBTypes","unshift","returnEl","isElementUseless","isRelationShareType","ontoElement","addToProperty","areChildrenInBranchUseless","lastRel","lastDirection","lastElement","allBranchBtypes","currentRelation","getConnectRelation","childRel","consistencyIndex","consistencyTree","elementTypes","elementConsistencyRules","checkDuplicity","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","transform","fatherOfFather","Layout","props","svg","setState","eventController","state","iframeURL","getIframeURL","fullSize","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","width","height","display","position","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","fullSizeSvg","addClass","removeClass","handleChangeName","fadeTo","slideUp","svgBlob","Blob","createObjectURL","handleDownloadSchema","ontoSchema","getOntoSchema","fileDownload","data-toggle","data-target","disabled","data-dismiss","confirm","placeholder","onChange","lenght","onClickDownloadSchema","elNames","role","TypeButtons","refs","createRef","Math","random","ref","val","relFrom","relTo","download","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.a3a45ce4.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 304,\n\t\"./locale.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 659;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 795;","var map = {\n\t\"./N3Lexer\": 197,\n\t\"./N3Lexer.js\": 197,\n\t\"./N3Parser\": 198,\n\t\"./N3Parser.js\": 198,\n\t\"./N3Store\": 359,\n\t\"./N3Store.js\": 359,\n\t\"./N3StreamParser\": 360,\n\t\"./N3StreamParser.js\": 360,\n\t\"./N3StreamWriter\": 361,\n\t\"./N3StreamWriter.js\": 361,\n\t\"./N3Util\": 199,\n\t\"./N3Util.js\": 199,\n\t\"./N3Writer\": 200,\n\t\"./N3Writer.js\": 200\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 823;","import $ from 'jquery';\r\nexport default class MainController{\r\n    \r\n    ontologyURL  = \"http://lod2-dev.vse.cz/ontology/puro#\"; \r\n    ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\"\r\n\r\n    constructor()\r\n    {\r\n        \r\n        let jsonData;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"rules.json\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function(json) {\r\n                jsonData = json;\r\n            }\r\n        });\r\n        \r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData)); \r\n        const windowUrl = new URL(window.location.href);\r\n        this.modelId = windowUrl.searchParams.get(\"model\");\r\n    }\r\n\r\n    debug (element, text)\r\n    {\r\n        console.log([JSON.parse(JSON.stringify(element)), text])\r\n    }\r\n\r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    getQuestion(labelEL, key)\r\n    {\r\n        \r\n        for (let q of this.rulesJson.questions)\r\n        {\r\n            if (q.type === key)\r\n            {\r\n                \r\n                const replace = typeof labelEL === \"string\" ? labelEL : labelEL.label; \r\n                return q.question.replace(\"VAL\", replace); \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            console.log(unfinishedType)\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", unfinishedType.elLabel).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            const preposition = this.isSameCaseInsensitive(unfinishedType.key, \"connect\") ? \" to \" : \" of \";\r\n            return \"What is \" + unfinishedType.key + preposition + unfinishedType.elLabel +\"?\";\r\n        }\r\n\r\n    }\r\n\r\n    countBTypesInTree(tree)\r\n    {\r\n        let index = 0; \r\n        for (let node of tree)\r\n        {\r\n            if (this.delUri(node.type.value) === \"BType\")\r\n            {\r\n                index ++; \r\n            }\r\n        }\r\n       \r\n        return index; \r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n     getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n      }\r\n\r\n    isSameCaseInsensitive(text, other) {\r\n        return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;\r\n    }\r\n\r\n    getOpositeDirection (direction)\r\n    {\r\n        return  direction = direction === \"from\" ? \"to\" : \"from\"; \r\n    }\r\n}","import $ from 'jquery';\r\nimport MainController from './MainController';\r\n\r\n\r\nexport default class RdfController extends MainController {\r\n    \r\n    constructor() {\r\n        super(); \r\n        this.rdf = require('rdflib');\r\n        let puro ;\r\n        \r\n        const modelURL = this.rulesJson[\"modelURL\"].replace(\"MODELID\", this.modelId)\r\n        // puroOutput.xml\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url:   modelURL,\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n          \r\n                this.puroXML = xml;\r\n                puro = xml; \r\n            },\r\n            error: function (jqXHR, textStatus, errorThrown) {\r\n             alert(document.referrer)\r\n             if (jqXHR.statusText.includes(\"Failed to execute\"))\r\n             {\r\n                alert(\"You are redirected from insecured website! \\nPlease add this site to exceptions in broswer to let it work.\\n Settings -> privacy and securtity -> web settings -> insecure content -> add [*.]tomiaro.github.io\"); \r\n             }\r\n             else\r\n             {\r\n                alert(\"There is the problem to load serialized PURO model! \\n\" + errorThrown );\r\n             }\r\n             window.location.replace(document.referrer); \r\n            }\r\n        });\r\n        \r\n        this.puroXML = puro; \r\n     \r\n    }\r\n\r\n    // get elements connect to relator\r\n    getRelatorBtype  (relator, fromUri) \r\n    {\r\n            const query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n    }\r\n\r\n    // get elements related to B-Relation\r\n    findBTypeRelation (fatherElement, returnArr,endCall)  \r\n    {       \r\n\r\n            const elementsUri = fatherElement.uri.value;\r\n            const query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label .         \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                console.log(JSON.parse(JSON.stringify(result)));\r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n        // get children of the element\r\n        findBTypeChild  (fatherElement, returnArr,endCall) \r\n        {\r\n                const elementsUri = fatherElement.uri.value;\r\n                \r\n                const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelation}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, result => {  \r\n                    this.debug(result);\r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                \r\n                    if (result.length > 0)\r\n                    {\r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        }\r\n                    }\r\n                    else\r\n                    { \r\n                      \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                });          \r\n             }\r\n\r\n             //get all entities from PURO model\r\n             getFullPath ()  \r\n             {\r\n                 const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri} ?child a ?childType . ?child ?childRel ?uri . } \r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                     FILTER NOT EXISTS {?uri puro:instanceOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  this.sparqlQuery(query, result => {\r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                  \r\n                      this.deleteDuplicity(result,[\"valuation\", \"connect\", \"childType\", \"child\", \"childRel\"]);\r\n                      this.recursiveFindChild(0,result,[], lastResult => {\r\n                             lastResult = this.deleteDuplicityInFinal(lastResult);\r\n                             lastResult = this.uniquePropertie(lastResult);\r\n                             resolve(lastResult);\r\n                     });\r\n                 });\r\n             });\r\n             }\r\n\r\n             // delete doubled properties \r\n             uniquePropertie (elements)\r\n             {\r\n                for (let element of elements)\r\n                {\r\n                    for (let prop in element)\r\n                    {\r\n                        if (Array.isArray(element[prop]))\r\n                        {\r\n                            element[prop] = element[prop].filter(function(item, pos) {\r\n                                return element[prop].indexOf(item) === pos;\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             deleteDuplicityInFinal (elements)\r\n             {\r\n                for (let i = 0; i < elements.length; i++) {\r\n                    for (let j = 0; j < elements.length; j++) {\r\n                        if (elements[i].uri.value === elements[j].uri.value && i !== j)\r\n                        {\r\n                            for (let property in elements[i])\r\n                            {\r\n                                if (Array.isArray(elements[i][property]))\r\n                                {\r\n                                   elements[j][property] = elements[j][property].filter(e => e !== elements[i][property]); \r\n                                   elements[i][property] = elements[i][property].concat(elements[j][property]); \r\n                                }\r\n                            }\r\n\r\n                            elements.splice(j, 1);\r\n                        }            \r\n                    }   \r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             recursiveFindChild (i, result, bTypeTree,lastCall, type)\r\n             {      \r\n                 if(i >= result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        });\r\n                     }\r\n                     else\r\n                     {\r\n                        this.findBTypeChild(result[i],bTypeTree,  final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        });\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             // prepare sparql query\r\n             sparqlQuery (sparql, callback)  {\r\n                const puroXML = new XMLSerializer().serializeToString(this.puroXML);\r\n               \r\n                const store = this.rdf.graph();\r\n                const contentType = 'application/rdf+xml';\r\n                const baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                const rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n            // get elements connected to B-Relation\r\n            getRelationBTypes (relationUri) \r\n            {\r\n                let query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    this.sparqlQuery(query, (result) => {\r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            // get all B-Relations\r\n            getRelations  () \r\n            {\r\n                const query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation} \r\n                  FILTER NOT EXISTS{?to a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?from a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?to a puro:BValuation}\r\n                  FILTER NOT EXISTS{?from a puro:BValuation}\r\n                  ?to a ?toType . \r\n                  ?from a ?fromType .\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            // get linked element\r\n            findRelation  (elementUri) {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            // initalization\r\n            async firstFind  ()  {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //delete duplicity in results\r\n            deleteDuplicity  (result, properties) {\r\n                let duplicity;\r\n                let checkArr = []; \r\n                 \r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class OntoModelController extends MainController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    \r\n      \r\n    // Create element in OntoModel \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction, elName, nameWasChange, ontoUri, branchIndex, origUri) => \r\n    {\r\n    \r\n        if (this.getOntoElement(this.ontoUri + elName) === false)\r\n        {\r\n            let elPuroType;\r\n            let elLabel;\r\n            let elUri; \r\n            nameWasChange = nameWasChange === undefined ? false : nameWasChange;\r\n            origUri = origUri === undefined ? \"\" : origUri;\r\n            if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n            {\r\n\r\n                elPuroType = false;\r\n                elLabel = elName;\r\n                elUri = this.ontoUri + elName; \r\n\r\n            }\r\n            else\r\n            {\r\n                elPuroType = puroType;\r\n                elLabel = nameWasChange ? elName : label; \r\n                elUri = uri; \r\n            }\r\n\r\n            if (this.getOntoElement(elUri) === false)\r\n            {\r\n                this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: [relationName], direction: [direction], from: [undefined], to:[undefined],type:\"Class\", branchIndex: [branchIndex], origUri:origUri});\r\n            }    \r\n        }\r\n        else\r\n        { \r\n            if (nameWasChange) this.updateOntoModel(uri, \"label\",elName);\r\n            this.updateOntoModel(uri, \"fromRelation\",relationName);\r\n            this.updateOntoModel(uri, \"direction\",direction);\r\n            this.updateOntoModel(uri, \"branchIndex\",branchIndex);\r\n        }\r\n        console.log(this.ontoModel)\r\n        return this.ontoModel; \r\n    }\r\n\r\n    // Checks if relation has defined connected elements\r\n    isRelationComplete (relation)\r\n    {\r\n        if (relation.type === \"relation\" && relation.from.length > 0 && relation.to.length > 0)\r\n        {\r\n            return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    // gets the most genereral entity to input entity \r\n    getCardinalElement (element, superType)\r\n    {\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.from[0] === element && superType === false)\r\n            {\r\n                return node.to[0]; \r\n            }\r\n            else if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.to[0] === element && superType === true)\r\n            {\r\n                return node.from[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n    getElementByProperty (property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[property] === value)\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    // get another element which is connect to input element \r\n    getReletadELement (element, relationName)\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && (node.from.includes(element.uri) || node.to.includes(element.uri)) && this.isRelationComplete(node))\r\n            {\r\n                let relatedElement; \r\n                if (node.from.includes(element.uri)) \r\n                {\r\n                    relatedElement = node.to[0];\r\n                }\r\n                else\r\n                {\r\n                    relatedElement = node.from[0];\r\n                } \r\n                relatedElement = this.getOntoElement(relatedElement);\r\n                if (relatedElement.fromRelation.includes(relationName))\r\n                {\r\n                    return relatedElement; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    // add relationship into the model\r\n    addRelation = (type, from, to, uri,label, fromType, toType) => \r\n    {\r\n        uri = uri === undefined ? this.ontoUri.slice(0,-1) + \"/relation/\"+type+\"/\"+this.delUri(from)+this.delUri(to) : uri; \r\n        fromType = fromType === undefined ? [] : [fromType];\r\n        toType = toType === undefined ? [] : [toType]; \r\n        from = from === undefined || \"\" || from.length === 0 ? [] : [from];\r\n        to = to === undefined || \"\" || to.length === 0 ? [] : [to];\r\n        \r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && el.from.includes(from) && el.to.includes(to))\r\n            {\r\n                return this.ontoModel;\r\n            }\r\n        }\r\n\r\n\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from: from, to: to,uri:uri, label:label, fromType: fromType, toType: toType, fromRelation: []});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    // update element in the model\r\n    updateOntoModel = (elementsUri, property, value, duplicity = true) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    if (duplicity === true || !node[property].includes(value))\r\n                    {\r\n                        node[property].push(value);\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if (duplicity === true || node[property] !== value)\r\n                    {\r\n                        node[property] = value;\r\n                    } \r\n                }\r\n                return this.ontoModel;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // add property value to element\r\n    addToProperty (uri, property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                 \r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    node[property].push(value); \r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    //get relation which is element connect to\r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n        \r\n       \r\n        let returnArr = []; \r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            let nextRel = false;\r\n            if (Array.isArray(node[direction]))\r\n            {\r\n                nextRel = node[direction].includes(uri) ? true : false; \r\n            }\r\n\r\n        \r\n            if (node[\"type\"] === \"relation\" && nextRel === true)\r\n            {\r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" &&  (node[\"from\"].includes(uri) || node[\"to\"].includes(uri)))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n\r\n    getElementsByOntoType = (type, origin) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType && (origin === undefined || node.fromRelation.includes(origin)))\r\n            {  \r\n                result.push(node.uri);\r\n            }\r\n       }\r\n       return result; \r\n\r\n    }\r\n\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n\r\n    getRelation(from, to)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.from.includes(from) && node.from.includes(to))\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // get last element in the branch\r\n    getLastElementUri = (origin, direction, branchIndex) => \r\n    {\r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n            for (let j = 0; j < this.ontoModel[i].fromRelation.length; j++) {\r\n               \r\n                if ((this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].branchIndex.includes(branchIndex) && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\"))\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\" && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && direction === undefined && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri; \r\n                }\r\n                else if(origin === undefined && direction === undefined  && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    // get last element in relation row\r\n    getElementInRelRow (lastElUri)\r\n    {\r\n        \r\n        const relElements = this.getElementInRelation(lastElUri,\"*\",\"from\",false); \r\n        if (relElements.length === 0)\r\n        {\r\n            return lastElUri;\r\n        }\r\n        \r\n        const fatherChildren = this.getElementInRelation(relElements[0].element.uri,\"*\",\"to\",this.getOntoElement(lastElUri).ontoType); \r\n\r\n        return fatherChildren[0].element.uri; \r\n\r\n    }\r\n\r\n\r\n    getLastElement = (origin, direction) =>\r\n    {\r\n        const uri = this.getLastElementUri(origin, direction);\r\n        return this.getOntoElement(uri); \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // selects the relation elements for event controller processing\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, lastEl, puroType, isElInstance, ruleKey, nameWasChange, branchesCount) => \r\n    {\r\n  \r\n        const ontoEl = this.getOntoElement(selectedUri);\r\n   \r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false && isElInstance === false && (element !== false || ontoEl !== false))\r\n        {    \r\n           \r\n            let father;\r\n            let passEl; \r\n            if (puroType === \"superType\")\r\n            {\r\n                father = this.ontoUri + elName;\r\n                passEl = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = this.ontoUri + elName;    \r\n                father = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else\r\n            {\r\n\r\n                if (element !== false)\r\n                {\r\n                   \r\n                    father = element.father[0] === undefined ? element.uri.value : element.father[0];\r\n                   \r\n                }\r\n                else\r\n                {\r\n                    father = ontoEl.uri;\r\n                }\r\n                passEl = this.ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if (relationUri === null)\r\n        {\r\n            if (element.father.length > 0)\r\n            {\r\n\r\n                return [element.father[0], element.uri.value];\r\n            }\r\n            else return false; \r\n            \r\n        }\r\n        else if (puroType.includes(\"elementSelection\") || (element !== false && this.getOntoElement(element.father[0]) !== false))\r\n        {   \r\n            let elementFather = \"foundFather\" in element ? element.foundFather : this.getOntoElement(element.father[0]);\r\n            if ((puroType.includes(\"invert\") || !puroType.includes(\"elementSelection\")) && !puroType.includes(\"classSelection\"))\r\n            {\r\n \r\n                return [element.uri.value, elementFather.uri];\r\n            }\r\n            else\r\n            {\r\n                return [elementFather.uri,element.uri.value];\r\n            \r\n            }\r\n        }\r\n        else if((addRulesLenght === 0 && lastEl === true) || element === false || isElInstance === true)\r\n        {\r\n            let lastRelElement = this.getLastElement(relationUri);\r\n            lastRelElement = this.getOntoElement(this.getElementInRelRow(lastRelElement.uri))\r\n          \r\n            const passEl = (element === false || isElInstance === true) ? this.ontoUri + elName : selectedUri;\r\n\r\n            let lastElUri = this.getLastElementUri(relationUri,ruleKey, branchesCount);\r\n            lastElUri = this.getElementInRelRow(lastElUri); \r\n    \r\n            if (lastRelElement !== false && (lastRelElement.direction[lastRelElement.direction.length - 1] !== ruleKey || branchesCount > 1) && addRulesLenght === 0)\r\n            {\r\n             \r\n                if (lastElUri !== false && !this.isRelationExist(lastElUri,passEl) &&  this.getOntoBranch(relationUri, ruleKey).length > 1)\r\n                {\r\n                    return [lastElUri, passEl];\r\n                }\r\n              \r\n                this.updateOntoModel(relationUri,ruleKey,passEl, false);\r\n                return relationUri; \r\n            }\r\n            else if (element === false || lastRelElement !== false || isElInstance === true)\r\n            {\r\n                \r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n        \r\n    }\r\n\r\n    checkDuplicity (label) \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes (elUri, direction, ontoType) \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n        for (let rel of rels)\r\n        {\r\n          if (rel.ontoType === ontoType || (ontoType === \"Generalization\" && rel.ontoType.includes(\"memberOf\")))\r\n          {\r\n              const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType === \"Relator\")\r\n          {\r\n            types.push(rel.ontoType); \r\n          }\r\n          else if (ontoType === false)\r\n          {\r\n            const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n            elements.push(el);\r\n            types.push(this.getElementOntoType(el)); \r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    getElementsFromBranch(element)\r\n    {\r\n\r\n        let returnArr = [element];\r\n        let el = element;\r\n    \r\n        while (this.getCardinalElement(el,true) !== false)\r\n        {   \r\n            el = this.getCardinalElement(el, true);\r\n            returnArr.push(el);\r\n        }\r\n\r\n        return returnArr; \r\n    }\r\n\r\n    getElementInRelation(elementUri, relationType, direction, ontoType)\r\n    {\r\n        let returnArr = [];\r\n        const all = relationType === \"*\" ? true : false; \r\n        ontoType = ontoType === undefined || false ? false : ontoType; \r\n\r\n        for (let relation of this.ontoModel)\r\n        {\r\n     \r\n            if (relation.type === \"relation\" && (relation.ontoType === relationType || all) && relation[this.getOpositeDirection(direction)].includes(elementUri))\r\n            {   \r\n                let el = this.getOntoElement(relation[direction][0]);\r\n         \r\n                if (ontoType === false || ontoType === el.ontoType)\r\n                {\r\n                    returnArr.push({element : el, relationType: relation.ontoType}); \r\n                } \r\n            }\r\n        }\r\n        return returnArr; \r\n    }\r\n\r\n    isRelationExist(el1, el2)\r\n    {\r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && ((el.from === el1 && el.to === el2) || (el.from === el2 && el.to === el1)))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoBranch(relation, key, branchIndex)\r\n    {\r\n        let returnArr = [];\r\n        branchIndex = branchIndex === undefined ? false : branchIndex;\r\n        for (let el of this.ontoModel)\r\n        {\r\n            for (let index in el.fromRelation)\r\n            {\r\n                if (el.fromRelation[index] === relation && el.direction[index] === key && (branchIndex === false || el.branchIndex.includes(branchIndex)))\r\n                {\r\n                    returnArr.push(el);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n    \r\n    connectToBranchElement(relation, key, selectedEl)\r\n    {\r\n\r\n        const question =  \"To which element is the \" + this.delUri(selectedEl.uri.value) + \" connected?\";\r\n\r\n        const firstEl = (this.getOntoBranch(relation, key)[0]);\r\n        const lastEl = this.getLastElement(relation, key);\r\n\r\n        if (firstEl === undefined || lastEl === false)\r\n        {\r\n            return false\r\n        }\r\n        else\r\n        {\r\n            \r\n            return this.createButtons([firstEl.label, lastEl.label],question, \"nextBranchElements\", false, \"\");\r\n        }\r\n\r\n    }\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n}\r\n\r\n","import MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph  (ontoModel) \r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to[0]) !== false && this.findLabel(node.from[0]) !== false) {\r\n                if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from.length > 0 && node.to.length > 0) \r\n                    {\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key] ? '\"'+node.fromType[key][1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\";\r\n                        }\r\n                        \r\n                        for (let key in node.to)\r\n                        {\r\n                            graphCommand += node.label +\" \"+ (node.toType[key] ? '\"'+node.toType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key]  ? '\"'+node.toType[key][1]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + \" : <<Mediation>>\\n\"; \r\n                        }\r\n                      \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    const relationSpec = this.getRelationSpec(node.ontoType);\r\n                    if (node.from.length === node.to.length)\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0] + (node.toType[key] ? '\"'+node.toType[key]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            let base = this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0];\r\n                            \r\n                            for (let toKey in node.to)\r\n                            {\r\n                                graphCommand += base + (node.toType[toKey] ? '\"'+node.toType[toKey]+'\"' : \"\") + \" \" + this.findLabel(node.to[toKey]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n    \r\n    getRelationSpec (ontoType)\r\n    {\r\n        for(let rel of this.rulesJson.relations)\r\n        {\r\n            \r\n            if (ontoType in rel)\r\n            {\r\n                \r\n                const normRelType = rel[ontoType]; \r\n                const showType = \"showType\" in rel && rel[\"showType\"] === true ? true : false;  \r\n                let code; \r\n                switch(normRelType.toLowerCase())\r\n                {\r\n                    case \"arrowline\": code = \" <|-- \";  \r\n                        break; \r\n                    case \"simpleline\": code = \" -- \"; \r\n                        break; \r\n                    case \"simplearrow\": code =\" --> \"\r\n                        break; \r\n                    case \"dashedline\": code = \" .. \"; \r\n                        break; \r\n                    case \"composition\": code = \" *-- \"; \r\n                        break; \r\n                    case \"aggregation\": code = \" o-- \"; \r\n                        break; \r\n                    default:  code = \" -- \"; \r\n                }\r\n            \r\n                return [code, showType]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n     \r\n    ruleSelection (rules, key, element, previousElName, rule, isElementInstance, relationLabel, countBtypes)\r\n    {\r\n        let commands; \r\n        let offerTypes;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            console.log(rules)\r\n            commands = this.getSpecificRule(rules,key, false, countBtypes);\r\n            offerTypes = commands.offer;  \r\n        }\r\n\r\n        if (element !== false)\r\n        {\r\n            let additionalQuestion = \"\";\r\n\r\n            if (element.connect.length > 1)\r\n            { \r\n                additionalQuestion = \"\\n \" + this.getQuestion(relationLabel, \"relSpecific\");\r\n            }\r\n            \r\n            if (isElementInstance === true)\r\n            {\r\n                needElName =true;\r\n\r\n                question = this.getQuestion(element.label.value, \"instance\") + additionalQuestion;\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n\r\n                question = this.getQuestion(element.label.value, \"BType\") + additionalQuestion;\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            needElName = true;\r\n            question = this.getQuestion(previousElName, \"bTypeChild\");\r\n\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n\r\n    moreThanOneRule (ontoController, element,minCount,maxCount, check)\r\n    {\r\n        const elInRelation = ontoController.getElementInRelation(element.uri,\"*\",\"from\",false)[0]; \r\n        const childrenCount = ontoController.getElementInRelation(elInRelation.element.uri,elInRelation.relationType,\"to\", element.ontoType).length;\r\n        if (childrenCount < maxCount)\r\n        {\r\n            const types = childrenCount < minCount ? [element.ontoType] : [element.ontoType, \"None\"]\r\n            check.push({key: \"subType\", types: types, element: elInRelation.element.uri, rule:{type:[element.ontoType],question:this.getQuestion(elInRelation.element,\"moreThanOne\")}}); \r\n        }\r\n        return check; \r\n\r\n    }\r\n\r\n    elementConsistencyRules (element,  ontoController)  \r\n    {\r\n            let rules = this.rulesJson[element.ontoType];    \r\n            let check = []; \r\n\r\n\r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Generalization\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Generalization\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n            \r\n            for (let rule of rules)\r\n            {\r\n             \r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes, ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes,ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes, ontoController);\r\n                if (rule.key === \"moreThanOne\")\r\n                {\r\n                    check = this.moreThanOneRule(ontoController,element,rule.minCount,rule.maxCount,check);\r\n                }\r\n            }\r\n\r\n\r\n            if ((check.length > 0 && check[0].types.includes(\"Relator\") && check[0].types.includes(\"None\")))\r\n            {\r\n                check.splice(0, 1);  \r\n            }\r\n\r\n            for (let i = 0; i < check.length; i++) {\r\n                check[i][\"elLabel\"] =  ontoController.getOntoElement(check[i].element).label;  \r\n            }\r\n\r\n\r\n\r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection (rule,elTypes,key,element,check,rules,allTypes, ontoController) \r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                \r\n                const suffix = key[key.length - 1] === \"e\" ? \"d\" : \"ed\";\r\n                const additionalRules =  this.getSpecificRule(rules, key + suffix, true);\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n                }\r\n                else \r\n                {\r\n                    if (additionalRules !== false)\r\n                    {\r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                                if (\"moreThanOne\" in addRule && addRule[\"moreThanOne\"] === true && elTypes.length < 2)\r\n                                {\r\n                                    check = this.moreThanOneRule(ontoController,element,addRule.mincCountount,addRule.maxCount,check);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n    \r\n        if (type in rule)\r\n        {\r\n      \r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                \r\n                for (let index in check)\r\n                {\r\n                  \r\n                    if (check[index].key === type && check[index].element === element.uri)\r\n                    {\r\n                        check.splice(index, 1);\r\n                    }\r\n                }\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n\r\n        }\r\n    \r\n        return check; \r\n       \r\n    }\r\n\r\n    numberOfRuleStep (relationType, key, bTypeNumber)\r\n    {\r\n        const rule = this.getSpecificRule(this.rulesJson[relationType], key, false, bTypeNumber);\r\n        let indexCount = 0; \r\n\r\n        for (let key in rule)\r\n        {\r\n            if (!isNaN(key))\r\n            {\r\n                indexCount ++; \r\n            }\r\n        }\r\n\r\n        return indexCount; \r\n    }\r\n\r\n    getSpecificRule (rules, key, moreThanOne, bTypeNumber)\r\n    {\r\n        let addRules = [];\r\n        \r\n        bTypeNumber = bTypeNumber === undefined ? false : bTypeNumber.toString(); \r\n        moreThanOne = moreThanOne === undefined ? false : moreThanOne; \r\n\r\n        if (bTypeNumber !== false)\r\n        {\r\n            for (let node of rules)\r\n            {\r\n                if (node.key === key &&  (\"bTypeNumber\" in node) && node.bTypeNumber.includes(bTypeNumber))\r\n                {\r\n                    \r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                     \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (moreThanOne === false && addRules < 1)\r\n            {\r\n                addRules = this.findSimpleRule(rules,key,moreThanOne, true);\r\n                if (addRules.length === 1 && moreThanOne === false) return addRules[0]; \r\n            }\r\n        }\r\n        else\r\n        {\r\n          addRules = this.findSimpleRule(rules,key,moreThanOne, false);\r\n          if (addRules.length === 1 && moreThanOne === false) return addRules[0]; \r\n        }\r\n\r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n    findSimpleRule (rules, key, moreThanOne, last)\r\n    {\r\n        const returnArr = []; \r\n        \r\n        for (let node of rules)\r\n        {\r\n            \r\n            if (node.key === key && (last === false || !(\"bTypeNumber\" in node))) \r\n            {\r\n                if (moreThanOne === true)\r\n                {\r\n                    returnArr.push(node);\r\n                }\r\n                else\r\n                {   \r\n                    return [node]; \r\n                }   \r\n            }\r\n        }\r\n\r\n        return returnArr; \r\n\r\n\r\n\r\n    }\r\n\r\n    getAdditionalRule (rule, selectedType, index)\r\n    {\r\n        if (rule !== false && index.toString() in rule && selectedType in rule[index])\r\n        {\r\n            return rule[index][selectedType]; \r\n        }\r\n        \r\n        return [];\r\n    \r\n    }\r\n\r\n\r\n    commonRuleSelection (element, fathers,start, ontoModel, fatheFound, addNone) \r\n    {\r\n\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        let rules = \"commonRules\";\r\n        let types = \"fatherOnto\";\r\n \r\n        let type = \"elementSelection\"; \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        if (fatheFound)\r\n        {\r\n            types = \"childOnto\";  \r\n            rules = \"specialCasesRules\";\r\n            fatherOnto.push(element.foundFather.ontoType); \r\n        }\r\n        else\r\n        {\r\n            for (let node of ontoModel)\r\n            {\r\n                if (fathers.includes(node.uri)) {\r\n                    fatherOnto.push(node.ontoType);\r\n                }\r\n                \r\n            }\r\n        }\r\n \r\n        for (let rule of this.rulesJson[rules])\r\n        {\r\n           if (start === true && rule[types][0] === \"NoRelation\")\r\n           {\r\n             const question = \"Which type is \"+element.label.value+\"?\";\r\n             return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n           }\r\n           else if ((fatherOnto.some(r=> rule[types].includes(r)) || (rule[types].includes(\"none\"))))\r\n           {\r\n                if ((\"invert\" in rule && rule[\"invert\"] === true) || fatheFound === true)\r\n                {\r\n                    type += \"-invert\"\r\n                }\r\n                \r\n                const offerTypes = JSON.parse(JSON.stringify(rule.offer));\r\n                \r\n                if (addNone === true && !offerTypes.includes(\"None\"))\r\n                {\r\n                    offerTypes.push(\"None\");\r\n                }\r\n                \r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) \r\n            {  \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (this.isSameCaseInsensitive(condition[index + 1],ontoType) || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n}","export default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2] !== undefined && this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","import MainController from './MainController';\r\n\r\nexport default class OntoScheController extends MainController{\r\n \r\n    transform (ontoModel)\r\n    {\r\n        const ontoUmlSchema = this.schemaInit(); \r\n        let relCount = 0; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if(node.type === \"Class\" || node.ontoType.toLowerCase() === \"relator\")\r\n            {\r\n              ontoUmlSchema[\"contents\"].push(this.ontoClassTransformation(node)); \r\n            }\r\n        }\r\n\r\n        for (let node of ontoModel)\r\n        {\r\n          if (node.type === \"relation\" && node.ontoType.toLowerCase() !== \"relator\") {\r\n              let key; \r\n              \r\n              if (node.from.length >= node.to.length)\r\n              {\r\n                 key = \"from\";\r\n              }\r\n              else\r\n              {\r\n                key = \"to\"; \r\n              }\r\n              \r\n              let opositeIndex = 0;\r\n              for (let index in node[key])\r\n              {\r\n                 \r\n                 let fromIndex = key === \"from\" ? index : opositeIndex; \r\n                 let toIndex = key === \"to\" ? index : opositeIndex; \r\n                  \r\n                 ontoUmlSchema[\"contents\"].push(this.relationTransformation(node, relCount, fromIndex, toIndex));\r\n                 relCount += 2;  \r\n                 if (index <= node[key].length)\r\n                 {\r\n                    opositeIndex = index; \r\n                 }\r\n              }\r\n          }\r\n          else if (node.ontoType.toLowerCase() === \"relator\")\r\n          {\r\n            \r\n            let key; \r\n              \r\n            if (node.from.length >= node.to.length)\r\n            {\r\n              key = \"from\";\r\n            }\r\n            else\r\n            {\r\n              key = \"to\"; \r\n            }\r\n            \r\n            let opositeIndex = 0;\r\n\r\n            for (let index in node[key])\r\n            {\r\n              let nodeCopy = JSON.parse(JSON.stringify(node));\r\n              let nodeCopy2 = JSON.parse(JSON.stringify(node));  \r\n\r\n              nodeCopy[\"uri\"] += \"rel1\"\r\n              nodeCopy2[\"uri\"] += \"rel2\"\r\n        \r\n              nodeCopy[\"ontoType\"] = \"mediation\"\r\n              nodeCopy2[\"ontoType\"] = \"mediation\"\r\n              \r\n              if (key === \"from\")\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][index][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][index][1];\r\n\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy2[\"fromType\"] = node[\"toType\"][opositeIndex][0];\r\n                  nodeCopy2[\"toType\"] = node[\"toType\"][opositeIndex][1];\r\n                  nodeCopy2[\"to\"] = [nodeCopy[\"to\"][opositeIndex]];\r\n                }\r\n\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][index]];\r\n                \r\n              }\r\n              else\r\n              {\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy[\"fromType\"] = node[\"fromType\"][opositeIndex][0]; \r\n                  nodeCopy[\"toType\"] = node[\"fromType\"][opositeIndex][1];\r\n                  nodeCopy[\"from\"] = [nodeCopy[\"from\"][opositeIndex]];\r\n                }\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][index][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][index][1];\r\n                \r\n\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][index]];\r\n              }\r\n              \r\n              nodeCopy[\"to\"] = [node.uri];\r\n              nodeCopy2[\"from\"] = [node.uri];\r\n              \r\n              console.log (JSON.parse(JSON.stringify(nodeCopy)))\r\n              console.log (JSON.parse(JSON.stringify(nodeCopy2)))\r\n\r\n              if (!(key === \"to\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy, relCount, 0,0));\r\n                relCount += 2;\r\n              } \r\n              \r\n              if (!(key === \"from\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy2, relCount,0,0));\r\n                relCount += 2; \r\n              } \r\n \r\n              if (index < node[this.getOpositeDirection(key)].length - 1)\r\n              {\r\n                 opositeIndex = index; \r\n              }\r\n              else\r\n              {\r\n                 opositeIndex = false; \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n       \r\n        const isValid = validator(ontoUmlSchema);\r\n\r\n        if (isValid)\r\n        {\r\n          return ontoUmlSchema; \r\n        }\r\n        else\r\n        {\r\n          alert(\"Model is not valid! Check OntoSchemaCotroller!\"); \r\n          return {}; \r\n        }\r\n    }\r\n\r\n    schemaInit ()\r\n    {\r\n        return {\r\n            \"type\": \"Package\",\r\n            \"id\": \"puroConversion\",\r\n            \"name\": null,\r\n            \"description\": null,\r\n            \"contents\": [],\r\n            \"propertyAssignments\": null\r\n            }\r\n    }\r\n\r\n    ontoClassTransformation (ontoClass)\r\n    {\r\n      return  {\r\n            \"type\": \"Class\",\r\n            \"id\": ontoClass.uri ,\r\n            \"name\": ontoClass.label,\r\n            \"description\": null,\r\n            \"properties\": null,\r\n            \"literals\": null,\r\n            \"propertyAssignments\": null,\r\n            \"stereotypes\": [ontoClass.ontoType.toLowerCase()],\r\n            \"isAbstract\": null,\r\n            \"isDerived\": null\r\n            }\r\n    }\r\n\r\n    relationTransformation (relation, relCount, fromIndex, toIndex)\r\n    {\r\n\r\n        if (relation.ontoType === \"Generalization\")\r\n        {\r\n             return {\r\n                \"type\": \"Generalization\",\r\n                \"id\": relation.uri,\r\n                \"name\": null,\r\n                \"description\": null,\r\n                \"general\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.from[fromIndex]\r\n                },\r\n                \"specific\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.to[toIndex]\r\n                },\r\n                \"propertyAssignments\": {\r\n                  \"nonStandardProperty\": null\r\n                }\r\n              };\r\n        }\r\n        else\r\n        {\r\n            return {\r\n              \"type\": \"Relation\",\r\n              \"id\": relation.uri,\r\n              \"name\": null,\r\n              \"description\": null,\r\n              \"properties\": [\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + relCount,\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.from[fromIndex]\r\n                  },\r\n                  \"cardinality\": relation.fromType[fromIndex] === \"\" || undefined ? null : relation.fromType[fromIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                },\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + (parseInt(relCount) + 1),\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.to[toIndex]\r\n                  },\r\n                  \"cardinality\": relation.toType[toIndex] === \"\" || undefined ? null : relation.toType[toIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                }\r\n              ],\r\n              \"propertyAssignments\": {\r\n                \"nonStandardProperty\": null\r\n              },\r\n              \"stereotypes\": [relation.ontoType.toLowerCase()],\r\n              \"isAbstract\": true,\r\n              \"isDerived\": false\r\n            }\r\n        }\r\n    }\r\n}","import RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\nimport OntoSchmeController from './OntoSchemaController.js';\r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();   \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController();\r\n        this.historyController = new HistoryController();\r\n        this.ontoSchemaController = new OntoSchmeController(); \r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;          \r\n        });\r\n\r\n        this.elSettings = {};\r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    //runs when b-relation is selected\r\n    getDefault (firstCall)\r\n    {       \r\n        if (this.relationOrderIndex === this.relations.length || this.relations.length === 0)\r\n        {\r\n            if (firstCall === true)\r\n            {\r\n                \r\n                this.relationTree = this.queryTree;\r\n            \r\n                this.ruleKey = \"from\";\r\n                this.elementUri = this.relationTree[this.relationOrderIndex].uri.value;\r\n                this.relation = {uri:{value: null}};\r\n                return this.ruleController.commonRuleSelection(this.relationTree[this.relationOrderIndex], true,this.ontoController.getOntoModel());\r\n            }\r\n            alert(\"Transformation is comlete!!!\");\r\n            return {buttons: [], title: \"The End\", type: \"end\"};\r\n        }\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n            const question = relation.label.value.charAt(0).toUpperCase() + relation.label.value.slice(1) + \" was typed as a Relator.\"\r\n            return this.createButtons(\"Relator\",question,this.delUri(relation.type.value),false,relation.label.value);\r\n        }\r\n        else\r\n        {\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question =this.getQuestion(relation.label.value, \"bRelation\");\r\n\r\n            return this.createButtons(this.rulesJson.bRelationRules, question,this.delUri(relation.type.value), false, relation.label.value);            \r\n        }\r\n    }\r\n\r\n    // process every PURO entity\r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n        let relationRules; \r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n           \r\n           return this.relationWasSelected(selectedType, elName);\r\n        }\r\n        else if (puroType === \"needFather\") \r\n        {\r\n            if (selectedType.toLowerCase() === \"none\")\r\n            {\r\n                this.selectedEl[\"foundFather\"] = selectedType.toLowerCase();\r\n            }\r\n            else\r\n            {\r\n                this.selectedEl[\"foundFather\"] = this.ontoController.getElementByProperty(\"label\",selectedType);\r\n            }\r\n\r\n            return  this.consistencyCheck(); \r\n        }\r\n        else \r\n        {\r\n            \r\n            let relationEl; \r\n            let additionalRule = []; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            \r\n            if (puroType.includes(\"ontoRelation-save-bRelation\") || puroType.includes(\"material\") )\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"to\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"material\")\r\n                    {\r\n                        // for material relationship -> not implemented \r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                    relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                  \r\n                }\r\n\r\n                if (this.lastElInBranch === \"cPhase-next\")\r\n                {\r\n                   \r\n                    return this.cPhaseHandle();\r\n                }\r\n                else\r\n                {\r\n                    if (Object.keys(this.elSettings).length === 0 && this.lastElInBranch === \"cPhase\")\r\n                    {\r\n                        const updateCardinality = this.updateRelationTypes();\r\n                        if (updateCardinality !== false)\r\n                        {\r\n                            return updateCardinality; \r\n                        } \r\n                        else\r\n                        {\r\n                            return this.cPhaseHandle(); \r\n                        }\r\n\r\n                    }\r\n                    selectedType = this.elSettings.selectedType;\r\n                    puroType = this.elSettings.puroType;\r\n                    elName = this.elSettings.elName;\r\n                    relationEl = this.elSettings.relationEl;\r\n                    additionalRule = this.elSettings.additionalRule; \r\n                    nameWasChange = this.elSettings.nameWasChange;\r\n                }\r\n\r\n            }\r\n            if (!Array.isArray(selectedType) && selectedType.toLowerCase() === \"none\")\r\n            {  \r\n                this.elSettings.selectedType = selectedType; \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                this.additionalRule.key = \"stop\"; \r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n            \r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                this.consistencyExeption.push({uri: this.elementUri, ontoType:selectedType, type: puroType});\r\n            \r\n                return this.consistencyCheck(); \r\n            }\r\n            \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {            \r\n               if ((this.additionalRule.key!== \"stop\" && this.additionalRule.key === undefined && (this.additionalRule.index > 1 || this.ontoController.getOntoBranch(this.relation.uri.value,this.ruleKey, this.relationRuleIndex).length === 0)) && this.relation.uri.value !== null)\r\n               {\r\n\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),selectedType, 1)\r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        this.additionalRule.index = 2; \r\n                        this.additionalRule.rule =  this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree));\r\n                        this.additionalRule.key = selectedType;\r\n                    }\r\n               } \r\n               else if (this.additionalRule.index > 1 && this.additionalRule.key !== \"stop\")\r\n               {\r\n                 additionalRule = this.ruleController.getAdditionalRule(this.additionalRule.rule, selectedType, this.additionalRule.index);\r\n                 if (additionalRule.length > 0)\r\n                 {\r\n                    this.additionalRule.index ++; \r\n                 }\r\n                 else\r\n                 {\r\n                    this.additionalRule.key = \"last\";\r\n                 }\r\n\r\n               }\r\n               \r\n               const el = this.getElementByUri(this.elementUri);\r\n               const isElInstance = el !== false && el.father.length > 0 ? this.isElementInstace(this.getElementByUri(el.father[0])): false ; \r\n               relationEl = this.ontoController.getRelationElements(elName,el , this.elementUri,this.relation.uri.value, additionalRule.length, additionalRule.length === 0, puroType, isElInstance, this.ruleKey, nameWasChange,this.relationRuleIndex);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\", elUri: this.elementUri};\r\n            \r\n               \r\n            \r\n               if ((relationEl === this.relation.uri.value) || this.lastElInBranch === \"cPhase\")\r\n               {\r\n                 const updateRelTypes = this.updateRelationTypes(); \r\n\r\n                if (updateRelTypes !== false)\r\n                {\r\n                    this.lastElInBranch += \"-next\"; \r\n                    return updateRelTypes;\r\n                }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"connect\"\r\n                \r\n\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey, undefined,undefined,undefined,undefined,this.elementUri);\r\n            }\r\n            else \r\n            {\r\n             \r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n              \r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n               \r\n                    elRelTypes = selectedType;\r\n                }\r\n              \r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n                this.elementUri = this.elSettings.elUri;\r\n               \r\n            } \r\n            relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n         \r\n            if (relationRules !== true)\r\n            {\r\n                return Promise.resolve(relationRules); \r\n            }\r\n            \r\n            if (this.valuationArr !== null)\r\n            {\r\n                if (this.valuationArr.length > 0)\r\n                {   \r\n\r\n                    return this.handleValuation();\r\n                \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                   \r\n                    if (this.ruleKey === \"to\" && this.relation.to.length === this.relationRuleIndex)\r\n                    {\r\n                        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value); \r\n\r\n                        if (this.updateRelationTypes() === false && ontoRel.from.length === ontoRel.to.length)\r\n                        {\r\n                            return this.cPhaseHandle();\r\n                        }\r\n                        else\r\n                        {\r\n                            const lastEl = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                            this.ontoController.updateOntoModel(this.relation.uri.value,\"to\",lastEl);\r\n    \r\n                            this.elementUri = lastEl; \r\n                            this.lastElInBranch = \"cPhase\";\r\n    \r\n                            const updateRel = this.updateRelationTypes();\r\n                            if (updateRel === false)\r\n                            {\r\n                                return this.cPhaseHandle();\r\n                            }\r\n                            else\r\n                            {\r\n                                return updateRel;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            } \r\n            const purType = this.selectedEl === false || !(\"type\" in this.selectedEl) ? false : this.delUri(this.selectedEl.type.value);\r\n\r\n            let origUri = undefined; \r\n            if (this.relationTree[this.relationTree.length - 1].uri.value === this.elementUri)\r\n            {\r\n               const ontoEl = this.ontoController.getOntoElement(this.elementUri); \r\n               if (ontoEl === false)\r\n               {\r\n                 origUri = \"first\"\r\n               }    \r\n            }\r\n\r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            purType,this.relation.uri.value,this.ruleKey,elName, nameWasChange, this.ontoUri, this.relationRuleIndex, origUri);\r\n          \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();\r\n                console.log(this.selectedEl)\r\n                this.elementUri = this.selectedEl === false || Array.isArray(this.selectedEl) ? \"\" : this.selectedEl.uri.value; \r\n                \r\n                this.selectedEl = this.elementUri === \"\" ? false : this.selectedEl; \r\n                \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,additionalRule,this.isElementInstace(this.getElementByUri(this.elementUri)), this.relation.label.value);\r\n            }\r\n            else if (this.additionalRule.key === \"last\")\r\n            {   \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                else\r\n                {\r\n                   \r\n                    this.additionalRule.key = \"stop\";\r\n                    return this.consistencyCheck(); \r\n                }\r\n            }\r\n            else\r\n            {\r\n                \r\n                this.additionalRule.key = \"stop\"; \r\n                \r\n                if (this.relation.uri.value !== null && this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                }\r\n        \r\n                return this.consistencyCheck();\r\n                    \r\n                \r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n    cPhaseHandle ()\r\n    {\r\n        if (this.relation[this.ruleKey].length <= this.relationRuleIndex)\r\n        {\r\n            this.relationOrderIndex ++;\r\n            this.setIndexexToDefault();\r\n            return this.getDefault();\r\n        } \r\n        else\r\n        {\r\n            return this.nextTreeBranch(); \r\n        }\r\n    }\r\n\r\n    consistencyCheck ()\r\n    {\r\n       \r\n        let next = this.selectedEl !== false && \"foundFather\" in this.selectedEl ? true : false;\r\n        let addNone = false;\r\n        if (this.elementsWithoutType.length === 0 || !next)\r\n        {\r\n            this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n        }     \r\n       \r\n        if ((this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length) || next)\r\n        {        \r\n           \r\n            \r\n            if (next === true && this.selectedEl[\"foundFather\"] === \"None\")\r\n            {\r\n                this.withoutTypeIndex ++; \r\n            }\r\n\r\n            const element = next ? this.selectedEl : this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);   \r\n\r\n            if (\"needToFindFather\" in element && !next)\r\n            {\r\n                const relationEls = this.ontoController.getOntoBranch(this.relation.uri.value, this.ruleKey, this.relationRuleIndex); \r\n                if (relationEls.length < 2)\r\n                {\r\n                    element[\"foundFather\"] = relationEls[0];\r\n                    next = true; \r\n                    addNone = true;\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    const labels = []; \r\n                    const question = \"To which element is \" + element.label.value + \" connected?\"; \r\n                    this.selectedEl = element; \r\n    \r\n                    for (let el of relationEls)\r\n                    {\r\n                        if (!labels.includes(el.label))\r\n                        {\r\n                            labels.push(el.label);\r\n                        }\r\n                    }\r\n                    labels.push(\"None\");\r\n    \r\n                    return this.createButtons(labels,question,\"needFather\", false, \"\")\r\n                }\r\n\r\n            }\r\n            \r\n            let commonRule = false;  \r\n            if (element !== false)\r\n            {   \r\n                this.withoutTypeIndex ++;\r\n                this.elementUri = element.uri.value;\r\n            \r\n                commonRule = this.ruleController.commonRuleSelection(element,this.getUsableFather(element),this.ruleKey,this.ontoController.getOntoModel(), next, addNone);\r\n            }\r\n\r\n            if (commonRule === undefined)\r\n            {   \r\n                alert(\"Common rule is not defined! Check rules.json\");\r\n                window.location.reload();\r\n            }\r\n            else if (commonRule !== false)\r\n            {\r\n                this.selectedEl = {}; \r\n                \r\n                return commonRule;\r\n            }\r\n        }\r\n\r\n        let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    \r\n        if (unfinishedTypes.length > 0)\r\n        {              \r\n            for (let exeption of this.consistencyExeption)\r\n            {\r\n                for (let index in unfinishedTypes)\r\n                {\r\n                    if(exeption.uri === unfinishedTypes[index].element && unfinishedTypes[index].types.includes(exeption.ontoType) && exeption.type === unfinishedTypes[index].key)\r\n                    {\r\n                        unfinishedTypes.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n    \r\n            if ((unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"Relator\") && unfinishedTypes[0].types.includes(\"None\")) || (unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"None\") && unfinishedTypes[0].types.length === 1))\r\n            {\r\n                unfinishedTypes.splice(0, 1);  \r\n            }\r\n        }\r\n        \r\n        if (unfinishedTypes.length > 0)\r\n        {\r\n            const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n            this.elementUri = unfinishedTypes[0].element;\r\n            return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n        }\r\n        else if (this.relation.uri.value === null)\r\n        {\r\n            return this.getDefault(); \r\n        }\r\n        else\r\n        {\r\n            \r\n            if (this.relation === null)\r\n            {\r\n                this.getDefault(); \r\n            }\r\n            \r\n            if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n            {\r\n                this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n                if (this.valuationArr.length > 0)\r\n                { \r\n                   return this.handleValuation(); \r\n                }\r\n            }\r\n            \r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex && this.ruleKey !== \"from\")\r\n            {\r\n                const rel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n                if (rel.to.length < this.relationRuleIndex)\r\n                {\r\n                    const lastEl = this.ontoController.getLastElement(rel.uri,\"to\");\r\n                    this.ontoController.updateOntoModel(rel.uri, \"to\", lastEl.uri);\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n\r\n                    const cardinalitySet = this.updateRelationTypes(true); \r\n                    if (cardinalitySet !== false) return cardinalitySet; \r\n                }\r\n\r\n\r\n                this.setIndexexToDefault();\r\n                this.relationOrderIndex ++;\r\n                return this.getDefault();\r\n            } \r\n            else\r\n            {\r\n                \r\n                return this.nextTreeBranch(); \r\n            }   \r\n    \r\n        }\r\n    }\r\n\r\n    //checks if there is necessity to update cardinality in relaion ships\r\n    updateRelationTypes ()\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        \r\n        if (ontoRel.to.length > 0 && ontoRel.from.length > 0)\r\n        {\r\n           \r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType.length < ontoRel.from.length)\r\n            {   \r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from[ontoRel.fromType.length],ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType.length < ontoRel.to.length) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n            /*   else if (ontoRel.ontoType === \"Relator\" && !(\"materialExists\" in ontoRel))\r\n            {\r\n                this.ontoController.addToProperty(ontoRel.uri,\"materialExists\", true); \r\n                return this.createButtons([\"yes\", \"no\"], \"is there material\",\"relator-material\",\"sda\",\"sdsad\"); \r\n            } */\r\n            else if (ontoRel.toType.length < ontoRel.to.length || ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                const ontoRelFromN = ontoRel.from.length <= ontoRel.fromType.length ? ontoRel.from.length - 1 :  ontoRel.fromType.length\r\n                const ontoRelToN = ontoRel.to.length <= ontoRel.toType.length ? ontoRel.to.length - 1 :  ontoRel.toType.length\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from[ontoRelFromN],ontoRel.to[ontoRelToN]);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n\r\n        const question = this.getQuestion(this.delUri(this.valuationArr[0].valuation),\"valuations\"); \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n\r\n        return buttons;  \r\n    }\r\n\r\n    // selects next branch in PURO model\r\n    nextTreeBranch () \r\n    {\r\n        if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n        {\r\n         \r\n            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n            if (this.valuationArr.length > 0)\r\n            {\r\n                return this.handleValuation(); \r\n            }\r\n        }\r\n        \r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0 || (this.relationRuleIndex > 1 && this.ruleKey === \"from\"))\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        \r\n\r\n        let relationTypePromise; \r\n\r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex)\r\n            {\r\n               this.ruleKey = this.ruleKey === \"from\" ? \"to\": \"from\"; \r\n               this.relationRuleIndex = 0;\r\n            }   \r\n     \r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n            this.relationRuleIndex ++; \r\n\r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        this.additionalRule.key = undefined;\r\n        this.additionalRule.index = 0; \r\n        this.consistencyExeption = [];\r\n\r\n\r\n        return new Promise(resolve => {relationTypePromise.then((results) => {\r\n            this.valuationArr = null;\r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        });});\r\n    }\r\n\r\n    // get all B-Valuations from the branch \r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let treeEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(treeEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                let connectElement = el.uri.value; \r\n                if (this.delUri(el.type.value) === \"BObject\" || el.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                {\r\n                    const lastTypes = this.rulesJson[\"lastTypes\"];\r\n                    let lastEl = [];\r\n                    for (let type of lastTypes)\r\n                    {\r\n                      lastEl = lastEl.concat(this.ontoController.getElementsByOntoType(type, this.relation.uri.value));\r\n                    }\r\n                    if (lastEl.length > 0) {\r\n                        connectElement = lastEl[0]; \r\n                    }\r\n                }\r\n\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: connectElement, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n\r\n        for (let index in valuations)\r\n        {\r\n            if (this.ontoController.getElementByProperty(\"origUri\",valuations[index].valuation) !== false)\r\n            {\r\n                valuations.splice(index, 1);   \r\n            }\r\n        }\r\n\r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    // create cardinality buttons\r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n  \r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.toT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"to\"};\r\n        });\r\n\r\n        const  labelFromE = this.selectElementsLabel(fromE);\r\n        const labelToE = this.selectElementsLabel(toE);\r\n        \r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    //selects elements label\r\n    selectElementsLabel(element)\r\n    {\r\n         let ontoEl = this.ontoController.getOntoElement(element);\r\n         let label; \r\n         if (ontoEl === false)\r\n         {\r\n             if (element === this.elSettings.elUri)\r\n             {\r\n                label = this.elSettings.elName === \"\" ? this.delUri(element) : this.elSettings.elName; \r\n             }\r\n             else\r\n             {\r\n                 label = this.delUri(element)\r\n             }\r\n         }\r\n         else\r\n         {\r\n            label = ontoEl.label\r\n         }\r\n\r\n\r\n         return label; \r\n    }\r\n\r\n    //checks if cardinality is needed to be set\r\n    isCardinalityNeed (relType)\r\n    {\r\n        for (let rel of this.rulesJson.relations)\r\n        {\r\n             for (let key in rel)\r\n             {\r\n                 if (key === relType && \"cardinality\" in rel)\r\n                 {\r\n                    return rel[\"cardinality\"]; \r\n                 }\r\n             }\r\n        }\r\n\r\n        return true; \r\n    }\r\n   \r\n    //selects relation rules\r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n       \r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        let createCardinality = true; \r\n \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.ruleController.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);    \r\n        }\r\n        else\r\n        {\r\n            return true; \r\n        }\r\n        \r\n        if (relType === \"updated\")\r\n        {\r\n            return true;\r\n        }\r\n        if (rule === false && !relationFlow.includes(\"save\"))\r\n        {\r\n            alert(\"Relation rule is not defined! Check rules.json!\"); \r\n    \r\n        }\r\n        \r\n        if (!relationFlow.includes(\"save\") && (relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1))\r\n        {\r\n           \r\n            if (\"fromT\" in rule && \"toT\" in rule && createCardinality === true && this.isCardinalityNeed(relOntoType))\r\n            {\r\n            \r\n                this.elSettings.relType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.relType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, undefined, \"nazev\", \"\", \"\");\r\n\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            this.ontoController.addRelation(this.elSettings.relType, fromE, toE, undefined, \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map((ruleClass) => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           });\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};        \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    // choose what to do when B-Relation was selected\r\n    relationWasSelected (selectedType, elName) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        elName = elName === \"\" ? this.relation.label.value : elName;\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        \r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, elName);\r\n  \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            \r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    // choose what to do when branch/B-Relation is selected\r\n    handleRelatedElements (elements, origin, ruleKey, rule) \r\n    {\r\n\r\n\r\n        rule = rule === undefined ? this.rulesJson[this.relationType] : rule;\r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1;        \r\n        \r\n        this.debug(this.relationTree, \"tree\")\r\n    \r\n        if (origin === \"relationWasSelected\" || this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value) !== false)\r\n        {\r\n         \r\n            const nextElement = this.getNextElement();\r\n            \r\n            let additionalRule = [];\r\n            let fatherType = \"\"; \r\n            let el = false; \r\n            let bObjectChild = false;\r\n            let prevEl = false; \r\n            let lastEl = null;\r\n            if (Array.isArray(nextElement) && nextElement[1] === false)\r\n            {\r\n               \r\n                prevEl = nextElement[0]; \r\n                fatherType = nextElement[0].ontoType; \r\n                const rdfEl = this.getElementByUri(nextElement[0].uri); \r\n                \r\n                if (rdfEl !== false && rdfEl.child.length > 0)\r\n                {\r\n                    \r\n                    el = this.getElementByUri(rdfEl.child[0]);\r\n                    this.selectedEl = el;\r\n                    bObjectChild = true;\r\n                }\r\n                this.ontoController.updateOntoModel(nextElement[0].uri,\"branchIndex\",this.relationRuleIndex,false);\r\n                \r\n                if ((this.relationRuleIndex > 1 || prevEl.fromRelation.length > 0) && !this.additionalRule.index > 0)\r\n                {\r\n                    this.additionalRule.index ++; \r\n                }\r\n            \r\n            }\r\n            else\r\n            {\r\n                this.selectedEl = nextElement; \r\n        \r\n                if (this.selectedEl !== false)\r\n                {\r\n                    el = this.getElementByUri(this.selectedEl.uri.value);\r\n                    if (el.father.length > 0)\r\n                    {\r\n                      fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                      prevEl = this.ontoController.getOntoElement(el.father[0]);\r\n                    }\r\n                }\r\n\r\n            }\r\n    \r\n            if (fatherType !== \"\" && fatherType !== false)\r\n            {                \r\n                const elements = this.ontoController.getElementsFromBranch(prevEl.uri);\r\n         \r\n                let addIndex = 1; \r\n                let prevAdd = []; \r\n                for (let index in elements)\r\n                {\r\n                    let node = this.ontoController.getOntoElement(elements[index]);\r\n                    if (node.origUri === \"first\")\r\n                    {\r\n                        elements.length = parseInt(index) + parseInt(1); \r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for (let index = elements.length - 1; index >= 0; index--) {\r\n                    let element = this.ontoController.getOntoElement(elements[index])\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),element.ontoType, addIndex);\r\n                   \r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        \r\n                        prevAdd = additionalRule;\r\n                        this.additionalRule.index ++;\r\n                        addIndex = this.additionalRule.index;\r\n                    }\r\n                    else\r\n                    {   \r\n                      \r\n                        if (prevAdd.includes(element.ontoType))\r\n                        {\r\n                            additionalRule = []; \r\n                            break; \r\n                        }\r\n                        else\r\n                        {\r\n                            lastEl = element; \r\n                            this.additionalRule.key = fatherType;\r\n                            additionalRule = prevAdd; \r\n                            break; \r\n                        }\r\n\r\n                    }\r\n\r\n                    if (index === elements.length - 1)\r\n                    {\r\n                        this.additionalRule.key = fatherType;\r\n                        additionalRule = prevAdd; \r\n                    }\r\n                }\r\n       \r\n                if (additionalRule.length > 0)\r\n                {\r\n                   \r\n                    this.additionalRule.rule = this.ruleController.getSpecificRule(rule,ruleKey, this.countBTypesInTree(this.relationTree));\r\n                }\r\n   \r\n            }\r\n            \r\n            \r\n            if (additionalRule.length === 0)\r\n            {\r\n                if (el === false && bObjectChild === true) \r\n                {\r\n                    return this.nextTreeBranch();\r\n                }\r\n                if (origin !== \"relationWasSelected\")\r\n                {\r\n                 \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n\r\n                    this.elementUri = prevEl.uri; \r\n\r\n                    this.lastElInBranch = \"cPhase\";\r\n    \r\n                    const updateRelType = this.updateRelationTypes(true); \r\n                    \r\n                    if (updateRelType === false)\r\n                    {\r\n                        return this.cPhaseHandle(); \r\n                    }\r\n                    else\r\n                    {\r\n                        return updateRelType; \r\n                    }\r\n                    \r\n                }\r\n                else if (origin === \"relationWasSelected\" && (bObjectChild === true || prevEl !== false))\r\n                {\r\n                   this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n                   return this.nextTreeBranch(); \r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = this.selectedEl === false || Object.keys(this.selectedEl).length === 0 ? \"\" : this.selectedEl.uri.value; \r\n                    return this.ruleController.ruleSelection(rule,ruleKey,el,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.isElementInstace(el), this.relation.label.value,this.countBTypesInTree(this.relationTree));\r\n                }\r\n\r\n            }\r\n            else\r\n            {  \r\n                if (el !== false)\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = \"\";\r\n                }\r\n                let lastLabel; \r\n                if (lastEl !== null)\r\n                {\r\n                    this.elementUri = lastEl.uri;\r\n                    lastLabel = lastEl.label;\r\n                }\r\n                else\r\n                {\r\n                    lastLabel = prevEl.label;\r\n                }\r\n                \r\n                return  this.ruleController.ruleSelection(undefined,ruleKey,el,lastLabel,additionalRule,this.isElementInstace(el), this.relation.label.value);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const rule = this.rulesJson[this.relationType];\r\n\r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n\r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.isElementInstace(this.selectedEl), this.relation.label.value,this.countBTypesInTree(this.relationTree)));\r\n        }\r\n\r\n    }\r\n\r\n    deleteDuplicityInRelTree (dupArray)\r\n    {\r\n        let checkArr = dupArray;\r\n        for (let node of this.relationTree)\r\n        {\r\n            for (let child of dupArray)\r\n            {\r\n                if (node.uri.value === child)\r\n                {\r\n                    checkArr = checkArr.filter(e => e !== child); \r\n                }\r\n            }\r\n        }\r\n\r\n        return checkArr;\r\n    }\r\n\r\n    // checks if PURO lement is also in another Branch\r\n    isInAnohterRelation (element)\r\n    {\r\n       let lastChild = null; \r\n       while (element.connect.length === 0 && element.connectFrom.length === 0 && element.child.length > 0 )\r\n       {\r\n         for (let child of element.child)\r\n         {\r\n            child = this.getElementByUri(child);\r\n\r\n            if(!this.isElementInstace(child)) \r\n            {\r\n                element = child; \r\n                break; \r\n            }\r\n            else if (element.child[element.child.length - 1] === child.uri.value && child.child.length ===  0 && this.isElementInstace(child))\r\n            {\r\n                lastChild = child; \r\n            }\r\n         }\r\n\r\n         if (lastChild !== null) \r\n         {\r\n             element = lastChild;\r\n             break; \r\n         }\r\n\r\n       }\r\n\r\n       if ((element.connectFrom.includes(this.relation.uri.value) || element.connect.includes(this.relation.uri.value)) || (element.child.length === 0 && element.connectFrom.length === 0 && element.connect.length === 0))\r\n       {\r\n           return false;\r\n       }\r\n       else\r\n       {\r\n           return true; \r\n       }\r\n    }\r\n\r\n    getElementsWithoutType (element, elWithoutType)\r\n    {\r\n        const currEl = this.getElementByUri(element.uri.value);\r\n        if (currEl.child.length > 0)\r\n        {   \r\n            \r\n            for (let child of currEl.child)\r\n            {\r\n                const childEl = this.getElementByUri(child); \r\n                if ((!this.isElementInstace(childEl) || (childEl.child.length > 1)) && this.ontoController.getOntoElement(childEl.uri.value) === false && !this.isInAnohterRelation(childEl))\r\n                { \r\n                    if (!childEl.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                    {   \r\n                        elWithoutType.push(childEl);\r\n                    }\r\n                    else\r\n                    {\r\n                       \r\n                        const checkArr = this.deleteDuplicityInRelTree(childEl.child);\r\n\r\n                        if (checkArr.length > 0)\r\n                        {\r\n                            for (let uri of checkArr)\r\n                            {\r\n                              \r\n                                const el = this.getElementByUri(uri); \r\n                                let fatherWithouType = this.getUsableFather(el); \r\n                                fatherWithouType = this.deleteDuplicityInRelTree(fatherWithouType);\r\n                                for (let i in fatherWithouType)\r\n                                {\r\n                                    fatherWithouType[i] = this.getElementByUri(fatherWithouType[i]);\r\n                                    fatherWithouType[i][\"needToFindFather\"] = true; \r\n                                }\r\n                                \r\n                                elWithoutType = elWithoutType.concat(fatherWithouType);\r\n                            }\r\n                        }\r\n\r\n                        \r\n                    }\r\n        \r\n                    elWithoutType = this.getElementsWithoutType(childEl,elWithoutType);\r\n                }\r\n\r\n            }\r\n        }\r\n        return elWithoutType; \r\n    }\r\n\r\n    checkElementsInRelationTree (tree) \r\n    {\r\n        let elementsWithoutType = [];\r\n        for (let element of tree)\r\n        {\r\n            elementsWithoutType = this.getElementsWithoutType(element, elementsWithoutType); \r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n      \r\n        promiseArr.push(this.rdfController.getRelationBTypes(relation[key][this.relationRuleIndex]));\r\n\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][this.relationRuleIndex-1]));\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            return result; \r\n        })\r\n   \r\n    }\r\n\r\n    // get next element from puro branch\r\n    getNextElement () \r\n    {\r\n        if(this.relationIndex < 0)\r\n        {\r\n            return false; \r\n        }\r\n\r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]) && this.isElementInstace(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n        \r\n     \r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n           \r\n            if (this.relationTree[this.relationIndex] !== undefined && ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                \r\n                if (this.isRelationShareType(this.getElementByUri(this.relationTree[this.relationIndex].uri.value),this.relation.uri.value,this.relationType))\r\n                {\r\n                    const ontoElement = this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value);\r\n                    \r\n                    this.ontoController.addToProperty(ontoElement.uri, \"fromRelation\", this.relation.uri.value);\r\n                    this.ontoController.addToProperty(ontoElement.uri, \"direction\", this.ruleKey);\r\n                    \r\n                    return [ontoElement, false]; \r\n                }\r\n                else if (this.areChildrenInBranchUseless(this.relationTree[this.relationIndex]))\r\n                {\r\n                    const lastRel = ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1]; \r\n                    let lastDirection = ontoModel[index].direction[ontoModel[index].direction.length - 1]; \r\n\r\n                    if (ontoModel[index].fromRelation.length > 1 && ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1] === ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 2])\r\n                    {\r\n                        lastDirection = this.getOpositeDirection(lastDirection)\r\n                    }\r\n\r\n                    \r\n                    let lastElement = this.ontoController.getLastElementUri(lastRel,lastDirection, undefined ,this.relation.uri);  \r\n                    \r\n            \r\n                    while (this.ontoController.getCardinalElement(lastElement, false) !== false)\r\n                    {\r\n                        lastElement = this.ontoController.getCardinalElement(lastElement,false);\r\n                    }\r\n                   \r\n                    lastElement = this.ontoController.getElementInRelRow(lastElement);\r\n            \r\n                    lastElement = this.ontoController.getOntoElement(lastElement);\r\n\r\n                    const allBranchBtypes = this.ontoController.getOntoBranch(lastRel, lastDirection); \r\n         \r\n                    \r\n                    for (let el of allBranchBtypes)\r\n                    {\r\n                        \r\n                        this.ontoController.addToProperty(el.uri, \"fromRelation\", this.relation.uri.value);\r\n                        this.ontoController.addToProperty(el.uri, \"direction\", this.ruleKey);\r\n                    }\r\n                    \r\n                    return [lastElement, false];  \r\n                }\r\n                else\r\n                {\r\n                    this.relationIndex --;\r\n                    index = 0;  \r\n                    \r\n                }\r\n\r\n            }\r\n            \r\n        }  \r\n    \r\n        returnEl = this.relationTree[this.relationIndex];\r\n\r\n        returnEl = returnEl === undefined ? false : returnEl;\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    isRelationShareType (el, currentRelation, direction)\r\n    {\r\n        const ontoEl = this.ontoController.getOntoElement(el.uri.value) \r\n        if (ontoEl === false || !ontoEl.fromRelation.includes(currentRelation)) return false;\r\n\r\n        direction = direction === \"from\"? \"connect\" : \"connectFrom\"; \r\n        \r\n        let result = [];\r\n\r\n        result = this.getConnectRelation(el,direction,currentRelation, result); \r\n\r\n        if (result.includes(true))\r\n        {\r\n            return true; \r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    getConnectRelation (el, direction, currentRelation, result)\r\n    {\r\n        for (let child of el.child)\r\n        {\r\n            let childEl = this.getElementByUri(child);\r\n            if (childEl[direction].includes(currentRelation))\r\n            {\r\n                result.push(true); \r\n                break; \r\n            }\r\n            else if (childEl.child.length > 0)\r\n            {\r\n              this.getConnectRelation(childEl,direction,currentRelation, result); \r\n            }\r\n        }\r\n        \r\n        return result; \r\n    }\r\n\r\n    areChildrenInBranchUseless (element)\r\n    {\r\n        if (element.childRel.includes(\"http://lod2-dev.vse.cz/ontology/puro#subTypeOf\") && this.relationTree.length > 1)\r\n        {\r\n           return false;\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        if (typeof element !== \"object\") return false;  \r\n\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\" || this.delUri(type) === \"Some_objects\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let consistencyIndex = 0; \r\n        const consistencyTree = []; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node.fromRelation.includes(relation) && node.direction[node.direction.length - 1] === ruleKey && node.branchIndex.includes(this.relationRuleIndex))\r\n            {\r\n            \r\n                consistencyTree.push(node); \r\n            }\r\n        }\r\n\r\n   \r\n       \r\n        if (consistencyTree.length === 0)\r\n        {\r\n            return consistencyTree; \r\n        }\r\n        \r\n        let elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex],this.ontoController);\r\n\r\n        consistencyIndex ++;\r\n\r\n\r\n        while (consistencyIndex < consistencyTree.length && elementTypes.length === 0)\r\n        {\r\n            \r\n            elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex], this.ontoController);\r\n            consistencyIndex ++; \r\n        }\r\n      \r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        if (typeof uri !== \"string\") return false; \r\n\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n\r\n        this.lastElInBranch = false; \r\n\r\n\r\n        this.additionalRule = {key: undefined, rule: {}, index: 1}; \r\n\r\n\r\n        this.consistencyExeption = []; \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n               \r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (typeof record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n  \r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relationRuleIndex = 0; \r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n                console.log(prop)\r\n                console.log(JSON.parse(JSON.stringify(this[prop])))\r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n    getOntoSchema ()\r\n    {\r\n        return this.ontoSchemaController.transform(this.ontoController.getOntoModel());\r\n    }\r\n\r\n    getIframeURL ()\r\n    {\r\n\r\n        return this.rulesJson[\"iframeURL\"].replace(\"MODELID\",this.modelId); \r\n    }\r\n\r\n    fullSizeSvg ()\r\n    {\r\n        let index = 0; \r\n       \r\n        for (let node of this.ontoController.getOntoModel())\r\n        {\r\n            if (node.type === \"Class\")\r\n            {\r\n                index ++; \r\n            }\r\n            \r\n            if (index === 4)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    //get PURO element which is father to the element and is puro B-Type\r\n    getUsableFather (element)\r\n    {\r\n        const returnArr = []; \r\n        for (let node of element.father)\r\n        {\r\n            let father = this.getElementByUri(node);\r\n            if (this.isElementInstace(father) === false) returnArr.push(father.uri.value); \r\n\r\n            while (this.isElementInstace(father))\r\n            {\r\n                for (let fatherOfFather of father.father)\r\n                {\r\n              \r\n                    father = this.getElementByUri(fatherOfFather);\r\n                    if (this.isElementInstace(father) === false)\r\n                    {\r\n                   \r\n                        returnArr.push(father.uri.value); \r\n                    }\r\n                }\r\n                if (returnArr.length > 0) break; \r\n            }\r\n\r\n\r\n        }\r\n        element.father = returnArr; \r\n        return returnArr;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport fileDownload from 'js-file-download';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport Iframe from 'react-iframe';\n\n\n\nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n\n    this.eventController = new EventController();\n    this.state = {\n      svg: \"\", iframeURL: this.eventController.getIframeURL(), fullSize: false \n    };\n    \n    mermaid.initialize({\n      startOnLoad: false,\n      themeCSS: '#extensionEnd { fill: white; } #extensionStart { fill: white; } ',\n    });\n  }\n\n  createGraph = (svg) => {\n\n    this.setState({ svg: svg });  \n  }\n\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"form-group col-md-6\" id=\"puroModelContainer\">\n            <label htmlFor=\"puroModel\">Puro model</label>\n            <div className=\"transformWindow border\" id=\"puroModel\">\n              <Iframe url= {this.state.iframeURL}\n                width=\"607px\"\n                height=\"307px\"\n                id=\"iframePuro\"\n                className=\"myClassname\"\n                display=\"initial\"\n                position=\"relative\"/>\n            </div>\n          </div>\n   \n          <div className=\"form-group col-md-6\" id=\"ontoModelContainer\">\n            <TransformWrapper\n              enablePadding={false}>\n              {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n                <React.Fragment>\n                  <div className=\"tools\">\n                    <label htmlFor=\"ontoModel\">Onto model</label>\n                    <button className=\"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n                  </div>\n                  <div className=\"border\">\n                    <TransformComponent>\n                      <div dangerouslySetInnerHTML={{ __html: this.state.svg }} className=\"transformWindow\" id=\"ontoModel\">\n                      </div>\n                    </TransformComponent>\n                  </div>\n                </React.Fragment>\n              )}\n            </TransformWrapper>\n          </div>\n          <QuestionPart graphCreation={this.createGraph} eventController={this.eventController} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTransform: true, originalName: \"\", nameWasChange: false,\n      buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\", \n    };\n\n    this.eventController = this.props.eventController;\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined) {\n      event.preventDefault();\n    }\n\n    this.eventController.getDefault(true).then(results => {\n      this.setState({ undoActive: false, svgUrl: \"\", buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false });\n    });\n\n  }\n\n  undoClick = () => {\n\n\n\n  }\n\n  handleClick = (selectedType, selectedUri, type) => {\n    let elName = this.state.elName;\n    let undo = false;\n    let setState = true;\n    let nameWasChange = this.state.nameWasChange;\n\n    elName = elName.trim();\n    elName = elName.replace(/ /g,\"_\"); \n\n    if ((elName === \"\" && this.state.changeName === true && type !== \"Undo\") && selectedType.toLowerCase() !== \"none\") {\n      alert(\"Plese write name of the element!\");\n    }\n    else if (elName !== \"\" && !elName.match(/^[A-Za-z0-9-_*<>]+$/)) {\n      alert(\"Please change the name. It contains forbidden characters!\");\n    }\n    else {\n      if (type === \"Undo\") {\n\n        const history = this.eventController.undo();\n        if (history === false) {\n          this.handleSubmit();\n          setState = false;\n        }\n        else {\n          const inputVariables = history.inputVariables;\n          selectedType = inputVariables[0];\n          selectedUri = inputVariables[1];\n          type = inputVariables[2];\n          elName = inputVariables[3];\n          nameWasChange = inputVariables[4];\n\n          undo = true;\n        }\n\n      }\n      elName = elName.replace(/\\s/g, '_');\n\n      if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName)) {\n        alert(\"Element already exists! Please choose different name.\")\n      }\n      else if (setState === true) {\n       \n        this.eventController.nextElement(selectedType, selectedUri, type, elName, nameWasChange).then(results => {\n          \n          if (results === undefined || false) alert(\"Rule is not defined. \\n Check rules.json\")\n\n          if (undo === false) {\n            let properties = (Object.getOwnPropertyNames(this.eventController));\n            let historyRecord = {};\n            for (let prop of properties) {\n              if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\") {\n                if (typeof prop !== 'function') {\n                  historyRecord[prop] = this.assignProp(this.eventController[prop])\n                }\n              }\n            }\n            this.eventController.saveHistory(historyRecord, [selectedType, selectedUri, type, elName, this.state.nameWasChange]);\n          }\n\n          // Set graph\n          let svg = this.eventController.getGraphSvg();\n\n          this.setState({ buttons: results.buttons, type: results.type, title: results.title, undoActive: true, elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange: false });\n\n          if (svg !== false) {\n            this.createGraph(svg);\n\n\n          }\n\n          if (this.state.type.includes(\"end\")) {\n            this.handleDownloadImage();\n          }\n\n        });\n      }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object') {\n      return JSON.parse(JSON.stringify(prop));\n    }\n    else {\n      return prop;\n    }\n\n  }\n\n  createGraph = (chart) => {\n    const cb = svg => {\n      this.setState({ svg: svg });\n      this.props.graphCreation(svg);\n      if (this.eventController.fullSizeSvg())\n      {\n        $(\"#id1\").addClass(\"fullSize\");\n      }\n      else\n      {\n        $(\"#id1\").removeClass(\"fullSize\");\n      }\n\n    };\n\n    mermaid.render(\"id1\", chart, cb);\n  }\n\n  handleChangeName = () => {\n\n\n    this.setState({ changeName: !this.state.changeName });\n    if (this.state.changeName === true) {\n      this.setState({ elName: \"\", nameWasChange: false });\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function () {\n        $(\".changeAlert\").alert('fade');\n      });\n    }\n    else {\n      this.setState({ elName: \"\", nameWasChange: true });\n\n    }\n  }\n\n  handleDownloadImage = () => {\n    const svgBlob = new Blob([this.state.svg], { type: \"image/svg+xml;charset=utf-8\" });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({ svgUrl: svgUrl });\n\n  }\n\n  handleDownloadSchema = () => {\n    const ontoSchema = JSON.stringify(this.eventController.getOntoSchema());\n    fileDownload(ontoSchema, 'ontoSchema.json');\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid text-center questionPart\">\n\n        <button type=\"Submint\" className={this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleSubmit}>\n          Start transformation\n          </button>\n        <div className={this.state.startTransform ? \"d-none\" : \"\"}>\n          <h3 className=\"questionTitle\">{this.state.title}</h3>\n          <div className=\"optionButtons  d-md-block\">\n            <div className=\"btn-group-vertical text-right\">\n              <button id = \"changeNameBtn\" type=\"button\" className=\"btn btn-primary btnModal\" onClick={this.handleChangeName} disabled={this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\") || this.state.type === \"nextBranchElements\" || this.state.type === \"needFather\"}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n              <button id = \"undoBtn\" type=\"button\" className=\"btn btn-primary btnModal\" onClick={() => this.handleClick(undefined, undefined, \"Undo\")} disabled={!this.state.undoActive}>Undo</button>\n              <button id = \"cancelBtn\" type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); }}>Cancel</button>\n            </div>\n          </div>\n          <div className={this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n            <div className=\"input-group inputName\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n              </div>\n              <input placeholder={this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.originalName} type=\"text\" className=\"form-control\" onChange={this.handleChange} value={this.state.elName}></input>\n            </div>\n            <h5 className={this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>\n          </div>\n          <div className=\"divButtons text-center\">\n            <TypeButtons buttons={this.state.buttons} title = {this.state.title} onClickDownloadSchema={this.handleDownloadSchema} svgUrl={this.state.svgUrl} onClick={this.handleClick} type={this.state.type} elNames={this.state.changeName} originalName={this.state.originalName} />\n          </div>\n          <div className=\"alert alert-success col-md-6 mx-auto changeAlert\" role=\"alert\">\n            Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass TypeButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\")) {\n      return (\n        <div className=\"row col-md-5 mx-auto\" key = {Math.random().toString(16).slice(2)}>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>\n          <select ref=\"relFrom\" className=\"col-md-6 mx-auto form-control cardinalitySelect\" >\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"from\";\n            }).map((rel, index) => {\n              return <option key = {index}  value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <select ref=\"relTo\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val, index) => {\n              return val.direction === \"to\";\n            }).map((rel, index) => {\n              return <option key = {index} value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <button className=\"btn btn-success mx-auto questionPart\" onClick={() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button>\n        </div>\n      )\n    }\n    else if (this.props.type.includes(\"end\")) {\n      return (\n        <div className=\"col-md-8 mx-auto\">\n          <a className=\"btn btn-success btnEnd\" href={this.props.svgUrl} download=\"ontoUml-graph.svg\">Download Onto-UML graph</a>\n          <button type=\"button\" className=\"btn btn-success btnEnd\" onClick={() => this.props.onClickDownloadSchema()}>Download Onto-Schema</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"row col-md-6 mx-auto\">\n          {this.props.buttons.map((value, index) => {\n            return <div className=\"col-md-4 mx-auto\" key = {index}>\n              <button key={this.props.uri} type=\"button\" className={value.name.toLowerCase() === \"none\" ? \" btn btn-secondary btnModal\" : \"btn btn-success btnModal\"} onClick={() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || \n              this.props.title.split(\" \").includes(value.name) || (this.props.originalName === \"\" && this.props.buttons.length === 1) || (value.name.toLowerCase() === \"relator\" && this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n            </div>\n          })}\n        </div>\n      )\n    }\n\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return [<Layout />]\n\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}