{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","../node_modules/@trust/webcrypto/src/algorithms sync","model.PNG","controllers/RdfController.js","controllers/MainController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/OntoSchemaController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","RdfController","puro","getRelatorBtype","relator","fromUri","query","Promise","sparqlQuery","result","this","deleteDuplicity","findBTypeRelation","fatherElement","returnArr","endCall","elementsUri","uri","value","length","i","push","bind","findBTypeChild","getFullPath","forEach","node","father","fatherType","fatherTypeRelation","recursiveFindChild","lastResult","bTypeTree","lastCall","type","final","sparql","callback","puroXML","XMLSerializer","serializeToString","turtle","store","rdf","graph","parse","serialize","undefined","err","str","require","create","load","results","execute","getRelationBTypes","relationUri","getRelations","console","log","findRelation","elementUri","firstFind","a","properties","duplicity","checkArr","res","property","index","includes","k","some","concat","split","splice","$","ajax","url","async","cache","dataType","success","xml","MainController","jsonData","json","rulesJson","JSON","stringify","ontoUri","buttons","title","elName","origName","mapButtons","Array","isArray","buttonType","name","originalName","unfinishedType","questions","question","rule","q","qType","key","replace","delUri","element","preposition","isSameCaseInsensitive","tree","object","find","text","other","localeCompare","sensitivity","OntoModelController","addToOntoModel","label","ontoType","puroType","relationName","direction","nameWasChange","branchIndex","origUri","elPuroType","elLabel","elUri","getOntoElement","ontoModel","fromRelation","from","to","updateOntoModel","addRelation","fromType","toType","slice","el","getOntoModel","getElementsRelation","nextRel","getElementOntoType","getElementsByOntoType","origin","changeOrigin","getLastElementUri","j","getLastElement","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","lastEl","ruleKey","moreBranches","passEl","ontoEl","elementFather","lastRelElement","checkDuplicity","getRelatedTypes","rels","elements","types","rel","indexOf","relation","superType","toLowerCase","isRelationComplete","relatedElement","getCardinalElement","selectedEl","firstEl","getOntoBranch","createButtons","ontoModelHistory","ImagController","createGraph","graphCommand","findLabel","relationSpec","getRelationSpec","base","toKey","trim","relations","normRelType","showType","RuleController","ruleSelection","rules","previousElName","queryTree","offerTypes","needElName","getSpecificRule","offer","isElementInstace","elementConsistencyRules","ontoController","check","elTypes","subType","connect","elementConsistencySelection","allTypes","suffix","additionalRules","r","addRule","elementConsAddSelection","moreThanOne","bTypeNumber","addRules","getAdditionalRule","selectedType","toString","commonRuleSelection","fatherOnto","childPuroType","connection","childType","child","childPuro","commonRules","relationType","indexCount","isNaN","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","OntoScheController","ontoUmlSchema","schemaInit","relCount","ontoClassTransformation","opositeIndex","fromIndex","toIndex","relationTransformation","nodeCopy","nodeCopy2","schemas","validator","compile","getSchema","ONTOUML_2","initJson","alert","ontoClass","parseInt","EventController","rdfController","imageController","ImageController","ruleController","historyController","ontoSchemaController","OntoSchmeController","then","elSettings","relationOrderIndex","relationIndex","setIndexexToDefault","valuation","charAt","toUpperCase","bRelationRules","changeElementsProperty","relationWasSelected","additionalRule","relFlow","lastElInBranch","relationRuleIndex","getDefault","nextTreeBranch","relationEl","ontoRelation","lastElUri","updateCardinality","updateRelationTypes","consistencyExeption","consistencyCheck","countBTypesInTree","relationTree","getElementByUri","relType","updateRelTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","purType","getNextElement","elementsWithoutType","checkElementsInRelationTree","withoutTypeIndex","commonRule","window","location","reload","unfinishedTypes","checkElementsConsistency","exeption","createQuestion","getAllTreeValuations","end","ontoRel","createRelCardinalityBtn","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","treeEl","connectElement","lastTypes","getElementByProperty","fromE","toE","relationFlow","fromB","fromT","ruleClass","toB","labelFromE","labelToE","relOntoType","fromEType","toEType","findRule","condition","validity","relationTreePromise","lastLabel","nextElement","bObjectChild","prevEl","rdfEl","getElementsFromBranch","addIndex","prevAdd","withoutType","isElementUseless","elementConsitencyTree","elementConsistencyIndex","promiseArr","all","unshift","m2","returnEl","areChildrenInBranchUseless","lastRel","lastDirection","lastElement","allBranchBtypes","addToProperty","childRel","consistencyIndex","consistencyTree","elementTypes","connectFrom","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","prop","transform","Layout","props","svg","setState","state","eventController","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","src","alt","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","handleChangeName","fadeTo","slideUp","svgBlob","Blob","URL","createObjectURL","handleDownloadSchema","ontoSchema","getOntoSchema","fileDownload","data-toggle","data-target","disabled","data-dismiss","confirm","placeholder","onChange","lenght","onClickDownloadSchema","elNames","class","role","ModalButtons","refs","createRef","ref","filter","val","relFrom","relTo","href","download","Page","ReactDOM","document","getElementById"],"mappings":"6OAAA,IAAIA,EAAM,CACT,WAAY,IACZ,cAAe,KAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,4DCvBpB,IAAIH,EAAM,CACT,YAAa,IACb,eAAgB,IAChB,aAAc,IACd,gBAAiB,IACjB,YAAa,IACb,eAAgB,IAChB,mBAAoB,IACpB,sBAAuB,IACvB,mBAAoB,IACpB,sBAAuB,IACvB,WAAY,IACZ,cAAe,IACf,aAAc,IACd,gBAAiB,KAIlB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,8JCnCpB,SAASY,EAAoBb,GAC5B,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEPQ,EAAoBL,KAAO,WAAa,MAAO,IAC/CK,EAAoBH,QAAUG,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBZ,GAAK,K,oBCRzBU,EAAOC,QAAU,IAA0B,mC,+NCGtBE,EAEjB,aAAe,IAGPC,EAHM,gCAoBdC,gBAAkB,SAACC,EAASC,GAEpB,IAAIC,EAAQ,2RAKJF,EALI,+BAKmCC,EALnC,oBAK+DD,EAL/D,wEAOmBA,EAPnB,QAOmCA,EAPnC,oBAO+DC,EAP/D,0gBAqBZ,OAAO,IAAIE,SAAQ,SAAAV,GACf,EAAKW,YAAYF,GAAO,SAAkBG,IACrCA,EAASC,KAAKC,gBAAgBF,EAAQ,CAAC,eAClC,aAAmBL,EACzBP,EAAQY,UA/CV,KAwDdG,kBAAqB,SAACC,EAAeC,EAAUC,GAGvC,IAAIC,EAAcH,EAAcI,IAAIC,MAChCZ,EAAQ,sTAKFU,EALE,wEAOFA,EAPE,2IAYZ,EAAKR,YAAYF,EAAO,SAAkBG,GAOtC,MAFAA,EAASC,KAAKC,gBAAgBF,EAAQ,CAAC,UAAW,cAAe,SAAU,aAAa,qBAAqB,QAAQ,YAAY,cAEtHU,OAAS,GAahB,OADAJ,EAAQD,GACDA,EATP,IAAK,IAAIM,KAAKX,EACVK,EAAUO,KAAKZ,EAAOW,IACtBV,KAAKE,kBAAkBH,EAAOW,GAAGN,EAAUC,IASrDO,KAAK,KA9FD,KAmGdC,eAAkB,SAACV,EAAeC,EAAUC,GAGhC,IAAIC,EAAcH,EAAcI,IAAIC,MAEhCZ,EAAQ,0XAKmBU,EALnB,8EAOkBA,EAPlB,iYAYsBA,EAZtB,mHAeHA,EAfG,wOAkBGA,EAlBH,qCAoBZ,EAAKR,YAAYF,EAAO,SAAkBG,GAOtC,MAFAA,EAASC,KAAKC,gBAAgBF,EAAQ,CAAC,UAAU,cAAe,SAAU,aAAa,qBAAqB,QAAQ,YAAY,WAAW,eAEhIU,OAAS,GAehB,OADAJ,EAAQD,GACDA,EAXP,IAAK,IAAIM,KAAKX,EACVK,EAAUO,KAAKZ,EAAOW,IACtBV,KAAKa,eAAed,EAAOW,GAAGN,EAAUC,IAWlDO,KAAK,KApJL,KAuJLE,YAAc,WAgBV,OAAO,IAAIjB,SAAQ,SAAAV,GAGlB,EAAKW,YAjBG,o5BAiBgB,SAAkBC,GACtCA,EAAOgB,SAAQ,SAASC,GAElBA,EAAKC,OAAS,GACdD,EAAKE,WAAa,GAClBF,EAAKG,mBAAqB,GAE1BH,EAAI,YAAkB,MAG5BhB,KAAKC,gBAAgBF,EAAO,CAAC,YAAa,UAAW,YAAa,QAAS,aAC3EC,KAAKoB,mBAAmB,EAAErB,EAAO,IAAI,SAAkBsB,GAChDlC,EAAQkC,OAElBT,KAAK,QAxLN,KA4LLQ,mBAAqB,SAACV,EAAGX,EAAQuB,EAAUC,EAAUC,GAEjD,GAAGd,IAAMX,EAAOU,OAGZ,OADAc,EAASD,GACFA,EAGPA,EAAUX,KAAKZ,EAAOW,IACT,aAATc,EAED,EAAKtB,kBAAkBH,EAAOW,GAAGY,EAAW,SAAiBG,GACzDf,IACAV,KAAKoB,mBAAmBV,IAAKX,EAAQuB,EAAUC,EAAU,aAC3DX,KAAK,IAKP,EAAKC,eAAed,EAAOW,GAAGY,EAAW,SAAiBG,GACtDf,IACAV,KAAKoB,mBAAmBV,IAAKX,EAAQuB,EAAUC,EAAUC,IAC3DZ,KAAK,KAlNb,KAyNLd,YAAc,SAAC4B,EAAQC,GACpB,IAAIC,EAAU,EAAKA,QACnBA,GAAU,IAAIC,eAAgBC,kBAAkBF,GAEhD,IAMIG,EANAC,EAAQ,EAAKC,IAAIC,QAIpB,EAAKD,IAAIE,MAAMP,EAASI,EAFX,0BADI,uBAMjB,EAAKC,IAAIG,eAAUC,EAAWL,EAAO,qDAAsD,eAAe,SAASM,EAAKC,GACrHR,EAASQ,KAGEC,EAAQ,KACdC,QAAQ,SAASH,EAAKN,GAC1BA,EAAMU,KAAK,cAAeX,GAAQ,SAASO,EAAKK,GAC7CX,EAAMY,QAAQlB,GACZ,SAASY,EAAKK,GACdhB,EAASgB,aA7OjB,KAwPNE,kBAAoB,SAACC,GAGjB,IAAIlD,EAAQ,kPAKHkD,EALG,+EAOHA,EAPG,+HAYX,OAAO,IAAIjD,SAAQ,SAAAV,GAEhB,EAAKW,YAAYF,GAAO,SAACG,GAIrB,EAAKqB,mBAAmB,EAAErB,EAAO,IAAI,SAAkBsB,GAChDlC,EAAQkC,KACd,mBA/QP,KAuRN0B,aAAe,WAwBX,OAAO,IAAIlD,SAAQ,SAAAV,GACf,EAAKW,YAtBA,61BAsBmB,SAAkBC,GACtCA,EAASC,KAAKC,gBAAgBF,EAAO,CAAE,OAAQ,KAAM,SAAU,WAAY,cAC3EiD,QAAQC,IAAIlD,GACZZ,EAAQY,IACVa,KAAK,QApTT,KAwTNsC,aAAe,SAACC,GACZ,IAAIvD,EAAQ,mOAKPuD,EALO,6CAQZ,OAAO,IAAItD,SAAQ,SAAAV,GACf,EAAKW,YAAYF,GAAO,SAAkBG,GACtCZ,EAAQY,UAnUd,KAyUNqD,UAzUM,sBAyUM,sBAAAC,EAAA,upBAeD,IAAIxD,SAAQ,SAAAV,GACf,EAAKW,YAhBD,0kBAgBoB,SAAkBC,GACtCZ,EAAQY,UAjBR,2CAzUN,KAgWNE,gBAAkB,SAACF,EAAQuD,GACvB,IAAIC,EACAC,EAAW,GAFuB,uBAKtC,YAAgBzD,EAAhB,+CACA,CAAC,IADQ0D,EACT,+BACI,YAAqBH,EAArB,+CACA,CAAC,IADQI,EACT,QAC0B,OAAlBD,EAAIC,GAEJD,EAAIC,GAAY,GAIhBD,EAAIC,GAAY,CAACD,EAAIC,GAAUlD,QAT3C,oFANsC,kFAoBtC,IAAK,IAAImD,EAAQ5D,EAAOU,OAAQ,EAAGkD,GAAS,EAAGA,IAE3C,GAAIH,EAASI,SAAS7D,EAAO4D,GAAOpD,IAAIC,OACxC,CAAC,IAAD,uBACQ,IADR,IACQ,EADR,aAGY,IAHZ,IACiBkD,EADjB,mBAGqBG,GAET,GADAN,EAAYxD,EAAO4D,GAAOD,GACvB3D,EAAO8D,GAAGtD,IAAIC,QAAUT,EAAO4D,GAAOpD,IAAIC,MAAM,CAE/C,IAAK+C,EAAUO,MAAK,SAAAhF,GAAC,OAAIiB,EAAO8D,GAAGH,GAAUE,SAAS9E,MAGlD,OADAiB,EAAO8D,GAAGH,GAAY3D,EAAO8D,GAAGH,GAAUK,OAAOR,GACjD,QAGA,GAAGG,EAASE,SAAS,SAEb7D,EAAO8D,GAAGH,EAASM,MAAM,QAAQ,IAAIvD,SAAWV,EAAO8D,GAAGH,GAAUjD,OAEpE,OADAV,EAAO8D,GAAGH,GAAY3D,EAAO8D,GAAGH,GAAUK,OAAOR,GACjD,UAdPM,EAAI9D,EAAOU,OAAQ,EAAGoD,GAAK,EAAGA,IAAM,gBAApCA,GAcO,QAhBpB,EAAqBP,EAArB,+CACC,IAFT,kFAyBIvD,EAAOkE,OAAON,EAAO,QAIrBH,EAAS7C,KAAKZ,EAAO4D,GAAOpD,IAAIC,OAIxC,OAAOT,GAtZfC,KAAKiC,IAAMO,EAAQ,KAGnB0B,IAAEC,KAAK,CACH3C,KAAM,MACN4C,IAAK,iBACLC,OAAO,EACPC,OAAO,EACPC,SAAU,MACVC,QAAS,SAASC,GACdzE,KAAK4B,QAAU6C,EACfjF,EAAOiF,KAGfzE,KAAK4B,QAAUpC,GCpBFkF,E,WAEjB,aAGI,IAAIC,EAFP,oBAGGT,IAAEC,KAAK,CACH3C,KAAM,MACN4C,IAAK,aACLC,OAAO,EACPC,OAAO,EACPC,SAAU,OACVC,QAAS,SAASI,GACdD,EAAWC,KAInB5E,KAAK6E,UAAYC,KAAK3C,MAAM2C,KAAKC,UAAUJ,IAC3C3E,KAAKgF,QAAU,0C,0DAIJC,EAASC,EAAO1D,EAAM2D,GACpC,IAD4CC,EAC7C,uDADwD,GAM9CC,GADNJ,EAAWK,MAAMC,QAAQN,GAAsBA,EAAZ,CAACA,IACT1G,KAAI,SAAAiH,GAC3B,MAAO,CAACC,KAAMD,MAIlB,OAAO3F,QAAQV,QAAQ,CAAC8F,QAASI,EAAYH,MAAOA,EAAO1D,KAAMA,EAAM2D,OAAQA,EAAQO,aAAcN,M,qCAGzFO,EAAgBC,GAE5B,IAAIC,EAAW,GACf,GAAI,aAAcF,EAAeG,KACjC,CAAC,IAAD,uBACI,YAAcF,EAAd,+CACA,CAAC,IADQG,EACT,QAEI,GAAIA,EAAEvE,OAASmE,EAAeG,KAAKD,SACnC,CACIA,EAAWE,EAAEF,SACb,QAPZ,kFAWIA,EAAyB,KAAbA,EAAmBF,EAAeG,KAAKD,SAAWA,EAC9D,IAAIG,EAASL,EAAeM,OAAON,EAAeG,KAAQH,EAAeG,KAAKH,EAAeM,KAAK,GAAKN,EAAeG,KAAKtE,KAAK,GAChI,OAAOqE,EAASK,QAAQ,MAAOlG,KAAKmG,OAAOR,EAAeS,UAAUF,QAAQ,OAAOF,GAInF,IAAMK,EAAcrG,KAAKsG,sBAAsBX,EAAeM,IAAK,WAAa,OAAS,OACzF,MAAO,WAAaN,EAAeM,IAAMI,EAAcrG,KAAKmG,OAAOR,EAAeS,SAAS,M,wCAKjFG,GAEd,IAAI5C,EAAQ,EADhB,uBAEI,YAAiB4C,EAAjB,+CACA,CAAC,IADQvF,EACT,QACyC,UAAjChB,KAAKmG,OAAOnF,EAAKQ,KAAKhB,QAAuBQ,EAAKG,mBAAmByC,SAAS,oDAE9ED,KANZ,kFAUI,OAAOA,I,6BAIHpD,GAEJ,IAAIR,EAAS,GACb,GAAmB,kBAARQ,EAEP,OAAOA,EAAIyD,MAAM,KAAK,GAErB,GAAIsB,MAAMC,QAAQhF,GACvB,CAAC,IAAD,uBACI,IAAI,IAAJ,IAAmBA,EAAnB,+CACA,CAAC,IADO6F,EACR,QACIrG,EAAOY,KAAKyF,EAAQpC,MAAM,KAAK,KAHvC,kFAKI,OAAOjE,EAIP,MAAO,K,oCAIAyG,EAAQhG,GACnB,OAAOtB,OAAOD,KAAKuH,GAAQC,MAAK,SAAAR,GAAG,OAAIO,EAAOP,KAASzF,O,4CAGrCkG,EAAMC,GACxB,OAAyE,IAAlED,EAAKE,cAAcD,OAAOtE,EAAW,CAAEwE,YAAa,a,KCvG9CC,E,YAGjB,aACC,IAAD,8BACI,+CAKJC,eAAiB,SAACxG,EAAKyG,EAAOC,EAAUC,EAAUC,EAAcC,EAAWjC,EAAQkC,EAAerC,EAASsC,EAAaC,GAKhH,IAAIC,EACAC,EACAC,GAJ2C,IAA/C,EAAKC,eAAe,EAAK3C,QAAUG,IAKnCkC,OAAkChF,IAAlBgF,GAAsCA,EACtDE,OAAsBlF,IAAZkF,EAAwB,GAAKA,EACvB,KAAZpC,QAA6B9C,IAAX8C,IAA0C,IAAlBkC,GAG1CG,GAAa,EACbC,EAAUtC,EACVuC,EAAQ,EAAK1C,QAAUG,IAKvBqC,EAAaN,EACbO,EAAUJ,EAAgBlC,EAAS6B,EACnCU,EAAQnH,IAGuB,IAA/B,EAAKoH,eAAeD,IAEpB,EAAKE,UAAUjH,KAAK,CAACJ,IAAKmH,EAAOV,MAAMS,EAASR,SAAUA,EAAUC,SAAUM,EAAYK,aAAc,CAACV,GAAeC,UAAW,CAACA,GAAYU,KAAM,MAACzF,GAAY0F,GAAG,MAAC1F,GAAWb,KAAK,QAAS8F,YAAa,CAACA,GAAcC,QAAQA,MAKxOhH,EAAMyE,EAAUG,EAChB,EAAK6C,gBAAgBzH,EAAK,eAAe4G,GACzC,EAAKa,gBAAgBzH,EAAK,YAAY6G,GACtC,EAAKY,gBAAgBzH,EAAK,cAAc+G,IAG5C,OADAtE,QAAQC,IAAI,EAAK2E,WACV,EAAKA,WA5ChB,EAmHAK,YAAc,SAACzG,EAAMsG,EAAMC,EAAIxH,EAAIyG,EAAOkB,EAAUC,GAGhD5H,OAAc8B,IAAR9B,EAAoB,EAAKyE,QAAQoD,MAAM,GAAG,GAAK,aAAa5G,EAAK,IAAI,EAAK2E,OAAO2B,GAAM,EAAK3B,OAAO4B,GAAMxH,EAC/G2H,OAAwB7F,IAAb6F,EAAyB,GAAK,CAACA,GAC1CC,OAAoB9F,IAAX8F,EAAuB,GAAK,CAACA,GACtCL,OAAgBzF,IAATyF,GAA4C,IAAhBA,EAAKrH,OAAe,GAAK,CAACqH,GAC7DC,OAAY1F,IAAP0F,GAAwC,IAAdA,EAAGtH,OAAe,GAAK,CAACsH,GAN3D,2BAQI,YAAe,EAAKH,UAApB,+CACA,CAAC,IADQS,EACT,QACI,GAAgB,aAAZA,EAAG7G,MAAuB6G,EAAGP,KAAKlE,SAASkE,IAASO,EAAGN,GAAGnE,SAASmE,GAEnE,OAAO,EAAKH,WAZxB,kFAmBI,OAFA,EAAKA,UAAUjH,KAAK,CAACa,KAAK,WAAWyF,SAAUzF,EAAMsG,KAAMA,EAAMC,GAAIA,EAAGxH,IAAIA,EAAKyG,MAAMA,EAAOkB,SAAUA,EAAUC,OAAQA,EAAQN,aAAc,KAEzI,EAAKD,WAvIhB,EA0IAI,gBAAkB,SAAC1H,EAAaoD,EAAUlD,GACzC,IADgD+C,IACjD,gFACI,YAAiB,EAAKqE,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAIA,EAAKT,MAAQD,EAgBb,OAfIgF,MAAMC,QAAQvE,EAAK0C,KAED,IAAdH,GAAuBvC,EAAK0C,GAAUE,SAASpD,IAE/CQ,EAAK0C,GAAU/C,KAAKH,IAMN,IAAd+C,GAAsBvC,EAAK0C,KAAclD,IAEzCQ,EAAK0C,GAAYlD,GAGlB,EAAKoH,WAnBxB,kFAuBI,OAAO,GAlKX,EAsLAU,aAAe,WAEX,OAAO,EAAKV,WAxLhB,EA2LAW,oBAAsB,SAAChI,EAAK6G,GAIxB,IAAIhH,EAAY,GAHpB,uBAKI,YAAiB,EAAKwH,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACQwH,GAAU,EAEVlD,MAAMC,QAAQvE,EAAKoG,MAEnBoB,IAAUxH,EAAKoG,GAAWxD,SAASrD,IAIlB,aAAjBS,EAAI,OAAuC,IAAZwH,EAE/BpI,EAAUO,KAAKK,GAEG,YAAdoG,IAA6BpG,EAAI,KAAS4C,SAASrD,IAAQS,EAAI,GAAO4C,SAASrD,KAEnFH,EAAUO,KAAKK,IArB3B,kFAyBI,OAAOZ,GArNX,EA0NAqI,mBAAqB,SAAClI,GAElB,IAEI6F,EAAU,EAAKuB,eAAepH,GAElC,OAAgB,IAAZ6F,GAMOA,EAAQa,UAtOvB,EA2OAyB,sBAAwB,SAAClH,EAAMmH,GAE5B,IAAI5I,EAAS,GADhB,uBAGG,YAAiB,EAAK6H,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACSQ,IAASR,EAAKiG,eAAwB5E,IAAXsG,IAAwB3H,EAAK6G,aAAajE,SAAS+E,IAE9E5I,EAAOY,KAAKK,EAAKT,MAP7B,kFAUG,OAAOR,GAtPV,EA0PA4H,eAAiB,SAACpH,GACjB,IAAD,uBACI,YAAiB,EAAKqH,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAIA,EAAKT,MAAQA,EAEb,OAAOS,GALnB,kFASI,OAAO,GApQX,EAuQA4H,aAAe,SAACrI,EAAKoI,GAElB,IAAK,IAAIjI,EAAI,EAAGA,EAAI,EAAKkH,UAAUnH,OAAQC,IAEzC,GAAI,EAAKkH,UAAUlH,GAAGH,MAAQA,EAE1B,OADA,EAAKqH,UAAUlH,GAAGiI,OAASA,GACpB,EAGb,OAAO,GAhRV,EAqRAE,kBAAoB,SAACF,EAAQvB,GAGzB,IADA,IACS1G,EAAI,EAAKkH,UAAUnH,OAAS,EAAGC,GAAK,EAAGA,IAG5C,IAAK,IAAIoI,EAAI,EAAGA,EAAI,EAAKlB,UAAUlH,GAAGmH,aAAapH,OAAQqI,IAAK,CAE5D,GAAI,EAAKlB,UAAUlH,GAAGmH,aAAaiB,KAAOH,GAAU,EAAKf,UAAUlH,GAAG0G,UAAU0B,KAAO1B,GAA4C,aAA/B,EAAKQ,UAAUlH,GAAGuG,SAGlH,OADM,EAAKW,UAAUlH,GAAGH,IAGvB,GAAI,EAAKqH,UAAUlH,GAAGmH,aAAaiB,KAAOH,QAAwBtG,IAAd+E,EAGrD,OADM,EAAKQ,UAAUlH,GAAGH,IAGvB,QAAc8B,IAAXsG,QAAsCtG,IAAd+E,EAE5B,OAAO,EAAKQ,UAAUlH,GAAGH,IAKrC,OAAO,GA9SX,EAiTAwI,eAAiB,SAACJ,EAAQvB,GAEtB,IAAM7G,EAAM,EAAKsI,kBAAkBF,EAAQvB,GAC3C,OAAO,EAAKO,eAAepH,IApT/B,EAuTAyI,kBAAoB,SAAC5C,GAGjB,IAAIrG,EAAS,GACb,GAAI,WAAYqG,EAChB,CAAC,IAAD,uBACI,YAAiB,EAAKwB,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACOoF,EAAQnF,OAAO2C,SAAS5C,EAAKT,MAE5BR,EAAOY,KAAKK,EAAKiG,WAL7B,mFAcA,OAJqB,IAAlBlH,EAAOU,SAENV,EAAS,CAAC,KAEPA,GA1UX,EA6UAkJ,oBAAsB,SAAC9D,EAAQiB,EAAS8C,EAAapG,EAAaqG,EAAgBC,EAAQlC,EAAUlC,EAASqE,EAAShC,EAAeiC,GAEjI,IAOQrI,EACAsI,EARFC,EAAS,EAAK7B,eAAeuB,GAInC,GAAe,KAAX/D,GAA8B,aAAb+B,IAA6C,IAAlBG,KAAwC,IAAZjB,IAAgC,IAAXoD,GA4B7F,MAtBiB,cAAbtC,GAEAjG,EAAS,EAAK+D,QAAUG,EACxBoE,GAAoB,IAAXC,EAAmBA,EAAOjJ,IAAM6F,EAAQ7F,IAAIC,OAEnC,YAAb0G,GAELqC,EAAS,EAAKvE,QAAUG,EACxBlE,GAAoB,IAAXuI,EAAmBA,EAAOjJ,IAAM6F,EAAQ7F,IAAIC,QAMjDS,GAFY,IAAZmF,OAE+B/D,IAAtB+D,EAAQnF,OAAO,GAAmBmF,EAAQ7F,IAAIC,MAAQ4F,EAAQnF,OAAO,GAIrEuI,EAAOjJ,IAEpBgJ,EAAS,EAAKvE,QAAUG,GAErB,CAAClE,EAAQsI,GAGf,GAAIrC,EAAStD,SAAS,sBAAoC,IAAZwC,IAAgE,IAA3C,EAAKuB,eAAevB,EAAQnF,OAAO,IAC3G,CAEI,IAAIwI,EAAgB,EAAK9B,eAAevB,EAAQnF,OAAO,IACvD,OAAIiG,EAAStD,SAAS,YAAcsD,EAAStD,SAAS,oBAE3C,CAAC6F,EAAclJ,IAAI6F,EAAQ7F,IAAIC,OAI/B,CAAC4F,EAAQ7F,IAAIC,MAAOiJ,EAAclJ,KAS5C,GAAuB,IAAnB4I,IAAmC,IAAXC,IAAgC,IAAZhD,EACrD,CAEI,IAAMsD,EAAiB,EAAKX,eAAejG,GACrCyG,GAAsB,IAAZnD,EAAqB,EAAKpB,QAAUG,EAAS+D,EAG7D,IAAuB,IAAnBQ,IAA6BA,EAAetC,UAAUsC,EAAetC,UAAU3G,OAAS,KAAO4I,IAA4B,IAAjBC,IAA6C,IAAnBH,EAIpI,OAFA,EAAKnB,gBAAgBlF,EAAYuG,EAAQE,GAAQ,GAE1CzG,EAEN,IAAgB,IAAZsD,IAAwC,IAAnBsD,EAE1B,MAAO,CAACA,EAAenJ,IAAKgJ,KApZxC,EA2ZAI,eAAiB,SAAC3C,GACjB,IAAD,uBACI,YAAiB,EAAKY,UAAtB,+CACA,CACI,GADJ,QACaZ,QAAUA,EACf,OAAO,GAJnB,kFAQI,OAAO,GApaX,EAuaA4C,gBAAkB,SAAClC,EAAON,EAAWH,GAEjC,IAAI4C,EAAO,EAAKtB,oBAAoBb,EAAON,GACvC0C,EAAW,GACXC,EAAQ,GAHhB,uBAII,YAAgBF,EAAhB,+CACA,CAAC,IADQG,EACT,QAGE,GAAIA,EAAI/C,WAAaA,GAA0B,mBAAbA,GAAiC+C,EAAI/C,SAASrD,SAAS,YACzF,CACI,IAAMyE,EAAM2B,EAAIjC,GAAGnE,SAAS8D,GAAUsC,EAAIlC,KAAKkC,EAAIjC,GAAGkC,QAAQvC,IAAUsC,EAAIjC,GAAGiC,EAAIlC,KAAKmC,QAAQvC,IAEhGoC,EAASnJ,KAAK0H,GACd0B,EAAMpJ,KAAK,EAAK8H,mBAAmBJ,SAElC,IAAiB,IAAbpB,GAAuC,YAAjB+C,EAAI/C,SAEjC8C,EAAMpJ,KAAKqJ,EAAI/C,eAEZ,IAAiB,IAAbA,EACT,CACE,IAAMoB,EAAM2B,EAAIjC,GAAGnE,SAAS8D,GAAUsC,EAAIlC,KAAKkC,EAAIjC,GAAGkC,QAAQvC,IAAUsC,EAAIjC,GAAGiC,EAAIlC,KAAKmC,QAAQvC,IAChGoC,EAASnJ,KAAK0H,GACd0B,EAAMpJ,KAAK,EAAK8H,mBAAmBJ,MAvB3C,kFA2BI,OAAO0B,GAjcP,EAAKnC,UAAa,GAFtB,E,gFA+CoBsC,GAEhB,MAAsB,aAAlBA,EAAS1I,MAAuB0I,EAASpC,KAAKrH,OAAS,GAAKyJ,EAASnC,GAAGtH,OAAS,I,yCAOrE2F,EAAS+D,GAC5B,IAAD,uBAEI,YAAiBnK,KAAK4H,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAkB,aAAdA,EAAKQ,MAAuD,mBAAhCR,EAAKiG,SAASmD,eAAsCpJ,EAAK8G,KAAK,KAAO1B,IAAyB,IAAd+D,EAE5G,OAAOnJ,EAAK+G,GAAG,GAEd,GAAkB,aAAd/G,EAAKQ,MAAuD,mBAAhCR,EAAKiG,SAASmD,eAAsCpJ,EAAK+G,GAAG,KAAO3B,IAAyB,IAAd+D,EAE/G,OAAOnJ,EAAK8G,KAAK,IAV7B,kFAaI,OAAO,I,2CAGWpE,EAAUlD,GAC/B,IAAD,uBACI,YAAiBR,KAAK4H,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAIA,EAAK0C,KAAclD,EAEnB,OAAOQ,GALnB,kFASI,OAAO,I,wCAIQoF,EAASe,GAC3B,IAAD,uBAEI,YAAiBnH,KAAK4H,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAkB,aAAdA,EAAKQ,OAAwBR,EAAK8G,KAAKlE,SAASwC,EAAQ7F,MAAQS,EAAK+G,GAAGnE,SAASwC,EAAQ7F,OAASP,KAAKqK,mBAAmBrJ,GAC9H,CACI,IAAIsJ,OAAc,EAUlB,GAPIA,EAFAtJ,EAAK8G,KAAKlE,SAASwC,EAAQ7F,KAEVS,EAAK+G,GAAG,GAIR/G,EAAK8G,KAAK,IAE/BwC,EAAiBtK,KAAK2H,eAAe2C,IAClBzC,aAAajE,SAASuD,GAErC,OAAOmD,IAlBvB,kFAuBI,OAAO,I,oCAsDI/J,EAAKmD,EAAUlD,GAC7B,IAAD,uBACI,YAAiBR,KAAK4H,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAIA,EAAKT,MAAQA,GAGT+E,MAAMC,QAAQvE,EAAK0C,IAGnB,OADA1C,EAAK0C,GAAU/C,KAAKH,IACb,GATvB,kFAaI,OAAO,I,4CAmRW4F,GAMlB,IAHA,IAAIhG,EAAY,CAACgG,GACbiC,EAAKjC,GAEmC,IAArCpG,KAAKuK,mBAAmBlC,GAAG,IAE9BA,EAAKrI,KAAKuK,mBAAmBlC,GAAI,GACjCjI,EAAUO,KAAK0H,GAGnB,OAAOjI,I,oCAIG8J,EAAUjE,GAEpB,IAAI7F,EAAY,GADpB,uBAEI,YAAeJ,KAAK4H,UAApB,+CACA,CAAC,IADQS,EACT,QACI,IAAK,IAAI1E,KAAS0E,EAAGR,aAEbQ,EAAGR,aAAalE,KAAWuG,GAAY7B,EAAGjB,UAAUzD,KAAWsC,GAE/D7F,EAAUO,KAAK0H,IAR/B,kFAaI,OAAOjI,I,6CAGY8J,EAAUjE,EAAKuE,GAGlC,IAAM3E,EAAY,2BAA6B7F,KAAKmG,OAAOqE,EAAWjK,IAAIC,OAAS,cAE7EiK,EAAWzK,KAAK0K,cAAcR,EAAUjE,GAAK,GAC7CmD,EAASpJ,KAAK+I,eAAemB,EAAUjE,GAE7C,YAAgB5D,IAAZoI,IAAoC,IAAXrB,GAOlBpJ,KAAK2K,cAAc,CAACF,EAAQzD,MAAOoC,EAAOpC,OAAOnB,EAAU,sBAAsB,EAAO,M,2BAgBjG+E,GAGF5K,KAAK4H,UAAa9C,KAAK3C,MAAM2C,KAAKC,UAAU6F,Q,GA7gBHlG,GCA5BmG,E,YAEjB,aACC,IAAD,8BACI,+CAIJC,YAAc,SAAClD,GAEX,EAAKA,UAAYA,EACjB,IAAImD,EAAe,iBAFvB,uBAKI,YAAiB,EAAKnD,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAqB,aAAjBA,EAAI,OAA0D,IAA/B,EAAKgK,UAAUhK,EAAK+G,GAAG,MAAkD,IAAjC,EAAKiD,UAAUhK,EAAK8G,KAAK,IAChG,GAAsB,YAAlB9G,EAAKiG,UAGL,GAAIjG,EAAK8G,KAAKrH,OAAS,GAAKO,EAAK+G,GAAGtH,OAAS,EAC7C,CAGiBO,EAAKkH,SACPlH,EAAKmH,OAQhB,IAAK,IAAIlC,KAJT8E,GAAgB,SAAU/J,EAAKgG,MAAf,wCACHhG,EAAKiG,SADF,kCAIAjG,EAAK8G,KAEjBiD,GAAgB,EAAKC,UAAUhK,EAAK8G,KAAK7B,IAAO,KAAMjF,EAAKkH,SAASjC,GAAO,IAAIjF,EAAKkH,SAASjC,GAAK,GAAG,IAAM,IAAK,QAASjF,EAAKmH,OAAOlC,GAAO,IAAIjF,EAAKkH,SAASjC,GAAK,GAAG,IAAM,IAAM,IAAMjF,EAAKgG,MAAS,qBAK1M,IAAK,IAAIf,KAAOjF,EAAK+G,GAEjBgD,GAAgB/J,EAAKgG,MAAO,KAAMhG,EAAKmH,OAAOlC,GAAO,IAAIjF,EAAKmH,OAAOlC,GAAK,GAAG,IAAM,IAAK,QAASjF,EAAKmH,OAAOlC,GAAQ,IAAIjF,EAAKmH,OAAOlC,GAAK,GAAG,IAAM,IAAM,IAAM,EAAK+E,UAAUhK,EAAK+G,GAAG9B,IAAQ,0BAM1M,CAEkBjF,EAAKkH,SACPlH,EAAKmH,OADjB,IAEM8C,EAAe,EAAKC,gBAAgBlK,EAAKiG,UAC/C,GAAIjG,EAAK8G,KAAKrH,SAAWO,EAAK+G,GAAGtH,OAE7B,IAAK,IAAIwF,KAAOjF,EAAK8G,KAEjBiD,GAAgB,EAAKC,UAAUhK,EAAK8G,KAAK7B,IAAO,KAAMjF,EAAKkH,SAASjC,GAAO,IAAIjF,EAAKkH,SAASjC,GAAK,IAAM,IAAMgF,EAAa,IAAMjK,EAAKmH,OAAOlC,GAAO,IAAIjF,EAAKmH,OAAOlC,GAAK,IAAM,IAAM,IAAM,EAAK+E,UAAUhK,EAAK+G,GAAG9B,MAA6B,IAApBgF,EAAa,GAAc,QAAQjK,EAAKiG,SAASjD,MAAM,KAAK,GAAG,KAAO,IAAO,UAK5S,IAAK,IAAIiC,KAAOjF,EAAK8G,KACrB,CACI,IAAIqD,EAAO,EAAKH,UAAUhK,EAAK8G,KAAK7B,IAAO,KAAMjF,EAAKkH,SAASjC,GAAO,IAAIjF,EAAKkH,SAASjC,GAAK,IAAM,IAAMgF,EAAa,GAEtH,IAAK,IAAIG,KAASpK,EAAK+G,GAEnBgD,GAAgBI,GAAQnK,EAAKmH,OAAOiD,GAAS,IAAIpK,EAAKmH,OAAOiD,GAAO,IAAM,IAAM,IAAM,EAAKJ,UAAUhK,EAAK+G,GAAGqD,MAA+B,IAApBH,EAAa,GAAc,QAAQjK,EAAKiG,SAASjD,MAAM,KAAK,GAAG,KAAO,IAAO,UAO/L,aAAjBhD,EAAI,OAGT+J,GAAgB,SAAU/J,EAAKgG,MAAf,4BACPhG,EAAKiG,SADE,4BArE5B,kFA0EI,MAA+C,iBAAxB8D,EAAaM,QAAqCN,GA9EzE,EAAKnD,UAAY,GAFrB,E,6EAmFiBX,GAChB,IAAD,uBACI,IAAI,IAAJ,IAAejH,KAAK6E,UAAUyG,UAA9B,+CACA,CAAC,IADOtB,EACR,QAEI,GAAI/C,KAAY+C,EAChB,CAEI,IAAMuB,EAAcvB,EAAI/C,GAClBuE,EAAW,aAAcxB,IAA2B,IAApBA,EAAG,SACrChL,OAAI,EACR,OAAOuM,EAAYnB,eAEf,IAAK,YAAapL,EAAO,SACrB,MACJ,IAAK,aAAcA,EAAO,OACtB,MACJ,IAAK,aAAcA,EAAO,OACtB,MACJ,IAAK,cAAeA,EAAO,QACvB,MACJ,IAAK,cAAeA,EAAO,QACvB,MACJ,QAAUA,EAAO,OAGrB,MAAO,CAACA,EAAMwM,KAzB1B,qF,gCA+BWjL,GACV,IAAD,uBACI,YAAiBP,KAAK4H,UAAtB,+CACA,CAAC,IADQ5G,EACT,QACI,GAAIA,EAAKT,MAAQA,EAEb,OAAOS,EAAKgG,OALxB,kFASI,OAAO,M,GAhI6BtC,GCAvB+G,E,2MAIjBC,cAAgB,SAACC,EAAO1F,EAAKG,EAASwF,EAAgB9F,EAAM+F,GAGxD,IAEIC,EAEAjG,EACAkG,EACA5G,EAAS,GAeb,GAXI2G,EAFAhG,GAMW,EAAKkG,gBAAgBL,EAAM1F,GAGhBgG,OAIV,IAAZ7F,EAEI,EAAK8F,iBAAiB9F,EAAQyF,IAE9BE,GAAY,EACN3F,EAAQ7F,IAAIC,MAClBqF,EAAW,EAAKhB,UAAUe,UAAU,GAAGC,SAASK,QAAQ,MAAME,EAAQY,MAAMxG,SAI5EuL,GAAa,EACP3F,EAAQ7F,IAAIC,MAClBqF,EAAW,EAAKhB,UAAUe,UAAU,GAAGC,SAASK,QAAQ,MAAME,EAAQY,MAAMxG,OAC5E2E,EAASiB,EAAQY,MAAMxG,WAI/B,CAEIuL,GAAa,EAFjB,2BAMI,YAAc,EAAKlH,UAAUe,UAA7B,+CACA,CAAC,IADQG,EACT,QACI,GAAe,eAAXA,EAAEvE,KACN,CACIqE,EAAWE,EAAEF,SAASK,QAAQ,MAAO0F,GACrC,QAXZ,mFAgBA,OAAO,EAAKjB,cAAcmB,EAAWjG,EAAU,iBAAiBkG,EAAW5G,I,EAG/E+G,iBAAmB,SAAC9F,EAASyF,GAC5B,IAAD,uBACI,YAAiBA,EAAjB,+CACA,CAAC,IADQ7K,EACT,QAEI,GAAIoF,EAAQ7F,IAAIC,QAAUQ,EAAKT,IAAIC,MACnC,CAAC,IAAD,uBACI,YAAiBQ,EAAKG,mBAAtB,+CACA,CAAC,IADQK,EACT,QACI,GAA0B,eAAtB,EAAK2E,OAAO3E,GAEZ,OAAO,GALnB,qFALR,kFAgBI,OAAO,G,EAIX2K,wBAA0B,SAAC/F,EAAUgG,GAG7B,IAAIT,EAAQ,EAAK9G,UAAUuB,EAAQa,UAE/BoF,EAAQ,GAQRC,EAAU,CACVnC,UAAWiC,EAAexC,gBAAgBxD,EAAQ7F,IAAI,KAAM,kBAC5DgM,QAASH,EAAexC,gBAAgBxD,EAAQ7F,IAAI,OAAO,kBAC3DiM,QAASJ,EAAexC,gBAAgBxD,EAAQ7F,IAAK,WAAW,IAEpEyC,QAAQC,IAAI6B,KAAK3C,MAAM2C,KAAKC,UAAUuH,KAjB9C,2BAmBQ,YAAiBX,EAAjB,+CACA,CAAC,IADQ7F,EACT,QACIuG,EAAQ,EAAKI,4BAA4B3G,EAAKwG,EAAQE,QAAQ,UAAUpG,EAAQiG,EAAMV,EAAMW,GAC5FD,EAAQ,EAAKI,4BAA4B3G,EAAKwG,EAAQnC,UAAU,YAAY/D,EAAQiG,EAAMV,EAAMW,GAChGD,EAAQ,EAAKI,4BAA4B3G,EAAKwG,EAAQC,QAAQ,UAAUnG,EAAQiG,EAAMV,EAAMW,IAvBxG,kFAmCQ,OARAtJ,QAAQC,IAAI6B,KAAK3C,MAAM2C,KAAKC,UAAUsH,KACtCrJ,QAAQC,IAAIoJ,EAAM5L,QAEb4L,EAAM5L,OAAS,GAAK4L,EAAM,GAAGtC,MAAMnG,SAAS,YAAcyI,EAAM,GAAGtC,MAAMnG,SAAS,SAEnFyI,EAAMpI,OAAO,EAAG,GAGboI,G,EAKfI,4BAA8B,SAAC3G,EAAKwG,EAAQrG,EAAIG,EAAQiG,EAAMV,EAAMe,GAEhE,GAAG5G,EAAKG,MAAQA,EAChB,CAEQ,IAAM0G,EAAiC,MAAxB1G,EAAIA,EAAIxF,OAAS,GAAa,IAAM,KAC7CmM,EAAmB,EAAKZ,gBAAgBL,EAAO1F,EAAM0G,GAAQ,GACnE,IAAK7G,EAAKtE,KAAKsC,MAAK,SAAA+I,GAAC,OAAGP,EAAQ1I,SAASiJ,OAAO/G,EAAKtE,KAAKf,OAAS,EAG/D4L,EAAM1L,KAAK,CAACsF,IAAKA,EAAK8D,MAAOjE,EAAKtE,KAAM4E,QAAQA,EAAQ7F,IAAKuF,KAAKA,SAKlE,IAAwB,IAApB8G,EACJ,CAAC,IAAD,uBAEI,YAAoBA,EAApB,+CACA,CAAC,IADQE,EACT,QACQA,EAAQtL,KAAKsC,MAAK,SAAA+I,GAAC,OAAGP,EAAQ1I,SAASiJ,QACvCR,EAAQ,EAAKU,wBAAwB,YAAYD,EAAQR,EAAQD,EAAMjG,EAAQsG,GAC/EL,EAAQ,EAAKU,wBAAwB,UAAUD,EAAQR,EAAQD,EAAMjG,EAAQsG,GAC7EL,EAAQ,EAAKU,wBAAwB,UAAUD,EAAQR,EAAQD,EAAMjG,EAAQsG,KAPzF,oFAcZ,OAAOL,G,EA4CXL,gBAAkB,SAACL,EAAO1F,EAAK+G,EAAaC,GAExC,IAAIC,EAAW,GAKf,GAFAF,OAA8B3K,IAAhB2K,GAAoCA,GAE9B,KAHpBC,OAA8B5K,IAAhB4K,GAAoCA,GAIlD,CAAC,IAAD,uBACI,YAAiBtB,EAAjB,+CACA,CAAC,IADQ3K,EACT,QACI,GAAIA,EAAKiF,MAAQA,GAAS,gBAAiBjF,GAASA,EAAKiM,YAAYrJ,SAASqJ,GAC9E,CACI,IAAoB,IAAhBD,EAMA,OAAOhM,EAJPkM,EAASvM,KAAKK,KAP9B,mFAPJ,2BAyBQ,YAAiB2K,EAAjB,+CACA,CAAC,IADQ3K,EACT,QAEI,GAAIA,EAAKiF,MAAQA,EACjB,CACI,IAAoB,IAAhB+G,EAMA,OAAOhM,EAJPkM,EAASvM,KAAKK,KAhClC,kFA4CI,OAAIkM,EAASzM,OAAS,GAEXkL,G,EAUfwB,kBAAoB,SAACrH,EAAMsH,EAAczJ,GAcrC,OAAa,IAATmC,GAAkBnC,EAAM0J,aAAcvH,GAAQsH,KAAgBtH,EAAKnC,IAEnEX,QAAQC,IAAI6C,EAAKnC,GAAOyJ,IACjBtH,EAAKnC,GAAOyJ,IAGhB,I,EAKXE,oBAAsB,SAAClH,EAASH,EAAK2B,GAEjC,IAGI2F,EAAa,GACbC,EAAgB,GACdC,EAAcrH,EAAQoG,QAAQ/L,OAAS,EANjD,uBAQI,YAAkB2F,EAAQsH,UAA1B,+CACA,CAAC,IADQC,EACT,QACIH,EAAc7M,KAAK,EAAKwF,OAAOwH,KAVvC,6GAcI,YAAiB/F,EAAjB,+CACA,CAAC,IADQ5G,EACT,QACQoF,EAAQnF,OAAO2C,SAAS5C,EAAKT,MAC7BgN,EAAW5M,KAAKK,EAAKiG,WAjBjC,6GAuBI,IAvBJ,IAuBI,EAvBJ,iBAuBanB,EAvBb,QAgCO,IAAKyH,EAAWzJ,MAAK,SAAA+I,GAAC,OAAG/G,EAAKyH,WAAW3J,SAASiJ,OAAQ/G,EAAKyH,WAAW3J,SAAS,WACjF6J,IAAe3H,EAAK2H,YAAkC,IAApB3H,EAAK2H,aAAsBrH,EAAQsH,UAAU5J,MAAK,SAAA+I,GAAC,OAAG/G,EAAK8H,UAAUhK,SAASiJ,IAChH/G,EAAK8H,UAAUhK,SAAS,WAEzB,CACI,IAAIpC,EAAO,mBACP,WAAYsE,IAA2B,IAAnBA,EAAI,SAExBtE,GAAQ,WAEZ,IAAMqE,EAAW,iBAAiBO,EAAQY,MAAMxG,MAAM,IACtD,MAAM,CAAN,EAAO,EAAKmK,cAAc7E,EAAKmG,MAAMpG,EAAUrE,GAAK,EAAO4E,EAAQY,MAAMxG,UApBjF,EAAiB,EAAKqE,UAAUgJ,YAAhC,+CACA,CAAC,IAAD,yCAxBJ,oF,uFA5HyBrM,EAAMsE,EAAMwG,EAASD,EAAOjG,EAASsG,GAG1D,GAAIlL,KAAQsE,IAGHA,EAAKtE,GAAMsC,MAAK,SAAA+I,GAAC,OAAGH,EAASlL,GAAMoC,SAASiJ,OAAO/G,EAAKtE,GAAMf,OAAS,EAC5E,CAEI,IAAK,IAAIkD,KAAS0I,EAGVA,EAAM1I,GAAOsC,MAAQzE,GAAQ6K,EAAM1I,GAAOyC,UAAYA,EAAQ7F,KAE9D8L,EAAMpI,OAAON,EAAO,GAG5B0I,EAAM1L,KAAK,CAACsF,IAAKzE,EAAMuI,MAAOjE,EAAKtE,GAAO4E,QAAQA,EAAQ7F,IAAKuF,KAAKA,IAI5E,OAAOuG,I,uCAIOyB,EAAc7H,EAAKgH,GAEjC,IAAMnH,EAAO9F,KAAKgM,gBAAgBhM,KAAK6E,UAAUiJ,GAAe7H,GAAK,EAAOgH,GACxEc,EAAa,EAEjB,IAAK,IAAI9H,KAAOH,EAEPkI,MAAM/H,IAEP8H,IAIR,OAAOA,M,GArM6BrJ,GCAvBuJ,E,WACjB,aACC,oBACGjO,KAAK4K,iBAAmB,GACxB5K,KAAKkO,kBAAoB,GACzBlO,KAAKmO,eAAiB,G,iDAGpBC,GAEDpO,KAAKkO,kBAAkBvN,KAAKyN,GAC5BpO,KAAK4K,iBAAiBjK,KAAK,M,8BAK5BX,KAAK4K,iBAAmB,GACxB5K,KAAKkO,kBAAoB,GACzBlO,KAAKmO,eAAiB,K,oCAIzB,IADY7K,EACb,uDAD0B,GAAIsE,EAC9B,uDAD0C,GAAIuG,EAC9C,uCACInO,KAAKkO,kBAAkBvN,KAAK2C,GAC5BtD,KAAK4K,iBAAiBjK,KAAKiH,GAC3B5H,KAAKmO,eAAexN,KAAKwN,K,6BAOzBnO,KAAK4K,iBAAiByD,MACtB,IAAMC,EAAWtO,KAAKkO,kBAAkBG,MASxC,OARArO,KAAKmO,eAAeE,WAC4ChM,IAA5DrC,KAAKkO,kBAAkBlO,KAAKkO,kBAAkBzN,OAAO,IAAoG,IAAhFT,KAAKkO,kBAAkBlO,KAAKkO,kBAAkBzN,OAAO,GAArD,UAAqEA,SAE9IT,KAAKkO,kBAAkBlO,KAAKkO,kBAAkBzN,OAAO,GAArD,UAAuEqE,KAAK3C,MAAM2C,KAAKC,UAAUuJ,EAAQ,aAE7GtL,QAAQC,IAAIjD,KAAKkO,mBACjBlL,QAAQC,IAAIjD,KAAKmO,gBACjBnL,QAAQC,IAAIjD,KAAK4K,kBACV,CAAChD,UAAW5H,KAAK4K,iBAAiB5K,KAAK4K,iBAAiBnK,OAAO,GAAI6C,WAAYtD,KAAKkO,kBAAkBlO,KAAKkO,kBAAkBzN,OAAO,GAC3I0N,eAAgBnO,KAAKmO,eAAenO,KAAKmO,eAAe1N,OAAO,Q,KC5ClD8N,E,kGA8BN3G,GAEP,IAAM4G,EAAgBxO,KAAKyO,aACvBC,EAAW,EAFnB,uBAII,YAAiB9G,EAAjB,+CACA,CAAC,IADQ5G,EACT,QACqB,UAAdA,EAAKQ,MAAoD,YAAhCR,EAAKiG,SAASmD,eAExCoE,EAAa,SAAa7N,KAAKX,KAAK2O,wBAAwB3N,KARtE,kFAWIgC,QAAQC,IAAIuL,GAXhB,2BAaI,YAAiB5G,EAAjB,+CACA,CAAC,IADQ5G,EACT,QACE,GAAkB,aAAdA,EAAKQ,MAAuD,YAAhCR,EAAKiG,SAASmD,cAA6B,CACvE,IAAInE,OAAG,EAIJA,EAFCjF,EAAK8G,KAAKrH,QAAUO,EAAK+G,GAAGtH,OAEvB,OAID,KAGR,IAAImO,EAAe,EACnB,IAAK,IAAIjL,KAAS3C,EAAKiF,GACvB,CAEG,IAAI4I,EAAoB,SAAR5I,EAAiBtC,EAAQiL,EACrCE,EAAkB,OAAR7I,EAAetC,EAAQiL,EAErCJ,EAAa,SAAa7N,KAAKX,KAAK+O,uBAAuB/N,EAAM0N,EAAUG,EAAWC,IACtFJ,GAAY,EACR/K,GAAS3C,EAAKiF,GAAKxF,SAEpBmO,EAAejL,SAIpB,GAAoC,YAAhC3C,EAAKiG,SAASmD,cACvB,CACE,IAAI4E,EAAWlK,KAAK3C,MAAM2C,KAAKC,UAAU/D,IACrCiO,EAAYnK,KAAK3C,MAAM2C,KAAKC,UAAU/D,IAEtCiF,OAAG,EAIJA,EAFCjF,EAAK8G,KAAKrH,QAAUO,EAAK+G,GAAGtH,OAEvB,OAID,KAGR,IAAImO,EAAe,EAEnB,IAAK,IAAIjL,KAAS3C,EAAKiF,GAErB+I,EAAQ,KAAW,OACnBC,EAAS,KAAW,OAEpBD,EAAQ,UAAgB,YACxBC,EAAS,UAAgB,YAEb,SAARhJ,GAEF+I,EAAQ,SAAehO,EAAI,SAAa2C,GAAO,GAC/CqL,EAAQ,OAAahO,EAAI,SAAa2C,GAAO,GAE7CsL,EAAS,SAAejO,EAAI,OAAW4N,GAAc,GACrDK,EAAS,OAAajO,EAAI,OAAW4N,GAAc,GAEnDI,EAAQ,KAAW,CAACA,EAAQ,KAASrL,IACrCsL,EAAS,GAAS,CAACD,EAAQ,GAAOJ,MAIlCI,EAAQ,SAAehO,EAAI,SAAa4N,GAAc,GACtDI,EAAQ,OAAahO,EAAI,SAAa4N,GAAc,GAEpDK,EAAS,SAAejO,EAAI,OAAW2C,GAAO,GAC9CsL,EAAS,OAAajO,EAAI,OAAW2C,GAAO,GAE5CqL,EAAQ,KAAW,CAACA,EAAQ,KAASJ,IACrCK,EAAS,GAAS,CAACD,EAAQ,GAAOrL,KAGpCqL,EAAQ,GAAS,CAAChO,EAAKT,KACvB0O,EAAS,KAAW,CAACjO,EAAKT,KAE1BiO,EAAa,SAAa7N,KAAKX,KAAK+O,uBAAuBC,EAAUN,EAAU,EAAE,IACjFA,GAAY,EAEZF,EAAa,SAAa7N,KAAKX,KAAK+O,uBAAuBE,EAAWP,EAAS,EAAE,IACjFA,GAAY,EAER/K,GAAS3C,EAAKiF,GAAKxF,SAEpBmO,EAAejL,KAtG5B,kFA4GI,IAAMuL,EAAU1M,EAAQ,KAElB2M,GAAY,IADN3M,EAAQ,OACQ4M,QAAQF,EAAQG,UAAUH,EAAQI,YAK9D,GAJAtP,KAAK4H,UAAY5H,KAAKuP,WAENJ,EAAUX,GAIxB,OAAOA,EAIPgB,MAAM,oD,mCAMR,MAAO,CACH,KAAQ,UACR,GAAM,iBACN,KAAQ,KACR,YAAe,KACf,SAAY,GACZ,oBAAuB,Q,8CAINC,GAEvB,MAAQ,CACF,KAAQ,QACR,GAAMA,EAAUlP,IAChB,KAAQkP,EAAUzI,MAClB,YAAe,KACf,WAAc,KACd,SAAY,KACZ,oBAAuB,KACvB,YAAe,CAACyI,EAAUxI,SAASmD,eACnC,WAAc,KACd,UAAa,Q,6CAIGF,EAAUwE,EAAUG,EAAWC,GAGnD,MAA0B,mBAAtB5E,EAASjD,SAED,CACJ,KAAQ,iBACR,GAAMiD,EAAS3J,IACf,KAAQ,KACR,YAAe,KACf,QAAW,CACT,KAAQ,QACR,GAAM2J,EAASpC,KAAK+G,IAEtB,SAAY,CACV,KAAQ,QACR,GAAM3E,EAASnC,GAAG+G,IAEpB,oBAAuB,CACrB,oBAAuB,OAMtB,CACL,KAAQ,WACR,GAAM5E,EAAS3J,IACf,KAAQ,KACR,YAAe,KACf,WAAc,CACZ,CACE,KAAQ,WACR,GAAM,OAASmO,EACf,KAAQ,KACR,YAAe,KACf,aAAgB,CACd,KAAQ,QACR,GAAMxE,EAASpC,KAAK+G,IAEtB,YAAgD,KAAjC3E,EAAShC,SAAS2G,GAAiC,KAAO3E,EAAShC,SAAS2G,GAC3F,UAAa,KACb,UAAa,KACb,WAAc,KACd,YAAe,KACf,oBAAuB,KACvB,oBAAuB,KACvB,oBAAuB,KACvB,gBAAmB,MAErB,CACE,KAAQ,WACR,GAAM,QAAUa,SAAShB,GAAY,GACrC,KAAQ,KACR,YAAe,KACf,aAAgB,CACd,KAAQ,QACR,GAAMxE,EAASnC,GAAG+G,IAEpB,YAA4C,KAA7B5E,EAAS/B,OAAO2G,GAA+B,KAAO5E,EAAS/B,OAAO2G,GACrF,UAAa,KACb,UAAa,KACb,WAAc,KACd,YAAe,KACf,oBAAuB,KACvB,oBAAuB,KACvB,oBAAuB,KACvB,gBAAmB,OAGvB,oBAAuB,CACrB,oBAAuB,MAEzB,YAAe,CAAC5E,EAASjD,SAASmD,eAClC,YAAc,EACd,WAAa,K,iCASrB,OAAOtF,KAAK3C,MAAL,slO,KCzPQwN,E,YACjB,aAAe,IAAD,8BACV,+CACKC,cAAgB,IAAIrQ,EACzB,EAAK6M,eAAiB,IAAItF,EAC1B,EAAK+I,gBAAkB,IAAIC,EAC3B,EAAKC,eAAiB,IAAItE,EAC1B,EAAKuE,kBAAoB,IAAI/B,EAC7B,EAAKgC,qBAAuB,IAAIC,EACP,EAAKN,cAAc9O,cAE3BqP,MAAK,SAAAxN,GAClB,EAAKkJ,UAAYlJ,EACjBK,QAAQC,IAAIN,MAGS,EAAKiN,cAAc7M,eAC3BoN,MAAK,SAAAxN,GAClB,EAAK2I,UAAY3I,KAOrB,EAAKyN,WAAa,GAGlB,EAAKC,mBAAqB,EAC1B,EAAKnG,SAAW,GAChB,EAAKoG,cAAgB,EACrB,EAAKxC,aAAe,GAEpB,EAAKyC,sBAhCK,E,0EA0CV,GAAIvQ,KAAKqQ,qBAAuBrQ,KAAKsL,UAAU7K,OAG3C,OADA+O,MAAM,gCACC,CAACvK,QAAS,GAAIC,MAAO,UAAW1D,KAAM,OAMjD,IAAM0I,EAAWlK,KAAKsL,UAAUtL,KAAKqQ,oBAIrC,GAHArQ,KAAKkK,SAAWA,EAChBlK,KAAKqJ,QAAU,OAEZrJ,KAAKkK,SAASsG,UAAU/P,OAAS,EACpC,CAGI,IAAMoF,EAAWqE,EAASlD,MAAMxG,MAAMiQ,OAAO,GAAGC,cAAgBxG,EAASlD,MAAMxG,MAAM4H,MAAM,GAAK,2BAChG,OAAOpI,KAAK2K,cAAc,UAAU9E,EAAS7F,KAAKmG,OAAO+D,EAAS1I,KAAKhB,QAAO,EAAM0J,EAASlD,MAAMxG,OAKnGR,KAAKmD,WAAa+G,EAAS3J,IAAIC,MAE/B,IAAMqF,EAAW7F,KAAK6E,UAAU8L,eAAe,GAAG9K,SAASK,QAAQ,MAAMgE,EAASlD,MAAMxG,OACxF,OAAOR,KAAK2K,cAAc3K,KAAK6E,UAAU8L,eAAe,GAAG1E,MAAOpG,EAAS7F,KAAKmG,OAAO+D,EAAS1I,KAAKhB,QAAQ,EAAO0J,EAASlD,MAAMxG,S,2EAKxH4M,EAAclE,EAAahC,EAAU/B,EAAQkC,G,4GAG5DrE,QAAQC,IAAI,CAACmK,EAAclE,EAAahC,EAAU/B,EAAQkC,IAC3C,KAAXlC,IAAmC,IAAlBkC,GAEjBrH,KAAK4Q,uBAAuB5Q,KAAKmD,WAAW,QAASgC,GAGxC,cAAb+B,E,yCAEMlH,KAAK6Q,oBAAoBzD,EAAcpN,KAAKqJ,U,UAM9CyH,EAAiB,GACjBC,EAAU7J,GAEVA,EAAStD,SAAS,+B,oBAEfsD,EAAStD,SAAS,WAGA,SADDsD,EAAShB,QAAQ,uCAAuC,KAGpElG,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM,WAAY4M,GACxE2D,EAAsC,SAA5B/Q,KAAK8Q,eAAe7K,IAAiB,UAAY8K,IAI3D/Q,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM,SAAU4M,GACtE2D,EAAsC,SAA5B/Q,KAAK8Q,eAAe7K,IAAiB,UAAY8K,IAK/D/Q,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM,WAAY4M,EAAa,IACrFpN,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM,SAAU4M,EAAa,IACnF2D,EAAsC,SAA5B/Q,KAAK8Q,eAAe7K,IAAiB,UAAY8K,GAGnC,gBAAxB/Q,KAAKgR,e,sBAGDhR,KAAKkK,SAASlK,KAAKqJ,SAAS5I,QAAUT,KAAKiR,mB,wBAG3CjR,KAAKqQ,qBACLrQ,KAAKuQ,sB,kBACEvQ,KAAKkR,c,iCAILlR,KAAKmR,kB,gCAMhB/D,EAAepN,KAAKoQ,WAAWhD,aAC/BlG,EAAWlH,KAAKoQ,WAAWlJ,SAC3B/B,EAASnF,KAAKoQ,WAAWjL,OACzBiM,EAAapR,KAAKoQ,WAAWgB,WAC7BN,EAAiB9Q,KAAKoQ,WAAWU,eACjCzJ,EAAgBrH,KAAKoQ,WAAW/I,c,WAInC/B,MAAMC,QAAQ6H,IAAgD,SAA/BA,EAAahD,c,oBAE7CpK,KAAKoQ,WAAWhD,aAAeA,EACzBiE,EAAerR,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,OAC1ER,KAAK8Q,eAAe7K,IAAM,OACtBoL,EAAarR,KAAKqJ,SAAS5I,SAAWT,KAAKiR,oBAGrCK,EAAYtR,KAAKoM,eAAevD,kBAAkB7I,KAAKkK,SAAS3J,IAAIC,MAAMR,KAAKqJ,SAErFrJ,KAAKoM,eAAepE,gBAAgBqJ,EAAa9Q,IAAKP,KAAKqJ,QAAQiI,KAG7C,KADpBC,EAAoBvR,KAAKwR,uB,0CAGpBD,G,eAEXvR,KAAKyR,oBAAoB9Q,KAAK,CAACJ,IAAKP,KAAKmD,WAAY8D,SAASmG,EAAc5L,KAAM0F,I,kBAC3ElH,KAAK0R,oB,WAGXxK,EAAStD,SAAS,iBAAiC,aAAbsD,E,oBAIT,SAA3BlH,KAAK8Q,eAAe7K,UAA6C5D,IAA5BrC,KAAK8Q,eAAe7K,MAAsBjG,KAAK8Q,eAAenN,MAAQ,GAAwF,IAAnF3D,KAAKoM,eAAe1B,cAAc1K,KAAKkK,SAAS3J,IAAIC,MAAMR,KAAKqJ,SAAS5I,SAGvLqQ,EAAiB9Q,KAAK+P,eAAe5C,kBAAkBnN,KAAK+P,eAAe/D,gBAAgBhM,KAAK6E,UAAU7E,KAAK8N,cAAc9N,KAAKqJ,SAAQ,EAAOrJ,KAAK2R,kBAAkB3R,KAAK4R,eAAexE,EAAc,IACvL3M,OAAS,IAExBT,KAAK8Q,eAAenN,MAAQ,EAC5B3D,KAAK8Q,eAAehL,KAAQ9F,KAAK+P,eAAe/D,gBAAgBhM,KAAK6E,UAAU7E,KAAK8N,cAAc9N,KAAKqJ,SAAQ,EAAOrJ,KAAK2R,kBAAkB3R,KAAK4R,eAClJ5R,KAAK8Q,eAAe7K,IAAMmH,GAG1BpN,KAAK8Q,eAAenN,MAAQ,GAAiC,SAA5B3D,KAAK8Q,eAAe7K,OAE5D6K,EAAiB9Q,KAAK+P,eAAe5C,kBAAkBnN,KAAK8Q,eAAehL,KAAMsH,EAAcpN,KAAK8Q,eAAenN,QAChGlD,OAAS,EAEzBT,KAAK8Q,eAAenN,QAIpB3D,KAAK8Q,eAAe7K,IAAM,QAK/BmL,EAAapR,KAAKoM,eAAenD,oBAAoB9D,EAAQnF,KAAK6R,gBAAgB7R,KAAKmD,YAAanD,KAAKmD,WAAWnD,KAAKkK,SAAS3J,IAAIC,MAAOsQ,EAAerQ,OAAkC,IAA1BqQ,EAAerQ,OAAcyG,EAAUlH,KAAKgF,QAAShF,KAAKqJ,QAAShC,EAAcrH,KAAKiR,kBAAoB,GAC9QjR,KAAKoQ,WAAa,CAAChD,aAAcA,EAAc/F,cAAeA,EAAeH,SAAUA,EAAUmC,QAAQrJ,KAAKqJ,QAASlE,OAAOA,EAAQiM,WAAYA,EAAYN,eAAgBA,EAAgBgB,QAAS,GAAIpK,MAAO1H,KAAKmD,YAKnNiO,IAAepR,KAAKkK,SAAS3J,IAAIC,OAAiC,WAAxBR,KAAKgR,e,qBAG1B,KADjBe,EAAiB/R,KAAKwR,uB,wBAGxBxR,KAAKgR,gBAAkB,Q,kBAChBe,G,gCAIK,aAAb7K,GAEJkK,EAAa,CAAChE,EAAcpN,KAAKgF,QAAQG,GACzCnF,KAAKoQ,WAAWgB,WAAaA,EAC7BpR,KAAKoQ,WAAW0B,QAAU,UAG1B9R,KAAKoM,eAAerF,eAAe/G,KAAKgF,QAAQG,EAAOA,EAAO,WAAW,SAASnF,KAAKkK,SAAS3J,IAAIP,KAAKqJ,aAAShH,OAAUA,OAAUA,OAAUA,EAAUrC,KAAKmD,cAK3J+D,EAAStD,SAAS,4BAGlB5D,KAAKoQ,WAAW0B,QAAU1E,EAErBlG,EAAStD,SAAS,uBAGvBoO,EAAa5E,GAGjBA,EAAepN,KAAKoQ,WAAWhD,aAC/BlG,EAAWlH,KAAKoQ,WAAWlJ,SAC3B/B,EAASnF,KAAKoQ,WAAWjL,OACzBiM,EAAapR,KAAKoQ,WAAWgB,WAC7BN,EAAiB9Q,KAAKoQ,WAAWU,eACjCzJ,EAAgBrH,KAAKoQ,WAAW/I,cAChCrH,KAAKmD,WAAanD,KAAKoQ,WAAW1I,O,YAMhB,KAFhBuK,EAAgBjS,KAAKkS,iBAAiBd,EAAYL,EAAS7H,EAAYlJ,KAAKqJ,QAASrJ,KAAKoQ,WAAWhD,aAAcpN,KAAKoQ,WAAW0B,QAASE,I,0CAKvInS,QAAQV,QAAQ8S,I,WAGD,OAAtBjS,KAAKmS,a,sBAGDnS,KAAKmS,aAAa1R,OAAS,G,0CAEpBT,KAAKoS,mB,WAGqB,IAA7BpS,KAAKmS,aAAa1R,O,oBAGD,OAAjBT,KAAKqJ,SAAoBrJ,KAAKkK,SAASnC,GAAGtH,SAAWT,KAAKiR,kB,wBAEpD7H,EAASpJ,KAAKoM,eAAevD,kBAAkB7I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SACnFrJ,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM,KAAK4I,GAEjEpJ,KAAKmD,WAAaiG,EAClBpJ,KAAKgR,eAAiB,S,kBAEfhR,KAAKwR,uB,iCAILxR,KAAKmR,kB,WAKlBkB,GAA8B,IAApBrS,KAAKwK,YAA0B,SAAUxK,KAAKwK,YAAsBxK,KAAKmG,OAAOnG,KAAKwK,WAAWhJ,KAAKhB,OAEjH+G,OAAUlF,EAEVrC,KAAK4R,aAAa5R,KAAK4R,aAAanR,OAAS,GAAGF,IAAIC,QAAUR,KAAKmD,aAEnEoE,EAAU,SAGdvH,KAAKoM,eAAerF,eAAe/G,KAAKmD,WAAYnD,KAAKmG,OAAOnG,KAAKmD,YAAYiK,EACjFiF,EAAQrS,KAAKkK,SAAS3J,IAAIC,MAAMR,KAAKqJ,QAAQlE,EAAQkC,EAAerH,KAAKgF,QAAShF,KAAKiR,kBAAmB1J,KAKtGuJ,EAAerQ,OAAS,G,wBAExBT,KAAKwK,WAAaxK,KAAKsS,iBAGvBtS,KAAKmD,YAAiC,IAApBnD,KAAKwK,YAAwBlF,MAAMC,QAAQvF,KAAKwK,YAAc,GAAKxK,KAAKwK,WAAWjK,IAAIC,MAEzGR,KAAKwK,WAAiC,KAApBxK,KAAKmD,YAA4BnD,KAAKwK,W,kBAEjDxK,KAAK+P,eAAerE,mBAAcrJ,EAAUrC,KAAKqJ,QAAQrJ,KAAKwK,WAAWxK,KAAKoM,eAAerD,eAAe/I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SAASrC,MAAM8J,EAAe9Q,KAAK6L,Y,WAEnJ,SAA5B7L,KAAK8Q,eAAe7K,I,qBAGnBoL,EAAerR,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,QACzDR,KAAKqJ,SAAS5I,SAAWT,KAAKiR,oBAErCK,EAAYtR,KAAKoM,eAAevD,kBAAkB7I,KAAKkK,SAAS3J,IAAIC,MAAMR,KAAKqJ,SACrFrJ,KAAKoM,eAAepE,gBAAgBqJ,EAAa9Q,IAAKP,KAAKqJ,QAAQiI,KAG7C,KADpBC,EAAoBvR,KAAKwR,uB,0CAIpBD,G,eAIPvR,KAAK8Q,eAAe7K,IAAM,O,kBACnBjG,KAAK0R,oB,oCAShB1R,KAAK8Q,eAAe7K,IAAM,OAEc,IAApCjG,KAAKuS,oBAAoB9R,SAEzBT,KAAKuS,oBAAsBvS,KAAKwS,4BAA4BxS,KAAK4R,aAAa5R,KAAKoM,eAAe9D,mBAGlGtI,KAAKuS,oBAAoB9R,OAAS,GAAKT,KAAKyS,iBAAmBzS,KAAKuS,oBAAoB9R,Q,qBAGlF2F,EAAUpG,KAAK6R,gBAAgB7R,KAAKuS,oBAAoBvS,KAAKyS,kBAAkBlS,IAAIC,OAEzFR,KAAKyS,mBAELzS,KAAKmD,WAAaiD,EAAQ7F,IAAIC,WAIX6B,KAFbqQ,EAAa1S,KAAK+P,eAAezC,oBAAoBlH,EAASpG,KAAKqJ,QAAQrJ,KAAKoM,eAAe9D,iB,kBAIjGkH,MAAM,gDACNmD,OAAOC,SAASC,S,mDAITH,G,0CAOqE,IAA5E1S,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,OAAOsH,KAAKrH,SAE3D6Q,EAAYtR,KAAKoM,eAAevD,kBAAkB7I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SACtFrJ,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,QAASiI,I,kBAMxEtR,KAAK0R,oB,0JAaxB,IAAIoB,EAAkB9S,KAAK+S,yBAAyB/S,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SAElF,GAAIyJ,EAAgBrS,OAAS,EAC7B,CAAC,IAAD,uBACI,YAAqBT,KAAKyR,oBAA1B,+CACA,CAAC,IADQuB,EACT,QACI,IAAK,IAAIrP,KAASmP,EAEXE,EAASzS,MAAQuS,EAAgBnP,GAAOyC,SAAW0M,EAAgBnP,GAAOoG,MAAMnG,SAASoP,EAAS/L,WAAa+L,EAASxR,OAASsR,EAAgBnP,GAAOsC,KAEvJ6M,EAAgB7O,OAAON,EAAO,IAP9C,mFAaSmP,EAAgBrS,OAAS,GAAKqS,EAAgB,GAAG/I,MAAMnG,SAAS,YAAckP,EAAgB,GAAG/I,MAAMnG,SAAS,SAAakP,EAAgBrS,OAAS,GAAKqS,EAAgB,GAAG/I,MAAMnG,SAAS,SAA+C,IAApCkP,EAAgB,GAAG/I,MAAMtJ,SAElOqS,EAAgB7O,OAAO,EAAG,GAIlC,GAAI6O,EAAgBrS,OAAS,EAC7B,CACI,IAAMoF,EAAW7F,KAAKiT,eAAeH,EAAgB,GAAI9S,KAAK6E,UAAUe,WAExE,OADA5F,KAAKmD,WAAa2P,EAAgB,GAAG1M,QAC9BpG,KAAK2K,cAAcmI,EAAgB,GAAG/I,MAAOlE,EAAUiN,EAAgB,GAAG7M,KAAI,GAIrF,GAA0B,OAAtBjG,KAAKmS,cAAoD,IAA3BnS,KAAKiR,oBAEnCjR,KAAKmS,aAAenS,KAAKkT,qBAAqBlT,KAAKqJ,SAG/CrJ,KAAKmS,aAAa1R,OAAS,GAE5B,OAAOT,KAAKoS,kBAKnB,GAAIpS,KAAKkK,SAASlK,KAAKqJ,SAAS5I,SAAWT,KAAKiR,mBAAsC,SAAjBjR,KAAKqJ,QAC1E,CAGI,IAAMW,EAAMhK,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,OAEjE,GAAIwJ,EAAIjC,GAAGtH,OAAST,KAAKiR,kBACzB,CACI,IAAM7H,EAASpJ,KAAKoM,eAAerD,eAAeiB,EAAIzJ,IAAI,MAI1D,OAHAP,KAAKoM,eAAepE,gBAAgBgC,EAAIzJ,IAAK,KAAM6I,EAAO7I,KAC1DP,KAAKgR,eAAiB,SAEfhR,KAAKwR,qBAAoB,GAMpC,OAFAxR,KAAKuQ,sBACLvQ,KAAKqQ,qBACErQ,KAAKkR,aAKZ,OAAOlR,KAAKmR,mB,0CAMHgC,GAEjB,IAAMC,EAAUpT,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,OAGrE,GADAwC,QAAQC,IAAImQ,GACRA,EAAQrL,GAAGtH,OAAS,GAAK2S,EAAQtL,KAAKrH,OAAS,EACnD,CAEI,GADAuC,QAAQC,IAAImQ,GACa,YAArBA,EAAQnM,UAA0BmM,EAAQlL,SAASzH,OAAS2S,EAAQtL,KAAKrH,OAC7E,CAEI,IAAMqF,EAAO9F,KAAK+P,eAAe/D,gBAAgBhM,KAAK6E,UAAUuO,EAAQnM,UAAU,eAClF,OAAOjH,KAAKqT,wBAAwB,2CAA2CvN,EAAK,OAAOsN,EAAQtL,KAAKsL,EAAQlL,SAASzH,QAAQ2S,EAAQ7S,KAExI,GAAyB,YAArB6S,EAAQnM,UAA0BmM,EAAQjL,OAAO1H,OAAS2S,EAAQrL,GAAGtH,OAC9E,CACI,IAAMqF,EAAO9F,KAAK+P,eAAe/D,gBAAgBhM,KAAK6E,UAAUuO,EAAQnM,UAAU,eAClF,OAAOjH,KAAKqT,wBAAwB,yCAAyCvN,EAAK,KAAKsN,EAAQ7S,IAAI6S,EAAQrL,GAAGqL,EAAQjL,OAAO1H,SAE5H,GAAI2S,EAAQjL,OAAO1H,OAAS2S,EAAQrL,GAAGtH,QAAU2S,EAAQlL,SAASzH,OAAS2S,EAAQtL,KAAKrH,OAC7F,CACI,IAAMqF,EAAO9F,KAAK+P,eAAe/D,gBAAgBhM,KAAK6E,UAAUuO,EAAQnM,UAAU,eAClF,OAAOjH,KAAKqT,wBAAwB,8BAA8BvN,EAAK,KAAKsN,EAAQtL,KAAKsL,EAAQlL,SAASzH,QAAQ2S,EAAQrL,GAAGqL,EAAQjL,OAAO1H,UAIpJ,OAAO,I,wCAMP,IAAMoF,EAAW,6BAA+B7F,KAAKmG,OAAOnG,KAAKmS,aAAa,GAAG3B,WAAa,IACxFvL,EAAUjF,KAAK2K,cAAc3K,KAAKmS,aAAa,GAAG9J,GAAIxC,EAAU,YAAW,GAGjF,OAFA7F,KAAKmD,WAAanD,KAAKmS,aAAa,GAAG3B,UACvCxQ,KAAKmS,aAAamB,QACXrO,I,uCAIV,IAuBOsO,EAvBR,OAEI,GAA0B,OAAtBvT,KAAKmS,cAAoD,IAA3BnS,KAAKiR,oBAGnCjR,KAAKmS,aAAenS,KAAKkT,qBAAqBlT,KAAKqJ,SAE/CrJ,KAAKmS,aAAa1R,OAAS,GAE3B,OAAOT,KAAKoS,kBAMpB,GAAgF,IAA5EpS,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,OAAOsH,KAAKrH,QAAiBT,KAAKiR,kBAAoB,GAAsB,SAAjBjR,KAAKqJ,QACzH,CACI,IAAIiI,EAAYtR,KAAKoM,eAAevD,kBAAkB7I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SACpFrJ,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,QAASiI,GA6B/E,OArBItR,KAAKwT,oBAAsBxT,KAAKyT,gBAAgBhT,QAE5CT,KAAKkK,SAASlK,KAAKqJ,SAAS5I,SAAWT,KAAKiR,oBAE7CjR,KAAKqJ,QAA2B,SAAjBrJ,KAAKqJ,QAAqB,KAAM,OAC/CrJ,KAAKiR,kBAAoB,GAG5BsC,EAAsBvT,KAAK0T,mBAAmB1T,KAAKkK,SAASlK,KAAKqJ,SACjErJ,KAAKiR,qBAILsC,EAAsB1T,QAAQV,QAAQa,KAAKyT,iBAG/CzT,KAAK8Q,eAAe7K,SAAM5D,EAC1BrC,KAAK8Q,eAAenN,MAAQ,EAC5B3D,KAAKyR,oBAAsB,GAGpB,IAAI5R,SAAQ,SAAAV,GAAYoU,EAAoBpD,MAAK,SAACxN,GACrD,EAAKwP,aAAe,KACpBhT,EAAS,EAAKwU,sBAAsBhR,EAAQ,cAAc,EAAK0G,kB,2CAIjDA,GAElB,IAAIuK,EAAa,GADrB,uBAEI,IAAI,IAAJ,IAAkB5T,KAAK4R,aAAvB,+CACA,CAAC,IADOiC,EACR,QAEQxL,EAAKrI,KAAK6R,gBAAgBgC,EAAOtT,IAAIC,OACzC,GAAI6H,EAAGmI,UAAU/P,OAAS,EAC1B,CACI,IAAIqT,EAAiBzL,EAAG9H,IAAIC,MAC5B,GAAmC,YAA/BR,KAAKmG,OAAOkC,EAAG7G,KAAKhB,QAAwB6H,EAAGlH,mBAAmByC,SAAS,mDAC/E,CACI,IAAMmQ,EAAY/T,KAAK6E,UAAL,UACduE,EAAS,GAFjB,uBAGI,YAAiB2K,EAAjB,+CACA,CAAC,IADQvS,EACT,QACE4H,EAASA,EAAOrF,OAAO/D,KAAKoM,eAAe1D,sBAAsBlH,EAAMxB,KAAKkK,SAAS3J,IAAIC,SAL/F,kFAOQ4I,EAAO3I,OAAS,IAChBqT,EAAiB1K,EAAO,IAXpC,2BAeI,YAAsBf,EAAGmI,UAAzB,+CACA,CAAC,IADQA,EACT,QACIoD,EAAWjT,KAAK,CAAC0H,GAAIyL,EAAgBtD,UAAWA,KAjBxD,qFAPR,kFA6BI,GAAe,SAAZnH,EACH,CAAC,IAAD,uBACI,YAAsBrJ,KAAKkK,SAASsG,UAApC,+CACA,CAAC,IADQA,EACT,QACIoD,EAAWjT,KAAK,CAAC0H,GAAIrI,KAAKkK,SAAS3J,IAAIC,MAAOgQ,UAAWA,KAHjE,mFAOA,IAAK,IAAI7M,KAASiQ,GAE0E,IAApF5T,KAAKoM,eAAe4H,qBAAqB,UAAUJ,EAAWjQ,GAAO6M,YAErEoD,EAAW3P,OAAON,EAAO,GAKjC,OAAOiQ,I,oCAMT,IAAIhM,EAAY5H,KAAKoM,eAAe9D,eAIlC,OADUtI,KAAK6P,gBAAgB/E,YAAYlD,K,8CAKtBpG,EAAMsE,EAAMuD,EAAS4K,EAAOC,EAAKC,EAAczM,GAGpElG,GAA0B,aAAjB2S,EAA+B,UAAY,GACpD,IAAIC,EAAQtO,EAAKuO,MAAM9V,KAAI,SAAA+V,GACvB,MAAO,CAAC,KAAQA,EAAW,IAAM5M,EAAM,OAAS2B,EAASjC,UAAW,WAGpEmN,EAAMzO,EAAKuO,MAAM9V,KAAI,SAAA+V,GACrB,MAAO,CAAC,KAAQA,EAAW,IAAM5M,EAAM,OAAS2B,EAASjC,UAAW,SAElEoN,GAA2D,IAA9CxU,KAAKoM,eAAezE,eAAesM,GAAmBjU,KAAKmG,OAAO8N,GAASjU,KAAKoM,eAAezE,eAAesM,GAAOjN,MAClIyN,GAAuD,IAA5CzU,KAAKoM,eAAezE,eAAeuM,GAAiBlU,KAAKmG,OAAO+N,GAAOlU,KAAKoM,eAAezE,eAAeuM,GAAKlN,MAChI,MAAO,CAAC,QAAWuN,EAAIxQ,OAAOqQ,GAAS,MAAS,sCAAuC,KAAQ5S,EAAM,OAAU,CAACgT,EAAYC,M,uCAG7G3K,EAAUgI,EAASpK,EAAO2B,EAAQpC,EAAUyN,EAAa1C,GASxE,IAAIiC,EACAC,EAEAS,EACAC,EAGA9O,EADAqO,EAAerC,EAAQ5L,QAAQ,gBAAiB,IAEhD+L,EAAgBjS,KAAK6E,UAAUoN,cAInC,IAAI3M,MAAMC,QAAQuE,GAcd,OAAO,EAGX,GAhBGmK,EAAQnK,EAAS,GACjBoK,EAAMpK,EAAS,GAIf6K,GAA0B,KAH1BA,EAAY3U,KAAKoM,eAAe3D,mBAAmBwL,IAGjBhN,EAAW0N,EAC7CC,GAAsB,KAHtBA,EAAU5U,KAAKoM,eAAe3D,mBAAmByL,IAGnBjN,EAAW2N,EACzC9O,EAAO9F,KAAK6U,SAAS5C,EAAe,CAAC,OAAQ0C,EAAW,KAAMC,IASjD,YAAZ9C,EAEA,OAAO,EAQX,IANa,IAAThM,GAAmBqO,EAAavQ,SAAS,SAEzC4L,MAAM,mDAIL2E,EAAavQ,SAAS,SAA6B,gBAAjBuQ,GAAmD,aAAjBA,GAAqD,IAAtBrO,EAAKmG,MAAMxL,OAsB9G,IAAI0T,EAAavQ,SAAS,QAK3B,OAFA5D,KAAKoM,eAAenE,YAAYjI,KAAKoQ,WAAW0B,QAASmC,EAAOC,OAAK7R,EAAW,QAAS2P,EAAW,GAAIA,EAAW,KAE5G,EAKR,IAAIjS,EAAS+F,EAAKmG,MAAM1N,KAAI,SAAC+V,GAC5B,MAAO,CAAC,KAAQA,EAAW,IAAM5M,EAAM,OAAS2B,MAKjD,OAFArJ,KAAKmD,WAAauE,EAEX,CAAC,QAAW3H,EAAQ,MAAS,qCAAsCC,KAAKmG,OAAO8N,GAAQ,QAAUjU,KAAKmG,OAAO+N,GAAK,IAAK,KAAQ,4BAjCrI,MAAI,UAAWpO,GAAQ,QAASA,GAG5B9F,KAAKoQ,WAAW0B,QAAiC,IAAtBhM,EAAKmG,MAAMxL,OAAgBqF,EAAKmG,MAAM,GAAKjM,KAAKoQ,WAAW0B,QAC/E9R,KAAKqT,wBAAwB,oBAAoBvN,EAAKuD,EAAQ4K,EAAMC,EAAIC,EAAazM,KAK5FgN,EAAqC,IAAtB5O,EAAKmG,MAAMxL,OAAgBqF,EAAKmG,MAAM,GAAKyI,EAC1D1U,KAAKoM,eAAenE,YAAYyM,EAAaT,EAAOC,OAAK7R,EAAW,QAAS,GAAI,KAE1E,K,+BA2BTsJ,EAAOmJ,GAEb,IAAIC,GAAW,EADnB,uBAEI,YAAiBpJ,EAAjB,+CACA,CAAC,IADQ7F,EACT,QACIiP,GAAW,EACX,IAAK,IAAIpR,EAAQ,EAAGA,EAAQmR,EAAUrU,OAAQkD,GAAS,EACvD,CAAC,IAAD,uBACI,YAAqBmC,EAAKgP,EAAUnR,IAApC,+CACA,CAAC,IADQsD,EACT,QACI,GAAIjH,KAAKsG,sBAAsBwO,EAAUnR,EAAQ,GAAGsD,IAA0B,MAAbA,EACjE,CACI,IAAiB,IAAb8N,EAEA,OAAOjP,EAEXiP,GAAW,EACX,QAVZ,qFANR,kFAwBI,OAAO,I,0CAGU3H,GACpB,IAAD,OAEIpN,KAAKqJ,QAAU,OACfrJ,KAAKkK,SAAWlK,KAAKsL,UAAUtL,KAAKqQ,oBACpCrQ,KAAK8N,aAAeV,EAGpB,IACI4H,EADAlP,EAAO9F,KAAK6E,UAAUuI,GAsB1B,OAjBI4H,EAFDhV,KAAKyT,gBAAgBhT,SAAWT,KAAKwT,kBAEdxT,KAAK0T,mBAAmB1T,KAAKkK,SAASlK,KAAKqJ,SAI3CxJ,QAAQV,QAAQa,KAAKyT,iBAI/CzT,KAAKiR,oBAKLjR,KAAKoM,eAAenE,YAAYmF,EAAc,GAAK,GAAIpN,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKkK,SAASlD,MAAMxG,OAI7F,IAAIX,SAAQ,SAAAV,GAAY6V,EAAoB7E,MAAK,SAAAxN,GACpDxD,EAAS,EAAKwU,sBAAsBhR,EAAQ,sBAAuB,EAAK0G,QAASvD,Y,4CAKlEgE,EAAUnB,EAAQU,EAASvD,GAS9C,GALAA,OAAgBzD,IAATyD,EAAqB9F,KAAK6E,UAAU7E,KAAK8N,cAAgBhI,EAChE9F,KAAKyT,gBAAkB3J,EACvB9J,KAAK4R,aAAe9H,EAAS9J,KAAKwT,mBAClCxT,KAAKwT,oBACLxT,KAAKsQ,cAAgBtQ,KAAK4R,aAAanR,OAAS,EACjC,wBAAXkI,IAA4H,IAAxF3I,KAAKoM,eAAezE,eAAe3H,KAAK4R,aAAa5R,KAAKsQ,eAAe/P,IAAIC,OACrH,CAEI,IAwJQyU,EAxJFC,EAAclV,KAAKsS,iBAGrBxB,EAAiB,GACjB5P,EAAa,GACbmH,GAAK,EACL8M,GAAe,EACfC,GAAS,EACThM,EAAS,KACb,GAAI9D,MAAMC,QAAQ2P,KAAmC,IAAnBA,EAAY,GAC9C,CAEIE,EAASF,EAAY,GACrBhU,EAAagU,EAAY,GAAGjO,SAC5B,IAAMoO,EAAQrV,KAAK6R,gBAAgBqD,EAAY,GAAG3U,MAEpC,IAAV8U,GAAmBA,EAAM1H,MAAMlN,OAAS,IAGxC4H,EAAKrI,KAAK6R,gBAAgBwD,EAAM1H,MAAM,IACtC3N,KAAKwK,WAAanC,EAClB8M,GAAe,GAEnBnV,KAAKoM,eAAepE,gBAAgBkN,EAAY,GAAG3U,IAAI,cAAcP,KAAKiR,mBAAkB,IAEvFjR,KAAKiR,kBAAoB,GAAKmE,EAAOvN,aAAapH,OAAS,KAAOT,KAAK8Q,eAAenN,MAAQ,GAE/F3D,KAAK8Q,eAAenN,aAKxB3D,KAAKwK,WAAa0K,GAClB7M,EAAKrI,KAAK6R,gBAAgB7R,KAAKwK,WAAWjK,IAAIC,QACvCS,OAAOR,OAAS,IAErBS,EAAalB,KAAKoM,eAAe3D,mBAAmBJ,EAAGpH,OAAO,KAIpE,GAAmB,KAAfC,IAAoC,IAAfA,EACzB,CAII,IAAM4I,EAAW9J,KAAKoM,eAAekJ,sBAAsBF,EAAO7U,KAE9DgV,EAAW,EACXC,EAAU,GAEd,IAAK,IAAI7R,KADTX,QAAQC,IAAI6B,KAAK3C,MAAM2C,KAAKC,UAAU+E,KACpBA,EAClB,CAEI,GAAqB,UADV9J,KAAKoM,eAAezE,eAAemC,EAASnG,IAC9C4D,QACT,CACIuC,EAASrJ,OAASiP,SAAS/L,GAAS+L,SAAS,GAC7C,OAIR1M,QAAQC,IAAI6G,GACZ,IAAK,IAAInG,EAAQmG,EAASrJ,OAAS,EAAGkD,GAAS,EAAGA,IAAS,CAEvD,IAAIyC,EAAUpG,KAAKoM,eAAezE,eAAemC,EAASnG,IAG1D,MAFAmN,EAAiB9Q,KAAK+P,eAAe5C,kBAAkBnN,KAAK+P,eAAe/D,gBAAgBhM,KAAK6E,UAAU7E,KAAK8N,cAAc9N,KAAKqJ,SAAQ,EAAOrJ,KAAK2R,kBAAkB3R,KAAK4R,eAAexL,EAAQa,SAAUsO,IAE3L9U,OAAS,GAO5B,CAEI,GAAI+U,EAAQ5R,SAASwC,EAAQa,UAC7B,CACI6J,EAAiB,GACjB,MAIA1H,EAAShD,EACTpG,KAAK8Q,eAAe7K,IAAM/E,EAC1B4P,EAAiB0E,EACjB,MAjBJA,EAAU1E,EACV9Q,KAAK8Q,eAAenN,QACpB4R,EAAWvV,KAAK8Q,eAAenN,MAoB/BA,IAAUmG,EAASrJ,OAAS,IAE5BT,KAAK8Q,eAAe7K,IAAM/E,EAC1B4P,EAAiB0E,GAIrB1E,EAAerQ,OAAS,IAExBT,KAAK8Q,eAAehL,KAAO9F,KAAK+P,eAAe/D,gBAAgBlG,EAAKuD,EAASrJ,KAAK2R,kBAAkB3R,KAAK4R,gBAIjH,OAA8B,IAA1Bd,EAAerQ,QAEJ,IAAP4H,IAAiC,IAAjB8M,EAETnV,KAAKmR,iBAED,wBAAXxI,IAAsD,IAAjBwM,GAOrCnV,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM6I,EAAS+L,EAAO7U,KAE5EP,KAAKmD,WAAaiS,EAAO7U,IAEzBP,KAAKgR,eAAiB,SAIfhR,KAAKwR,qBAAoB,IAGhB,wBAAX7I,IAAsD,IAAjBwM,IAAoC,IAAXC,GASnEpV,KAAKmD,WAAanD,KAAKwK,WAAWjK,IAAIC,MAC/BR,KAAK+P,eAAerE,cAAc5F,EAAKuD,EAAQhB,EAAGrI,KAAKoM,eAAerD,eAAe/I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SAASrC,WAAM3E,EAAUrC,KAAK6L,aANzJ7L,KAAKoM,eAAepE,gBAAgBhI,KAAKkK,SAAS3J,IAAIC,MAAM6I,EAAS+L,EAAO7U,KACrEP,KAAKmR,mBAcXnR,KAAKmD,YAFE,IAAPkF,EAEkBrI,KAAKwK,WAAWjK,IAAIC,MAIpB,GAGP,OAAX4I,GAEApJ,KAAKmD,WAAaiG,EAAO7I,IACzB0U,EAAY7L,EAAOpC,OAInBiO,EAAYjV,KAAKoM,eAAerD,eAAe/I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SAASrC,MAIlFhH,KAAK+P,eAAerE,mBAAcrJ,EAAUgH,EAAQhB,EAAG4M,EAAUnE,EAAe9Q,KAAK6L,YAKjG,IAAM/F,EAAO9F,KAAK6E,UAAU7E,KAAK8N,cAajC,OAVA9N,KAAKwK,WAAaxK,KAAK4R,aAAa5R,KAAKsQ,eAMzCtQ,KAAKsQ,gBAELtQ,KAAKmD,WAAanD,KAAKwK,WAAWjK,IAAIC,MAE9BR,KAAK+P,eAAerE,cAAc5F,EAAKuD,EAAQrJ,KAAKwK,WAAYxK,KAAKoM,eAAerD,eAAe/I,KAAKkK,SAAS3J,IAAIC,MAAOR,KAAKqJ,SAASrC,WAAM3E,EAAUrC,KAAK6L,a,kDAKlJtF,EAAMqB,GAG/B,IAAI2K,EAAsB,GACtBkD,GAAc,EAHtB,uBAII,YAAoBlP,EAApB,+CACA,CAAC,IADQH,EACT,QACIqP,GAAc,EADlB,2BAEI,YAAiB7N,EAAjB,+CACA,CAAC,IADQ5G,EACT,QACOoF,EAAQ7F,IAAIC,QAAUQ,EAAKT,MAE1BkV,GAAc,IAN1B,mFAUwB,IAAhBA,GAAyBzV,KAAK0V,iBAAiBtP,IAAcpG,KAAKkM,iBAAiB9F,IAEnFmM,EAAoB5R,KAAKyF,IAjBrC,kFAoBI,OAAOmM,I,yCAISrI,EAAUjE,GAC7B,IAAD,OAEIjG,KAAK2V,sBAAwB,GAC7B3V,KAAK4V,wBAA0B,EAE/B5V,KAAKwT,kBAAoB,EACzBxT,KAAKyT,gBAAkB,GAEvB,IAAIoC,EAAa,GAMjB,OAHAA,EAAWlV,KAAKX,KAAK4P,cAAc/M,kBAAkBqH,EAASjE,GAAKjG,KAAKiR,qBAGjEpR,QAAQiW,IAAID,GAAY1F,MAAK,SAAApQ,GAChCiD,QAAQC,IAAIlD,GACZ,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAOU,OAAQC,IAC3BX,EAAOW,GAAGD,OAAS,GAEnBV,EAAOW,GAAGqV,QAAQ,EAAKlE,gBAAgB3H,EAASjE,GAAK,EAAKgL,kBAAkB,KAE5ElR,EAAOW,GAAKX,EAAOW,GAAGnC,KAAI,SAAA8J,GAAE,OAAS,EAAKwJ,gBAAgBxJ,EAAG9H,IAAIC,WAKlET,EAAOW,GAAK,CAAC,EAAKmR,gBAAgB3H,EAASjE,GAAKvF,KAGvD,OAAOX,O,wBASZiW,GAEChT,QAAQC,IAAI,4BACZD,QAAQC,IAAI+S,K,uCASZ,GAAGhW,KAAKsQ,cAAgB,EAEpB,OAAO,EAGX,IACI2F,EADErO,EAAY5H,KAAKoM,eAAe9D,eAElCtI,KAAK0V,iBAAiB1V,KAAK4R,aAAa5R,KAAKsQ,iBAE7CtQ,KAAKsQ,gBAEetQ,KAAKsQ,cAG7B,IAHA,IAGS3M,EAAQ,EAAGA,EAAQiE,EAAUnH,OAAQkD,IAE1C,QAA8CtB,IAA1CrC,KAAK4R,aAAa5R,KAAKsQ,gBAAgC1I,EAAUjE,GAAOpD,MAAQP,KAAK4R,aAAa5R,KAAKsQ,eAAe/P,IAAIC,MAC9H,CAEI,GAAIR,KAAKkW,2BAA2BlW,KAAK4R,aAAa5R,KAAKsQ,gBAC3D,CAMI,IALA,IAAM6F,EAAUvO,EAAUjE,GAAOkE,aAAaD,EAAUjE,GAAOkE,aAAapH,OAAS,GAC/E2V,EAAgBxO,EAAUjE,GAAOyD,UAAUQ,EAAUjE,GAAOyD,UAAU3G,OAAS,GAEjF4V,EAAcrW,KAAKoM,eAAevD,kBAAkBsN,EAAQC,IAEM,IAA/DpW,KAAKoM,eAAe7B,mBAAmB8L,GAAa,IAEvDA,EAAcrW,KAAKoM,eAAe7B,mBAAmB8L,GAAY,GAGrEA,EAAcrW,KAAKoM,eAAezE,eAAe0O,GAIjD,IAAMC,EAAkBtW,KAAKoM,eAAe1B,cAAcyL,EAASC,GAfvE,uBAoBI,YAAeE,EAAf,+CACA,CAAC,IADQjO,EACT,QACIrI,KAAKoM,eAAemK,cAAclO,EAAG9H,IAAK,eAAgBP,KAAKkK,SAAS3J,IAAIC,OAC5ER,KAAKoM,eAAemK,cAAclO,EAAG9H,IAAK,YAAaP,KAAKqJ,UAvBpE,kFA0BI,MAAO,CAACgN,GAAa,GAEzBrW,KAAKsQ,gBACL3M,EAAQ,EAShB,OAFAsS,OAAwB5T,KAFxB4T,EAAWjW,KAAK4R,aAAa5R,KAAKsQ,iBAEU2F,EAC5CjW,KAAKsQ,gBACE2F,I,iDAGiB7P,GAExB,OAAIA,EAAQoQ,SAAS5S,SAAS,oD,uCAQhBwC,GACjB,IAAD,uBACI,YAAiBpG,KAAK6L,UAAtB,+CACA,CAAC,IADQ7K,EACT,QAEI,GAAIoF,EAAQ7F,IAAIC,QAAUQ,EAAKT,IAAIC,MACnC,CAAC,IAAD,uBACI,YAAiBQ,EAAKG,mBAAtB,+CACA,CAAC,IADQK,EACT,QACI,GAA0B,eAAtBxB,KAAKmG,OAAO3E,GAEZ,OAAO,GALnB,qFALR,kFAgBI,OAAO,I,+CAGgB0I,EAASb,GAGhC,IAAIzB,EAAY5H,KAAKoM,eAAe9D,eAChCmO,EAAmB,EACjBC,EAAkB,GAJ5B,uBAMI,YAAiB9O,EAAjB,+CACA,CAAC,IADQ5G,EACT,QACQA,EAAK6G,aAAajE,SAASsG,IAAalJ,EAAKoG,UAAUpG,EAAKoG,UAAU3G,OAAS,KAAO4I,GAAWrI,EAAKsG,YAAY1D,SAAS5D,KAAKiR,oBAGhIyF,EAAgB/V,KAAKK,IAXjC,kFAiBI,GAA+B,IAA3B0V,EAAgBjW,OAEhB,OAAOiW,EAGO1W,KAAKoM,eAAezE,eAAe3H,KAAKkK,SAAS3J,IAAIC,OAAvE,IACImW,EAAe3W,KAAK+P,eAAe5D,wBAAwBuK,EAAgBD,GAAkBzW,KAAKoM,gBAMtG,IAHAqK,IAGOA,EAAmBC,EAAgBjW,QAAkC,IAAxBkW,EAAalW,QAG7DkW,EAAe3W,KAAK+P,eAAe5D,wBAAwBuK,EAAgBD,GAAmBzW,KAAKoM,gBACnGqK,IAIJ,OAAOE,I,uCAIOvQ,GAGd,MAAI,UAAWA,GACkB,IAAzBA,EAAQuH,MAAMlN,QAA2C,IAA3B2F,EAAQoG,QAAQ/L,QAA+C,IAA/B2F,EAAQwQ,YAAYnW,S,sCAS7EF,GAChB,IAAD,uBACI,YAAiBP,KAAK6L,UAAtB,+CACA,CAAC,IADQ7K,EACT,QACI,GAAIA,EAAKT,IAAIC,QAAUD,EACnB,OAAOS,GAJnB,kFAOI,OAAO,I,6CAGaT,EAAKmD,EAAUlD,GAEnC,IAAK,IAAIE,EAAI,EAAGA,EAAIV,KAAK6L,UAAUpL,OAAQC,IACvC,GAAIV,KAAK6L,UAAUnL,GAAGH,IAAIC,QAAUD,EAGhC,OADAP,KAAK6L,UAAUnL,GAAGgD,GAAUlD,MAAQA,GAC7B,EAGf,OAAO,I,qCAGK2E,GAEZ,OAAOnF,KAAKoM,eAAezC,eAAexE,K,2CAGxBW,EAAMgE,GAExB,IAAI/J,EAAS,GADjB,uBAEI,YAAoB+J,EAApB,+CACA,CAAC,IADQ1D,EACT,QACQa,EAAWjH,KAAKoM,eAAe3D,mBAAmBrC,GAEtD,IAAiB,IAAba,GAAsBnB,EAAK9F,KAAK6W,WAAWrK,QAAQ5I,SAASqD,GAChE,CACI,IAAIxB,GAAqB,IAAbwB,EAAsBjH,KAAKmG,OAAOC,GAAU,KAAKa,EAAS,IAAMjH,KAAKmG,OAAOC,GACxFrG,EAAOY,KAAK,CAAC,KAAQ8E,EAAM,IAAMW,MAT7C,kFAaI,OAAOrG,I,4CAKPC,KAAKmS,aAAe,KAEpBnS,KAAKiR,kBAAoB,EAEzBjR,KAAK4R,aAAe,GACpB5R,KAAKwT,kBAAoB,EACzBxT,KAAKyT,gBAAiB,GACtBzT,KAAKuS,oBAAsB,GAC3BvS,KAAKyS,iBAAmB,EAExBzS,KAAK4V,wBAA0B,EAC/B5V,KAAK2V,sBAAwB,GAE7B3V,KAAKmD,WAAa,GAClBnD,KAAKqJ,QAAU,GACfrJ,KAAKwB,KAAO,GAGZxB,KAAKwK,WAAa,GAClBxK,KAAKoQ,WAAa,GAElBpQ,KAAKgR,gBAAiB,EAGtBhR,KAAK8Q,eAAiB,CAAC7K,SAAK5D,EAAWyD,KAAM,GAAInC,MAAO,GAGxD3D,KAAKyR,oBAAsB,K,kCAKlBqF,EAAQ3I,GAEjB,GAAwD,IAApDnO,KAAKgQ,kBAAkB9B,kBAAkBzN,OAC7C,CACI,IAAIsW,EAAU,GACd,IAAK,IAAI9Q,KAAO6Q,EAGQ,cAAhBA,EAAO7Q,GAEP8Q,EAAQ9Q,GAAOnB,KAAK3C,MAAM2C,KAAKC,UAAU/E,KAAK6L,YAElB,kBAAhBiL,EAAO7Q,GAEnB8Q,EAAQ9Q,GAAO,GAEa,kBAAhB6Q,EAAO7Q,GAEnB8Q,EAAQ9Q,GAAO,EAEVX,MAAMC,QAAQuR,EAAO7Q,IAE1B8Q,EAAQ9Q,GAAO,GAEa,kBAAhB6Q,EAAO7Q,KAEnB8Q,EAAQ9Q,GAAO,IAGvBjG,KAAKgQ,kBAAkBgH,KAAKD,GAIhC/W,KAAKgQ,kBAAkBiH,YAAYH,EAAOhS,KAAK3C,MAAM2C,KAAKC,UAAU/E,KAAKoM,eAAe9D,iBAAkB6F,K,6BAK1G,IAAM+I,EAAUlX,KAAKgQ,kBAAkBmH,OAGvC,QAA0B9U,IAAtB6U,EAAQtP,gBAAkDvF,IAAvB6U,EAAQ5T,WAY3C,OATAtD,KAAKgQ,kBAAkBoH,QACvBpX,KAAKoM,eAAe+K,KAAK,IACzBnX,KAAKuQ,sBACLvQ,KAAKoQ,WAAa,GAClBpQ,KAAKqQ,mBAAqB,EAC1BrQ,KAAKiR,kBAAoB,EACzBjR,KAAKkK,SAAW,GAChBlK,KAAKsQ,cAAgB,EACrBtQ,KAAK8N,aAAe,IACb,EAKX,IAAK,IAAIuJ,KAHTrX,KAAKoM,eAAe+K,KAAKD,EAAQtP,WAEjC5E,QAAQC,IAAI6B,KAAK3C,MAAM2C,KAAKC,UAAU/E,KAAK8Q,kBAC1BoG,EAAQ5T,WAEmB,kBAA7B4T,EAAQ5T,WAAW+T,IAE1BrU,QAAQC,IAAIoU,GACZrU,QAAQC,IAAI6B,KAAK3C,MAAM2C,KAAKC,UAAU/E,KAAKqX,MAC3CrX,KAAKqX,GAAQvS,KAAK3C,MAAM2C,KAAKC,UAAUmS,EAAQ5T,WAAW+T,MAK1DrX,KAAKqX,GAAQH,EAAQ5T,WAAW+T,GAKxC,OADArU,QAAQC,IAAI6B,KAAK3C,MAAM2C,KAAKC,UAAU/E,KAAK8Q,kBACpC,CAAC3C,eAAgB+I,EAAQ/I,kB,sCAKhC,OAAOnO,KAAKiQ,qBAAqBqH,UAAUtX,KAAKoM,eAAe9D,oB,GAl1C1B5D,G,SCCvC6S,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAaR1M,YAAc,SAAC2M,GAGb,EAAKC,SAAS,CAACD,IAAKA,KAfpB,EAAKE,MAAQ,CACXF,IAAK,IAIP,EAAKG,gBAAkB,IAAIjI,EAC3BkI,IAAQC,WAAW,CACjBC,aAAa,EACZC,SAAU,oEAVI,E,sEAoBT,IAAD,OACP,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACf,yBAAKA,UAAU,sBAAsBvZ,GAAG,SACpC,2BAAOwZ,QAAQ,+BAAf,cAEA,yBAAKD,UAAU,iDAAiDvZ,GAAG,+BAC/D,yBAAKyZ,IAAK3V,EAAQ,KAAgByV,UAAY,YAAaG,IAAI,iBAKrE,yBAAKH,UAAU,sBAAsBvZ,GAAG,SAEtC,kBAAC,IAAD,CACA2Z,eAAiB,IACf,cAAGC,OAAH,EAAWC,QAAX,IAAoBC,EAApB,EAAoBA,eAApB,4DACJ,kBAAC,IAAMC,SAAP,KACE,yBAAKR,UAAU,SACf,2BAAOC,QAAQ,+BAAf,cACE,4BAASD,UAAY,2BAA2BS,QAASF,GAAzD,WAEF,yBAAKP,UAAY,UACjB,kBAAC,IAAD,KACA,yBAAKU,wBAAyB,CAACC,OAAQ,EAAKjB,MAAMF,KAAMQ,UAAU,kBAAkBvZ,GAAG,uCAavF,kBAAC,EAAD,CAAcma,cAAiB7Y,KAAK8K,oB,GA3D3BgO,IAAMC,WAiGrBC,GAvBkBF,IAAMC,UAeRD,IAAMC,U,YAU1B,WAAYvB,GACX,IAAD,8BACE,4CAAMA,KAQRyB,aAAe,SAACC,GACd,EAAKxB,SAAS,CAAEvS,OAAQ+T,EAAMC,OAAO3Y,SAVvC,EAaA4Y,aAAe,SAACF,QACA7W,IAAV6W,GAEFA,EAAMG,iBAQN,EAAKzB,gBAAgB1G,aAAaf,MAAK,SAAAxN,GACvC,EAAK+U,SAAS,CAAC4B,YAAY,EAAOC,OAAQ,GAAGtU,QAAStC,EAAQsC,QAASC,MAAOvC,EAAQuC,MAAOQ,aAAc/C,EAAQ+C,aAAclE,KAAMmB,EAAQnB,KAAMgY,gBAAgB,QAzBzK,EA8BAC,UAAY,aA9BZ,EAwCAC,YAAc,SAACtM,EAAclE,EAAa1H,GACvC,IAAI2D,EAAS,EAAKwS,MAAMxS,OACpBgS,GAAO,EACPO,GAAW,EACXrQ,EAAgB,EAAKsQ,MAAMtQ,cAE/B,GAAgB,KAAXlC,IAA2C,IAA1B,EAAKwS,MAAMgC,YAAgC,SAATnY,GAAmD,SAA/B4L,EAAahD,cAEvFoF,MAAM,yCAEH,GAAe,KAAXrK,GAAkBA,EAAOyU,MAAM,uBAKxC,CACG,GAAa,SAATpY,EACJ,CAEE,IAAM0V,EAAU,EAAKU,gBAAgBT,OACrC,IAAgB,IAAZD,EAEF,EAAKkC,eACL1B,GAAW,MAGb,CACE,IAAMvJ,EAAiB+I,EAAQ/I,eAC/Bf,EAAee,EAAe,GAC9BjF,EAAciF,EAAe,GAC7B3M,EAAQ2M,EAAe,GACvBhJ,EAASgJ,EAAe,GACxB9G,EAAgB8G,EAAe,GAE/BgJ,GAAO,GAMI,MAFfhS,EAASA,EAAOe,QAAQ,MAAO,QAEgB,IAA1B,EAAKyR,MAAMgC,YAAwB,EAAK/B,gBAAgBjO,eAAexE,IAItE,IAAbuS,GAGN,EAAKE,gBAAgB1C,YAAY9H,EAAalE,EAAY1H,EAAM2D,EAAQkC,GAAe8I,MAAK,SAAAxN,GAE3F,IAAa,IAATwU,EACJ,CACE,IAAI7T,EAAcpE,OAAO2a,oBAAoB,EAAKjC,iBAC9CkC,EAAgB,GAFtB,uBAGE,YAAiBxW,EAAjB,+CACA,CAAC,IADQ+T,EACT,QACQA,EAAKzT,SAAS,eAA0B,cAATyT,GAAiC,cAATA,GAErC,oBAATA,IAETyC,EAAczC,GAAQ,EAAK0C,WAAW,EAAKnC,gBAAgBP,MATrE,kFAcE,EAAKO,gBAAgBoC,YAAYF,EAAe,CAAC1M,EAAalE,EAAY1H,EAAM2D,EAAQ,EAAKwS,MAAMtQ,gBAGrG,IAAIoQ,EAAM,EAAKG,gBAAgBqC,cAC/B,EAAKvC,SAAS,CAACzS,QAAStC,EAAQsC,QAAQzD,KAAMmB,EAAQnB,KAAM0D,MAAOvC,EAAQuC,MAAMoU,YAAY,EAAKnU,OAAQ,GAAIwU,WAAYhX,EAAQwC,OAAQO,aAAc/C,EAAQ+C,aAAc2B,eAAc,KAEhL,IAARoQ,GAEF,EAAK3M,YAAY2M,GAGhB,EAAKE,MAAMnW,KAAKoC,SAAS,QAE1B,EAAKsW,yBAnCT1K,MAAM,8DA9BTA,MAAM,8DApDX,EA+HAuK,WAAa,SAAC1C,GAEZ,OAAI/R,MAAMC,QAAQ8R,IAAyB,kBAATA,EAG1BvS,KAAK3C,MAAM2C,KAAKC,UAAUsS,IAIzBA,GAxIX,EA6IAvM,YAAc,SAACqP,GAOXtC,IAAQuC,OAAO,MAAMD,GALV,SAAA1C,GACT,EAAKC,SAAS,CAACD,IAAIA,IACnB,EAAKD,MAAMqB,cAAcpB,OAjJ/B,EAyJA4C,iBAAmB,WAGjB,EAAK3C,SAAS,CAACiC,YAAa,EAAKhC,MAAMgC,cACT,IAA1B,EAAKhC,MAAMgC,YAEb,EAAKjC,SAAS,CAACvS,OAAQ,GAAIkC,eAAe,IAC1CnD,IAAE,gBAAgBoW,OAAO,KAAM,KAAKC,QAAQ,KAAK,WAC/CrW,IAAE,gBAAgBsL,MAAM,YAK1B,EAAKkI,SAAS,CAACvS,OAAQ,GAAIkC,eAAgB,KAtK/C,EA2KA6S,oBAAsB,WAEpB,IAAMM,EAAU,IAAIC,KAAK,CAAC,EAAK9C,MAAMF,KAAM,CAACjW,KAAK,gCAC3C+X,EAASmB,IAAIC,gBAAgBH,GACnC,EAAK9C,SAAS,CAAC6B,OAAQA,KA/KzB,EAmLAqB,qBAAuB,WAErB,IAAMC,EAAa/V,KAAKC,UAAU,EAAK6S,gBAAgBkD,iBACvDC,IAAaF,EAAY,oBApLzB,EAAKlD,MAAQ,CACb6B,gBAAgB,EAAM9T,aAAc,GAAI2B,eAAe,EACvDpC,QAAS,GAAI0U,YAAY,EAAOxU,OAAQ,GAAI3D,KAAM,GAAI8X,YAAY,EAAO7B,IAAK,IAE9E,EAAKG,gBAAkB,IAAIjI,EAN7B,E,sEAyLU,IAAD,OACP,OACE,yBAAKsI,UAAY,4CAEd,4BAAQzW,KAAK,UAAUyW,UAAYjY,KAAK2X,MAAM6B,eAAiB,kBAAoB,SAAUwB,cAAY,QAAQC,cAAY,gBAAiBvC,QAAW1Y,KAAKoZ,cAA9J,wBAGD,yBAAKnB,UAAajY,KAAK2X,MAAM6B,eAAiB,SAAW,IACzD,4BAAKxZ,KAAK2X,MAAMzS,OAChB,yBAAK+S,UAAY,mCACjB,yBAAKA,UAAY,iCACf,4BAASzW,KAAO,SAASyW,UAAa,2BAA6BS,QAAW1Y,KAAKqa,iBAAkBa,SAAwC,KAA5Blb,KAAK2X,MAAMjS,cAAuB1F,KAAK2X,MAAMnW,KAAKoC,SAAS,iBAAmB5D,KAAK2X,MAAMnW,KAAKoC,SAAS,QAA8B,uBAApB5D,KAAK2X,MAAMnW,OAA0D,IAA1BxB,KAAK2X,MAAMgC,YAAmD,KAA5B3Z,KAAK2X,MAAMjS,aAAsB,oBAAsB,eACtW,4BAAQlE,KAAO,SAASyW,UAAU,2BAA2BS,QAAW,kBAAM,EAAKgB,iBAAYrX,OAAUA,EAAU,SAAS6Y,UAAalb,KAAK2X,MAAM2B,YAApJ,QACA,4BAAQ9X,KAAK,SAASyW,UAAU,6BAA6BkD,eAAa,QAAQzC,QAAS,SAAC5Z,GAAY6T,OAAOyI,QAAQ,wDAAwDzI,OAAOC,SAASC,WAA/L,YAGF,yBAAKoF,WAAwC,IAA1BjY,KAAK2X,MAAMgC,WAAsB,mBAAqB,UACjE,yBAAK1B,UAAY,yBACX,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBvZ,GAAG,IAAtC,yBAEF,2BAAO2c,YAA2C,KAA5Brb,KAAK2X,MAAMjS,aAAsB,6BAA+B1F,KAAK2X,MAAMjS,aAAiBlE,KAAK,OAAOyW,UAAU,eAAeqD,SAAYtb,KAAKiZ,aAAezY,MAASR,KAAK2X,MAAMxS,UAEnN,wBAAI8S,UAAajY,KAAK2X,MAAM1S,QAAQsW,OAAS,EAAI,wBAA0B,UAA3E,4BAEN,yBAAKtD,UAAY,0BACb,kBAAC,EAAD,CAAehT,QAASjF,KAAK2X,MAAM1S,QAASuW,sBAAyBxb,KAAK4a,qBAAsBrB,OAAUvZ,KAAK2X,MAAM4B,OAAQb,QAAW1Y,KAAK0Z,YAAalY,KAAQxB,KAAK2X,MAAMnW,KAAMia,QAAWzb,KAAK2X,MAAMgC,WAAYjU,aAAgB1F,KAAK2X,MAAMjS,gBAEpP,yBAAKgW,MAAM,mDAAoDC,KAAK,SAApE,+C,GAxNmB7C,IAAMC,YAkO3B6C,E,YACJ,WAAYpE,GAAQ,IAAD,8BACjB,4CAAMA,KACDqE,KAAO/C,IAAMgD,YAFD,E,sEAMT,IAAD,OACP,OAAI9b,KAAKwX,MAAMhW,KAAKoC,SAAS,qBAGzB,yBAAKqU,UAAU,wBACb,2BAAOA,UAAU,qDAAqDjY,KAAKwX,MAAMiE,QAAQ,IACzF,2BAAOxD,UAAU,qDAAqDjY,KAAKwX,MAAMiE,QAAQ,IACzF,4BAAQM,IAAM,UAAU9D,UAAY,mDAC/BjY,KAAKwX,MAAMvS,QAAQ+W,QAAO,SAACC,GACxB,MAAyB,SAAlBA,EAAI7U,aACZ7I,KAAI,SAACyL,GACP,OAAO,4BAAQxJ,MAASwJ,EAAIvE,MAAOuE,EAAIvE,UAI5C,4BAAQsW,IAAM,QAAQ9D,UAAY,mDAC7BjY,KAAKwX,MAAMvS,QAAQ+W,QAAO,SAACC,GACxB,MAAyB,OAAlBA,EAAI7U,aACZ7I,KAAI,SAACyL,GACP,OAAO,4BAAQxJ,MAASwJ,EAAIvE,MAAOuE,EAAIvE,UAI5C,4BAAQwS,UAAY,uCAAuCS,QAAW,kBAAM,EAAKlB,MAAMkB,QAAQ,CAAC,EAAKmD,KAAKK,QAAQ1b,MAAO,EAAKqb,KAAKM,MAAM3b,OAAQ,KAAM,EAAKgX,MAAMhW,QAAlK,SAIGxB,KAAKwX,MAAMhW,KAAKoC,SAAS,OAG9B,yBAAKqU,UAAY,oBACf,uBAAGA,UAAY,yBAAyBmE,KAAQpc,KAAKwX,MAAM+B,OAAQ8C,SAAW,qBAA9E,2BACA,4BAAQ7a,KAAK,SAAUyW,UAAY,yBAAyBS,QAAW,kBAAM,EAAKlB,MAAMgE,0BAAxF,yBAOJ,yBAAKvD,UAAU,wBACdjY,KAAKwX,MAAMvS,QAAQ1G,KAAI,SAACiC,GACvB,OAAQ,yBAAKyX,UAAY,oBACX,4BAAQhS,IAAO,EAAKuR,MAAMjX,IAAKiB,KAAK,SAAUyW,UAAyC,SAA7BzX,EAAMiF,KAAK2E,cAA0B,8BAAgC,2BAA4BsO,QAAW,kBAAM,EAAKlB,MAAMkB,QAAQlY,EAAMiF,KAAMjF,EAAMD,IAAK,EAAKiX,MAAMhW,KAAMhB,EAAMmI,UAAY,EAAK6O,MAAMhW,KAAKoC,SAAS,aAA6C,KAA5B,EAAK4T,MAAM9R,cAAqD,IAA9B,EAAK8R,MAAMvS,QAAQxE,QAA+C,YAA7BD,EAAMiF,KAAK2E,eAA8D,IAA9B,EAAKoN,MAAMvS,QAAQxE,OAAiB,OAASD,EAAMiF,e,GAjDncqT,IAAMC,WA2D3BuD,E,iLAGF,MAAO,CACL,kBAAC,EAAD,W,GAJaxD,IAAMC,WAUzBwD,IAASnC,OACP,kBAAC,EAAD,MACAoC,SAASC,eAAe,W","file":"static/js/main.621d33c9.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 304,\n\t\"./locale.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 658;","var map = {\n\t\"./N3Lexer\": 182,\n\t\"./N3Lexer.js\": 182,\n\t\"./N3Parser\": 183,\n\t\"./N3Parser.js\": 183,\n\t\"./N3Store\": 317,\n\t\"./N3Store.js\": 317,\n\t\"./N3StreamParser\": 318,\n\t\"./N3StreamParser.js\": 318,\n\t\"./N3StreamWriter\": 319,\n\t\"./N3StreamWriter.js\": 319,\n\t\"./N3Util\": 184,\n\t\"./N3Util.js\": 184,\n\t\"./N3Writer\": 185,\n\t\"./N3Writer.js\": 185\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 684;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 811;","module.exports = __webpack_public_path__ + \"static/media/model.7c8b6791.PNG\";","import $ from 'jquery';\r\n\r\n\r\nexport default class RdfController {\r\n    \r\n    constructor() {\r\n\r\n        this.rdf = require('rdflib');\r\n        let puro ;\r\n        \r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"puroOutput.xml\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n                this.puroXML = xml;\r\n                puro = xml; \r\n            }\r\n        });\r\n        this.puroXML = puro; \r\n    }\r\n\r\n\r\n    getRelatorBtype = (relator, fromUri) =>\r\n    {\r\n            var query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findBTypeRelation =  (fatherElement, returnArr,endCall) => \r\n    {\r\n            \r\n            var elementsUri = fatherElement.uri.value;\r\n            var query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label . \r\n                \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                var checkArr = []; \r\n                var connect = [];\r\n               \r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    // otestovat jak funguje v případě dvou \r\n                    \r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    //POZOR MUZE BYT CHYB kvuli opakovani\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n\r\n    findBTypeChild =  (fatherElement, returnArr,endCall) => \r\n        {\r\n               \r\n                var elementsUri = fatherElement.uri.value;\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?valuationLabel ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelaion}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, function callback(result) {  \r\n               \r\n                    var checkArr = []; \r\n                    var connect = [];\r\n\r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                  \r\n                    if (result.length > 0)\r\n                    {\r\n                    \r\n                        // otestovat jak funguje v případě dvou \r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //POZOR MUZE BYT CHYB kvuli opakovani\r\n                      \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                }.bind(this));          \r\n             }\r\n\r\n             getFullPath = () => \r\n             {\r\n                 var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri} ?child a ?childType . ?child ?childRel ?uri . } \r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                     FILTER NOT EXISTS {?uri puro:instanceOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                  this.sparqlQuery(query, function callback(result) {\r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            // tady to nastav ve SPARQ \r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                  \r\n                      this.deleteDuplicity(result,[\"valuation\", \"connect\", \"childType\", \"child\", \"childRel\"]);\r\n                      this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                             resolve(lastResult);\r\n                     });\r\n                 }.bind(this));\r\n             });\r\n             }\r\n\r\n             recursiveFindChild = (i, result, bTypeTree,lastCall, type) => \r\n             {       \r\n                 if(i === result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, function endCall(final) {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        }.bind(this));\r\n                     }\r\n                     else\r\n                     {\r\n                       \r\n                        this.findBTypeChild(result[i],bTypeTree, function endCall(final) {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        }.bind(this));\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             sparqlQuery = (sparql, callback) => {\r\n                var puroXML = this.puroXML;\r\n                puroXML = new XMLSerializer().serializeToString(puroXML);\r\n               \r\n                var store = this.rdf.graph();\r\n                var contentType = 'application/rdf+xml';\r\n                var baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                 this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                var rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n\r\n     \r\n            //from nebo to poslat si ukazatel? \r\n            getRelationBTypes = (relationUri) => \r\n            {\r\n                \r\n                var query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                    this.sparqlQuery(query, (result) => {\r\n                        \r\n                        // result.push({uri: {token:\"uri\", value: relationUri}});\r\n                \r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            //začátek hlavního\r\n            getRelations = () => \r\n            {\r\n                // ještě by to chtělo sjednotit do pole \r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                  {?from a puro:BObject}\r\n                  UNION \r\n                  {?from a puro:BType}\r\n                  {?to a puro:BObject}\r\n                  UNION\r\n                  {?to a puro:BType} \r\n                  ?to a ?toType . \r\n                  ?from a ?fromType . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            findRelation = (elementUri) => {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            firstFind = async () => {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //result[index].connect\r\n            deleteDuplicity = (result, properties) => {\r\n                var duplicity;\r\n                var checkArr = []; \r\n                \r\n                // sjednocení datových typů na pole\r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import $ from 'jquery';\r\nexport default class MainController{\r\n    \r\n    constructor()\r\n    {\r\n        \r\n        let jsonData;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"rules.json\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function(json) {\r\n                jsonData = json;\r\n            }\r\n        });\r\n\r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData)); \r\n        this.ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\";\r\n    }\r\n    // orgin lze držet jako property objektu \r\n    // uri lze držet v property objektu \r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        \r\n        \r\n        //\"uri\": unfinishedTypes[0].element\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n     \r\n\r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", this.delUri(unfinishedType.element)).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            const preposition = this.isSameCaseInsensitive(unfinishedType.key, \"connect\") ? \" to \" : \" of \";\r\n            return \"What is \" + unfinishedType.key + preposition + this.delUri(unfinishedType.element)+\"?\";\r\n        }\r\n\r\n    }\r\n\r\n    countBTypesInTree(tree)\r\n    {\r\n        let index = 0; \r\n        for (let node of tree)\r\n        {\r\n            if (this.delUri(node.type.value) === \"BType\" && !node.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n            {\r\n                index ++; \r\n            }\r\n        }\r\n\r\n        return index; \r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n     getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n      }\r\n\r\n    isSameCaseInsensitive(text, other) {\r\n        return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;\r\n    }\r\n\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class OntoModelController extends MainController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction, elName, nameWasChange, ontoUri, branchIndex, origUri) => \r\n    {\r\n    \r\n        if (this.getOntoElement(this.ontoUri + elName) === false)\r\n        {\r\n            let elPuroType;\r\n            let elLabel;\r\n            let elUri; \r\n            nameWasChange = nameWasChange === undefined ? false : nameWasChange;\r\n            origUri = origUri === undefined ? \"\" : origUri;\r\n            if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n            {\r\n\r\n                elPuroType = false;\r\n                elLabel = elName;\r\n                elUri = this.ontoUri + elName; \r\n\r\n            }\r\n            else\r\n            {\r\n                elPuroType = puroType;\r\n                elLabel = nameWasChange ? elName : label; \r\n                elUri = uri; \r\n            }\r\n\r\n            if (this.getOntoElement(elUri) === false)\r\n            {\r\n                this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: [relationName], direction: [direction], from: [undefined], to:[undefined],type:\"Class\", branchIndex: [branchIndex], origUri:origUri});\r\n            }    \r\n        }\r\n        else\r\n        {\r\n            uri = ontoUri + elName; \r\n            this.updateOntoModel(uri, \"fromRelation\",relationName);\r\n            this.updateOntoModel(uri, \"direction\",direction);\r\n            this.updateOntoModel(uri, \"branchIndex\",branchIndex);\r\n        }\r\n        console.log(this.ontoModel)\r\n        return this.ontoModel; \r\n    }\r\n\r\n    isRelationComplete (relation)\r\n    {\r\n        if (relation.type === \"relation\" && relation.from.length > 0 && relation.to.length > 0)\r\n        {\r\n            return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    getCardinalElement (element, superType)\r\n    {\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.from[0] === element && superType === false)\r\n            {\r\n                return node.to[0]; \r\n            }\r\n            else if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.to[0] === element && superType === true)\r\n            {\r\n                return node.from[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getElementByProperty (property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[property] === value)\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    getReletadELement (element, relationName)\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && (node.from.includes(element.uri) || node.to.includes(element.uri)) && this.isRelationComplete(node))\r\n            {\r\n                let relatedElement; \r\n                if (node.from.includes(element.uri)) \r\n                {\r\n                    relatedElement = node.to[0];\r\n                }\r\n                else\r\n                {\r\n                    relatedElement = node.from[0];\r\n                } \r\n                relatedElement = this.getOntoElement(relatedElement);\r\n                if (relatedElement.fromRelation.includes(relationName))\r\n                {\r\n                    return relatedElement; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    addRelation = (type, from, to, uri,label, fromType, toType) => \r\n    {\r\n        //fromT toT\r\n        uri = uri === undefined ? this.ontoUri.slice(0,-1) + \"/relation/\"+type+\"/\"+this.delUri(from)+this.delUri(to) : uri; \r\n        fromType = fromType === undefined ? [] : [fromType];\r\n        toType = toType === undefined ? [] : [toType]; \r\n        from = from === undefined || \"\" || from.length === 0 ? [] : [from];\r\n        to = to === undefined || \"\" || to.length === 0 ? [] : [to];\r\n        \r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && el.from.includes(from) && el.to.includes(to))\r\n            {\r\n                return this.ontoModel;\r\n            }\r\n        }\r\n\r\n\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from: from, to: to,uri:uri, label:label, fromType: fromType, toType: toType, fromRelation: []});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    updateOntoModel = (elementsUri, property, value, duplicity = true) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    if (duplicity === true || !node[property].includes(value))\r\n                    {\r\n                        node[property].push(value);\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if (duplicity === true || node[property] !== value)\r\n                    {\r\n                        node[property] = value;\r\n                    } \r\n                }\r\n                return this.ontoModel;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addToProperty (uri, property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                 \r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    node[property].push(value); \r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n        \r\n       \r\n        let returnArr = []; \r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            let nextRel = false;\r\n            let nextOther = false;\r\n            if (Array.isArray(node[direction]))\r\n            {\r\n                nextRel = node[direction].includes(uri) ? true : false; \r\n            }\r\n\r\n        \r\n            if (node[\"type\"] === \"relation\" && nextRel === true)\r\n            {\r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" &&  (node[\"from\"].includes(uri) || node[\"to\"].includes(uri)))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        let ontoType = false; \r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n    getElementsByOntoType = (type, origin) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType && (origin === undefined || node.fromRelation.includes(origin)))\r\n            {  \r\n                result.push(node.uri);\r\n            }\r\n       }\r\n       return result; \r\n\r\n    }\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n    \r\n\r\n    getLastElementUri = (origin, direction) => \r\n    {\r\n        var uri; \r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n\r\n            for (let j = 0; j < this.ontoModel[i].fromRelation.length; j++) {\r\n               \r\n                if (this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\")\r\n                {\r\n                    uri = this.ontoModel[i].uri;\r\n                    return uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && direction === undefined)\r\n                {\r\n                    uri = this.ontoModel[i].uri;\r\n                    return uri; \r\n                }\r\n                else if(origin === undefined && direction === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    getLastElement = (origin, direction) =>\r\n    {\r\n        const uri = this.getLastElementUri(origin, direction);\r\n        return this.getOntoElement(uri); \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, lastEl, puroType, ontoUri, ruleKey, nameWasChange, moreBranches) => \r\n    {\r\n        const ontoEl = this.getOntoElement(selectedUri);\r\n\r\n \r\n      \r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false && (element !== false || ontoEl !== false))\r\n        {\r\n           \r\n            let father;\r\n            let passEl; \r\n            \r\n            if (puroType === \"superType\")\r\n            {\r\n                father = this.ontoUri + elName;\r\n                passEl = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = this.ontoUri + elName;    \r\n                father = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else\r\n            {\r\n                if (element !== false)\r\n                {\r\n                    father = element.father[0] === undefined ? element.uri.value : element.father[0];\r\n                }\r\n                else\r\n                {\r\n                    father = ontoEl.uri;\r\n                }\r\n                passEl = this.ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if (puroType.includes(\"elementSelection\") || (element !== false && this.getOntoElement(element.father[0]) !== false))\r\n        {   \r\n      \r\n            let elementFather = this.getOntoElement(element.father[0]);\r\n            if (puroType.includes(\"invert\") || !puroType.includes(\"elementSelection\"))\r\n            {\r\n                return [elementFather.uri,element.uri.value];\r\n            }\r\n            else\r\n            {\r\n                return [element.uri.value, elementFather.uri];\r\n            }\r\n            //father může být pole.. předělat!!!\r\n            \r\n       \r\n            \r\n            //this.addRelation(\"Dodělat závislé na pravidlech\", elementFather.uri , element.uri.value);\r\n        }\r\n        //relationRule zrušit addRuleTakyZrušit \r\n        else if((addRulesLenght === 0 && lastEl === true) || element === false )\r\n        {\r\n\r\n            const lastRelElement = this.getLastElement(relationUri);\r\n            const passEl = (element === false) ? this.ontoUri + elName : selectedUri;\r\n\r\n            \r\n            if (lastRelElement !== false && (lastRelElement.direction[lastRelElement.direction.length - 1] !== ruleKey || moreBranches === true) && addRulesLenght === 0)\r\n            {\r\n                this.updateOntoModel(relationUri,ruleKey,passEl, false);\r\n     \r\n                return relationUri; \r\n            }\r\n            else if (element === false || lastRelElement !== false)\r\n            {\r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n     \r\n    }\r\n\r\n    checkDuplicity = (label) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes = (elUri, direction, ontoType) => \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n        for (let rel of rels)\r\n        {\r\n          //Arrow \r\n          \r\n          if (rel.ontoType === ontoType || (ontoType === \"Generalization\" && rel.ontoType.includes(\"memberOf\")))\r\n          {\r\n              const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n              \r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType === \"Relator\")\r\n          {\r\n            types.push(rel.ontoType); \r\n          }\r\n          else if (ontoType === false)\r\n          {\r\n            const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n            elements.push(el);\r\n            types.push(this.getElementOntoType(el)); \r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    getElementsFromBranch(element)\r\n    {\r\n\r\n        let returnArr = [element];\r\n        let el = element;\r\n    \r\n        while (this.getCardinalElement(el,true) !== false)\r\n        {   \r\n            el = this.getCardinalElement(el, true);\r\n            returnArr.push(el);\r\n        }\r\n\r\n        return returnArr; \r\n    }\r\n\r\n    \r\n    getOntoBranch(relation, key)\r\n    {\r\n        let returnArr = [];\r\n        for (let el of this.ontoModel)\r\n        {\r\n            for (let index in el.fromRelation)\r\n            {\r\n                if (el.fromRelation[index] === relation && el.direction[index] === key)\r\n                {\r\n                    returnArr.push(el);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n    \r\n    connectToBranchElement(relation, key, selectedEl)\r\n    {\r\n\r\n        const question =  \"To which element is the \" + this.delUri(selectedEl.uri.value) + \" connected?\";\r\n\r\n        const firstEl = (this.getOntoBranch(relation, key)[0]);\r\n        const lastEl = this.getLastElement(relation, key);\r\n\r\n        if (firstEl === undefined || lastEl === false)\r\n        {\r\n            return false\r\n        }\r\n        else\r\n        {\r\n            \r\n            return this.createButtons([firstEl.label, lastEl.label],question, \"nextBranchElements\", false, \"\");\r\n        }\r\n\r\n        if (firstEl.uri === lastEl.uri)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n           \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph = (ontoModel) =>\r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to[0]) !== false && this.findLabel(node.from[0]) !== false) {\r\n                if (node.ontoType === \"Relator\")\r\n                {\r\n\r\n                    if (node.from.length > 0 && node.to.length > 0) \r\n                    {\r\n                    \r\n                      \r\n                       const fromT = node.fromType;\r\n                       const toT = node.toType;\r\n\r\n\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key] ? '\"'+node.fromType[key][1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\";\r\n                        }\r\n\r\n                      //  graphCommand += this.findLabel(node.from) +\" \"+ (fromT ? '\"'+fromT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+fromT[1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\"; \r\n                        \r\n                        for (let key in node.to)\r\n                        {\r\n                            graphCommand += node.label +\" \"+ (node.toType[key] ? '\"'+node.toType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key]  ? '\"'+node.toType[key][1]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + \" : <<Mediation>>\\n\"; \r\n                        }\r\n                      \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    const fromT = node.fromType;\r\n                    const toT = node.toType;\r\n                    const relationSpec = this.getRelationSpec(node.ontoType);\r\n                    if (node.from.length === node.to.length)\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0] + (node.toType[key] ? '\"'+node.toType[key]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            let base = this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0];\r\n                            \r\n                            for (let toKey in node.to)\r\n                            {\r\n                                graphCommand += base + (node.toType[toKey] ? '\"'+node.toType[toKey]+'\"' : \"\") + \" \" + this.findLabel(node.to[toKey]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n    \r\n    getRelationSpec (ontoType)\r\n    {\r\n        for(let rel of this.rulesJson.relations)\r\n        {\r\n            \r\n            if (ontoType in rel)\r\n            {\r\n                \r\n                const normRelType = rel[ontoType]; \r\n                const showType = \"showType\" in rel && rel[\"showType\"] === true ? true : false;  \r\n                let code; \r\n                switch(normRelType.toLowerCase())\r\n                {\r\n                    case \"arrowline\": code = \" <|-- \";  \r\n                        break; \r\n                    case \"simpleline\": code = \" -- \"; \r\n                        break; \r\n                    case \"dashedline\": code = \" .. \"; \r\n                        break; \r\n                    case \"composition\": code = \" *-- \"; \r\n                        break; \r\n                    case \"aggregation\": code = \" o-- \"; \r\n                        break; \r\n                    default:  code = \" -- \"; \r\n                }\r\n            \r\n                return [code, showType]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n    \r\n\r\n    //ruleSelection queryTree, \r\n    ruleSelection = (rules, key, element, previousElName, rule, queryTree) => \r\n    {\r\n        \r\n        let commands; \r\n        let additionalRules;\r\n        let offerTypes;\r\n        let uri;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            commands = this.getSpecificRule(rules,key);\r\n            //additionalRules = this.getAdditionalRule(commands,ontoType);\r\n            //offerTypes = (additionalRules.length > 0 ) ? offerTypes = additionalRules : offerTypes = commands.offer;\r\n            offerTypes = commands.offer   \r\n        }\r\n\r\n        //z elementu udělat otázku\r\n        if (element !== false)\r\n        {\r\n            if (this.isElementInstace(element,queryTree))\r\n            {\r\n                needElName =true;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[1].question.replace(\"VAL\",element.label.value);\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[0].question.replace(\"VAL\",element.label.value);\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            //zjisti zda je chyby nebno ne \r\n            needElName = true;\r\n\r\n            //Třeba dodělat Replace!!\r\n\r\n            for (let q of this.rulesJson.questions)\r\n            {\r\n                if (q.type === \"bTypeChild\")\r\n                {\r\n                    question = q.question.replace(\"VAL\", previousElName);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n    isElementInstace = (element, queryTree) =>\r\n    {\r\n        for (let node of queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n\r\n    // this.ontoController.getOntoElement(this.relation.uri.value);\r\n    elementConsistencyRules = (element,  ontoController) => \r\n    {\r\n            // v případě undefinied vyhoď, že pravidlo není definováno \r\n            let rules = this.rulesJson[element.ontoType]; \r\n           \r\n            let check = []; \r\n            let addRule; \r\n            \r\n\r\n            //Tady by měla být pole jelikož to může být 1:N \r\n            // !!! Převod na metodu a úprava dle pravidel\r\n            // udělat connect -> subtype -> supertype jenom v případě arrow \r\n\r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Generalization\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Generalization\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n            console.log(JSON.parse(JSON.stringify(elTypes)))\r\n            \r\n            for (let rule of rules)\r\n            {\r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes);\r\n            }\r\n\r\n            //Kontrola none a spojených typů!! \r\n            console.log(JSON.parse(JSON.stringify(check)))\r\n            console.log(check.length)\r\n\r\n            if ((check.length > 0 && check[0].types.includes(\"Relator\") && check[0].types.includes(\"None\")))\r\n            {\r\n                check.splice(0, 1);  \r\n            }\r\n\r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection = (rule,elTypes,key,element,check,rules,allTypes) =>\r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                \r\n                const suffix = key[key.length - 1] === \"e\" ? \"d\" : \"ed\";\r\n                const additionalRules =  this.getSpecificRule(rules, key + suffix, true);\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    // if includes none -> zkontrolovat lenght superType -> zeptat se jestli chci doplnit superType -> nabídnout co je v tabulce -> zkontrolovat jestli už není\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n\r\n                }\r\n                else \r\n                {\r\n                    if (additionalRules !== false)\r\n                    {\r\n                      \r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n    \r\n        if (type in rule)\r\n        {\r\n      \r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                \r\n                for (let index in check)\r\n                {\r\n                  \r\n                    if (check[index].key === type && check[index].element === element.uri)\r\n                    {\r\n                        check.splice(index, 1);\r\n                    }\r\n                }\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n        }\r\n    \r\n        return check; \r\n       \r\n    }\r\n\r\n    numberOfRuleStep (relationType, key, bTypeNumber)\r\n    {\r\n        const rule = this.getSpecificRule(this.rulesJson[relationType], key, false, bTypeNumber);\r\n        let indexCount = 0; \r\n\r\n        for (let key in rule)\r\n        {\r\n            if (!isNaN(key))\r\n            {\r\n                indexCount ++; \r\n            }\r\n        }\r\n\r\n        return indexCount; \r\n    }\r\n\r\n    getSpecificRule = (rules, key, moreThanOne, bTypeNumber) =>\r\n    {\r\n        let addRules = [];\r\n        \r\n        bTypeNumber = bTypeNumber === undefined ? false : bTypeNumber; \r\n        moreThanOne = moreThanOne === undefined ? false : moreThanOne; \r\n        \r\n        if (bTypeNumber !== false)\r\n        {\r\n            for (let node of rules)\r\n            {\r\n                if (node.key === key &&  (\"bTypeNumber\" in node) && node.bTypeNumber.includes(bTypeNumber))\r\n                {\r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n\r\n       \r\n        }\r\n            for (let node of rules)\r\n            {\r\n                \r\n                if (node.key === key)\r\n                {\r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n        \r\n\r\n\r\n        // Tady možná hvězda \r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n\r\n\r\n    getAdditionalRule = (rule, selectedType, index) =>\r\n    {\r\n        /*\r\n        if (selectedType in rule)\r\n        {\r\n            alert(\"bam\")\r\n            console.log(rule)\r\n            return rule[selectedType];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n        */\r\n        if (rule !== false && index.toString() in rule && selectedType in rule[index])\r\n        {\r\n            console.log(rule[index][selectedType])\r\n            return rule[index][selectedType]; \r\n        }\r\n        \r\n        return [];\r\n    \r\n    }\r\n\r\n\r\n    commonRuleSelection = (element, key, ontoModel) => \r\n    {\r\n        let result = [];\r\n\r\n        // tohle vyřeš na úrovni onto modelu!\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        const connection =  element.connect.length > 0 ? true : false;  \r\n   \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        \r\n        for (let node of ontoModel)\r\n        {\r\n            if (element.father.includes(node.uri)) {\r\n                fatherOnto.push(node.ontoType);\r\n            }\r\n            \r\n        }\r\n  \r\n        // Změnit!! \r\n        for (let rule of this.rulesJson.commonRules)\r\n        {\r\n\r\n            /*if ((fatherOnto.includes(rule.fatherOnto) || (fatherOnto.length === 0 && rule.fatherOnto === \"\")) &&\r\n                (fatherPuro.includes(rule.fatherPuro) || (fatherPuro.length === 0 && rule.fatherPuro === \"\")) &&\r\n                childPuro.includes(rule.childPuro) || childPuro === rule.childPuro &&\r\n                rule.hasRelation <= connection\r\n                )\r\n            */\r\n           if ((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))) &&\r\n            (connection === rule.connection || rule.connection === 0) && (element.childType.some(r=> rule.childPuro.includes(r) || \r\n            (rule.childPuro.includes(\"none\"))) \r\n           ))\r\n            {\r\n                let type = \"elementSelection\"; \r\n                if (\"invert\" in rule && rule[\"invert\"] === true)\r\n                {\r\n                    type += \"-invert\"\r\n                }\r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import EventController from \"./EventController\";\r\n\r\nexport default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2] !== undefined && this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        console.log(this.propertiesHistory)\r\n        console.log(this.inputVariables)\r\n        console.log(this.ontoModelHistory)\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","\r\nexport default class OntoScheController {\r\n\r\n    /*\r\n    constructor()\r\n    {\r\n\r\n       const mod = this.initJson();\r\n       console.log(mod)\r\n       const model = this.transform(mod);\r\n\r\n\r\n\r\n         console.log(model);\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(model);\r\n\r\n        if (isValid)\r\n        {\r\n          console.log(\"ok\")\r\n        }\r\n        else\r\n        {\r\n          console.log(validator.errors);\r\n        }\r\n    } */\r\n\r\n    transform (ontoModel)\r\n    {\r\n        const ontoUmlSchema = this.schemaInit(); \r\n        let relCount = 0; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if(node.type === \"Class\" || node.ontoType.toLowerCase() === \"relator\")\r\n            {\r\n              ontoUmlSchema[\"contents\"].push(this.ontoClassTransformation(node)); \r\n            }\r\n        }\r\n        console.log(ontoUmlSchema)\r\n        // Relations have to be added at the end \r\n        for (let node of ontoModel)\r\n        {\r\n          if (node.type === \"relation\" && node.ontoType.toLowerCase() !== \"relator\") {\r\n              let key; \r\n              \r\n              if (node.from.length >= node.to.length)\r\n              {\r\n                 key = \"from\";\r\n              }\r\n              else\r\n              {\r\n                key = \"to\"; \r\n              }\r\n              \r\n              let opositeIndex = 0;\r\n              for (let index in node[key])\r\n              {\r\n                 \r\n                 let fromIndex = key === \"from\" ? index : opositeIndex; \r\n                 let toIndex = key === \"to\" ? index : opositeIndex; \r\n                  \r\n                 ontoUmlSchema[\"contents\"].push(this.relationTransformation(node, relCount, fromIndex, toIndex));\r\n                 relCount += 2;  \r\n                 if (index <= node[key].length)\r\n                 {\r\n                    opositeIndex = index; \r\n                 }\r\n              }\r\n          }\r\n          else if (node.ontoType.toLowerCase() === \"relator\")\r\n          {\r\n            let nodeCopy = JSON.parse(JSON.stringify(node));\r\n            let nodeCopy2 = JSON.parse(JSON.stringify(node));  \r\n            \r\n            let key; \r\n              \r\n            if (node.from.length >= node.to.length)\r\n            {\r\n               key = \"from\";\r\n            }\r\n            else\r\n            {\r\n              key = \"to\"; \r\n            }\r\n            \r\n            let opositeIndex = 0;\r\n\r\n            for (let index in node[key])\r\n            {\r\n              nodeCopy[\"uri\"] += \"rel1\"\r\n              nodeCopy2[\"uri\"] += \"rel2\"\r\n        \r\n              nodeCopy[\"ontoType\"] += \"mediation\"\r\n              nodeCopy2[\"ontoType\"] += \"mediation\"\r\n              \r\n              if (key === \"from\")\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][index][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][index][1];\r\n\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][opositeIndex][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][opositeIndex][1];\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][index]];\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][opositeIndex]];\r\n              }\r\n              else\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][opositeIndex][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][opositeIndex][1];\r\n\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][index][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][index][1];\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][opositeIndex]];\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][index]];\r\n              }\r\n              \r\n              nodeCopy[\"to\"] = [node.uri];\r\n              nodeCopy2[\"from\"] = [node.uri];\r\n              \r\n              ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy, relCount, 0,0));\r\n              relCount += 2;\r\n  \r\n              ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy2, relCount,0,0));\r\n              relCount += 2;  \r\n              \r\n              if (index <= node[key].length)\r\n              {\r\n                 opositeIndex = index; \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(ontoUmlSchema);\r\n\r\n        if (isValid)\r\n        {\r\n          return ontoUmlSchema; \r\n        }\r\n        else\r\n        {\r\n          alert(\"Model is not valid! Check OntoSchemaCotroller!\"); \r\n        }\r\n    }\r\n\r\n    schemaInit ()\r\n    {\r\n        return {\r\n            \"type\": \"Package\",\r\n            \"id\": \"puroConversion\",\r\n            \"name\": null,\r\n            \"description\": null,\r\n            \"contents\": [],\r\n            \"propertyAssignments\": null\r\n            }\r\n    }\r\n\r\n    ontoClassTransformation (ontoClass)\r\n    {\r\n      return  {\r\n            \"type\": \"Class\",\r\n            \"id\": ontoClass.uri ,\r\n            \"name\": ontoClass.label,\r\n            \"description\": null,\r\n            \"properties\": null,\r\n            \"literals\": null,\r\n            \"propertyAssignments\": null,\r\n            \"stereotypes\": [ontoClass.ontoType.toLowerCase()],\r\n            \"isAbstract\": null,\r\n            \"isDerived\": null\r\n            }\r\n    }\r\n\r\n    relationTransformation (relation, relCount, fromIndex, toIndex)\r\n    {\r\n\r\n        if (relation.ontoType === \"Generalization\")\r\n        {\r\n             return {\r\n                \"type\": \"Generalization\",\r\n                \"id\": relation.uri,\r\n                \"name\": null,\r\n                \"description\": null,\r\n                \"general\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.from[fromIndex]\r\n                },\r\n                \"specific\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.to[toIndex]\r\n                },\r\n                \"propertyAssignments\": {\r\n                  \"nonStandardProperty\": null\r\n                }\r\n              };\r\n        }\r\n        else\r\n        {\r\n            return {\r\n              \"type\": \"Relation\",\r\n              \"id\": relation.uri,\r\n              \"name\": null,\r\n              \"description\": null,\r\n              \"properties\": [\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + relCount,\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.from[fromIndex]\r\n                  },\r\n                  \"cardinality\": relation.fromType[fromIndex] === \"\" || undefined ? null : relation.fromType[fromIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                },\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + (parseInt(relCount) + 1),\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.to[toIndex]\r\n                  },\r\n                  \"cardinality\": relation.toType[toIndex] === \"\" || undefined ? null : relation.toType[toIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                }\r\n              ],\r\n              \"propertyAssignments\": {\r\n                \"nonStandardProperty\": null\r\n              },\r\n              \"stereotypes\": [relation.ontoType.toLowerCase()],\r\n              \"isAbstract\": true,\r\n              \"isDerived\": false\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    initJson()\r\n    {\r\n      return JSON.parse(`[\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Characterization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Book\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Topic\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#has_topic\",\r\n          \"label\": \"has_topic\",\r\n          \"fromType\": [\r\n            \"1\"\r\n          ],\r\n          \"toType\": [\r\n            \"1\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Book\",\r\n          \"label\": \"Book\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#has_topic\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\",\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Topic\",\r\n          \"label\": \"Topic\",\r\n          \"ontoType\": \"Mode\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#has_topic\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Topic\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#DDC_Topic\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/TopicDDC_Topic\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#DDC_Topic\",\r\n          \"label\": \"DDC_Topic\",\r\n          \"ontoType\": \"Subkind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#has_topic\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Relator\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#q\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Location\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#published_in\",\r\n          \"label\": \"published_in\",\r\n          \"fromType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"toType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Book\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#q\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/Bookq\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#q\",\r\n          \"label\": \"q\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#w\",\r\n          \"label\": \"w\",\r\n          \"ontoType\": \"Datatype\",\r\n          \"puroType\": \"BValue\",\r\n          \"fromRelation\": [\r\n            {\r\n              \"token\": \"uri\",\r\n              \"value\": \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n            }\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            null\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"connect\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#w\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/connect/published_inw\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"*\"\r\n          ],\r\n          \"toType\": [\r\n            \"*\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Location\",\r\n          \"label\": \"Location\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#e\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Location\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/eLocation\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#e\",\r\n          \"label\": \"e\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#published_in\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ]\r\n        }\r\n      ]`); \r\n    }\r\n}","import RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\nimport OntoSchmeController from './OntoSchemaController.js';\r\n\r\n//chyba nejspíše bude v RDF!! v relationTree je instance v případě prvního XML tam instance není, history of dogs je smazané, tak udělej příklad s tím!!!\r\n// TODO -> v případě dvou otců projdi cyklem a zkontroluj oba!!!!\r\n// TODO -> vyřešit vazby\r\n// TODO -> next element do objektového schématu -> zatím prototyp \r\n// TODO -> třída element pro sjednocení properties \r\n// UNDO \r\n\r\n\r\n//dodělat duplicity \r\n//zkontrolovat na onto 3\r\n\r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();   \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController();\r\n        this.historyController = new HistoryController();\r\n        this.ontoSchemaController = new OntoSchmeController(); \r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;          \r\n        });\r\n\r\n                     \r\n        \r\n\r\n\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    getDefault ()\r\n    {\r\n       \r\n        // tady se zeptej na type relationu \r\n        // tohle není do defaultu ale do next element\r\n        // hod vyjmku v případě když nebude žádný relation k dispozic\r\n        if (this.relationOrderIndex === this.relations.length)\r\n        {\r\n            alert(\"Transformation is comlete!!!\");\r\n            return {buttons: [], title: \"The End\", type: \"end\"};\r\n        }\r\n\r\n        \r\n\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n           \r\n            //return this.nextElement(\"Relator\",this.relation.uri.value,\"BRelation\",\"from\");\r\n            const question = relation.label.value.charAt(0).toUpperCase() + relation.label.value.slice(1) + \" was typed as a Relator.\"\r\n            return this.createButtons(\"Relator\",question,this.delUri(relation.type.value),false,relation.label.value);\r\n        }\r\n        else\r\n        {\r\n            //this.elUri = relation.uri.value;\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question = this.rulesJson.bRelationRules[0].question.replace(\"VAL\",relation.label.value);\r\n            return this.createButtons(this.rulesJson.bRelationRules[0].offer, question,this.delUri(relation.type.value), false, relation.label.value);            \r\n        }\r\n    }\r\n\r\n\r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n\r\n        console.log([selectedType, selectedUri, puroType ,elName, nameWasChange])\r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n           return this.relationWasSelected(selectedType, this.ruleKey);\r\n        }\r\n        else \r\n        {\r\n            \r\n            let relationEl; \r\n            let additionalRule = []; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            if (puroType.includes(\"ontoRelation-save-bRelation\"))\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                    relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                }\r\n\r\n                if (this.lastElInBranch === \"cPhase-next\")\r\n                {\r\n                   \r\n                    if (this.relation[this.ruleKey].length <= this.relationRuleIndex)\r\n                    {\r\n                       \r\n                        this.relationOrderIndex ++;\r\n                        this.setIndexexToDefault();\r\n                        return this.getDefault();\r\n                    } \r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch(); \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                 \r\n                    selectedType = this.elSettings.selectedType;\r\n                    puroType = this.elSettings.puroType;\r\n                    elName = this.elSettings.elName;\r\n                    relationEl = this.elSettings.relationEl;\r\n                    additionalRule = this.elSettings.additionalRule; \r\n                    nameWasChange = this.elSettings.nameWasChange;\r\n                }\r\n\r\n            }\r\n            if (!Array.isArray(selectedType) && selectedType.toLowerCase() === \"none\")\r\n            {  \r\n                this.elSettings.selectedType = selectedType; \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                this.additionalRule.key = \"stop\"; \r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n            \r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                this.consistencyExeption.push({uri: this.elementUri, ontoType:selectedType, type: puroType});\r\n                return this.consistencyCheck(); \r\n            }\r\n            \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {\r\n            //addRUleAsync\r\n              \r\n               if (this.additionalRule.key!== \"stop\" && this.additionalRule.key === undefined && (this.additionalRule.index > 1 || this.ontoController.getOntoBranch(this.relation.uri.value,this.ruleKey).length === 0))\r\n               {\r\n                   \r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),selectedType, 1)\r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        this.additionalRule.index = 2; \r\n                        this.additionalRule.rule =  this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree));\r\n                        this.additionalRule.key = selectedType;\r\n                    }\r\n               } \r\n               else if (this.additionalRule.index > 1 && this.additionalRule.key !== \"stop\")\r\n               {\r\n                 additionalRule = this.ruleController.getAdditionalRule(this.additionalRule.rule, selectedType, this.additionalRule.index);\r\n                 if (additionalRule.length > 0)\r\n                 {\r\n                    this.additionalRule.index ++; \r\n                 }\r\n                 else\r\n                 {\r\n                    this.additionalRule.key = \"last\";\r\n                 }\r\n\r\n               }\r\n              \r\n               relationEl = this.ontoController.getRelationElements(elName, this.getElementByUri(this.elementUri), this.elementUri,this.relation.uri.value, additionalRule.length, additionalRule.length === 0, puroType, this.ontoUri, this.ruleKey, nameWasChange,this.relationRuleIndex > 1);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\", elUri: this.elementUri};\r\n               \r\n              \r\n               \r\n\r\n               if (relationEl === this.relation.uri.value || this.lastElInBranch === \"cPhase\")\r\n               {\r\n                 const updateRelTypes = this.updateRelationTypes();\r\n                 if (updateRelTypes !== false)\r\n                 {\r\n                     this.lastElInBranch += \"-next\"; \r\n                     return updateRelTypes;\r\n                 }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"connect\" // rovná čára mezi elementy \r\n                \r\n\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey, undefined,undefined,undefined,undefined,this.elementUri);\r\n            }\r\n            else \r\n            {\r\n             \r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n              \r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n               \r\n                    elRelTypes = selectedType;\r\n                }\r\n              \r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n                this.elementUri = this.elSettings.elUri;\r\n               \r\n            } \r\n         \r\n            const relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n         \r\n            if (relationRules !== true)\r\n            {\r\n                //vrácení otázky v případě true relation ulož -> může se pokračovat\r\n                return Promise.resolve(relationRules); \r\n            }\r\n            \r\n            if (this.valuationArr !== null)\r\n            {\r\n                \r\n                if (this.valuationArr.length > 0)\r\n                {\r\n                    return this.handleValuation();\r\n                \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                   \r\n                    if (this.ruleKey === \"to\" && this.relation.to.length === this.relationRuleIndex)\r\n                    {\r\n                        const lastEl = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"to\",lastEl);\r\n\r\n                        this.elementUri = lastEl; \r\n                        this.lastElInBranch = \"cPhase\";\r\n\r\n                        return this.updateRelationTypes();\r\n                    }\r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            } \r\n            //Přidání do ontomodelu \r\n            const purType = this.selectedEl === false || !(\"type\" in this.selectedEl) ? false : this.delUri(this.selectedEl.type.value);\r\n\r\n            let origUri = undefined; \r\n\r\n            if (this.relationTree[this.relationTree.length - 1].uri.value === this.elementUri)\r\n            {\r\n                origUri = \"first\"\r\n            }\r\n\r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            purType,this.relation.uri.value,this.ruleKey,elName, nameWasChange, this.ontoUri, this.relationRuleIndex, origUri);\r\n          \r\n            \r\n            \r\n            //zjištění dodatečných pravide \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();\r\n                \r\n             \r\n                this.elementUri = this.selectedEl === false || Array.isArray(this.selectedEl) ? \"\" : this.selectedEl.uri.value; \r\n                \r\n                this.selectedEl = this.elementUri === \"\" ? false : this.selectedEl; \r\n                \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,additionalRule,this.queryTree);\r\n            }\r\n            else if (this.additionalRule.key === \"last\")\r\n            {\r\n               \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    //this.elSettings.selectedType = \"none\"\r\n                    return updateCardinality; \r\n                } \r\n                else\r\n                {\r\n                    this.additionalRule.key = \"stop\";\r\n                    return this.consistencyCheck(); \r\n                }\r\n            }\r\n            else\r\n            {\r\n                //change selection or step plus\r\n                //kontrolaElementů na konci\r\n                // proměná co určuje, že se jedná o kontrolu elementu\r\n                \r\n                this.additionalRule.key = \"stop\"; \r\n\r\n                if (this.elementsWithoutType.length === 0)\r\n                {\r\n                    this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n                } \r\n                // přiřazení typu neurčeným elementům \r\n                if (this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length)\r\n                {\r\n                  \r\n                    const element = this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);\r\n                    \r\n                    this.withoutTypeIndex ++;\r\n                    \r\n                    this.elementUri = element.uri.value;\r\n                    \r\n                    const commonRule = this.ruleController.commonRuleSelection(element, this.ruleKey,this.ontoController.getOntoModel());\r\n\r\n                    if (commonRule === undefined)\r\n                    {   \r\n                        alert(\"Common rule is not defined! Check rules.json\");\r\n                        window.location.reload();\r\n                    }\r\n                    else\r\n                    {\r\n                        return commonRule;\r\n                    }\r\n                \r\n                }\r\n                else\r\n                {\r\n                  \r\n                    if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0)\r\n                    {\r\n                        const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                    }\r\n                    //projdi všechny elementy a ověř úplnost typů !!!!!!!!!!!!\r\n                    //změnit strany případně nebo skočit na další relation!! jedeme dál..  \r\n                    // this.relator rule.Key pro check elementů\r\n                 \r\n                    return this.consistencyCheck();\r\n                    \r\n                }\r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n\r\n    consistencyCheck ()\r\n    {\r\n        \r\n        let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    \r\n        if (unfinishedTypes.length > 0)\r\n        {              \r\n            for (let exeption of this.consistencyExeption)\r\n            {\r\n                for (let index in unfinishedTypes)\r\n                {\r\n                    if(exeption.uri === unfinishedTypes[index].element && unfinishedTypes[index].types.includes(exeption.ontoType) && exeption.type === unfinishedTypes[index].key)\r\n                    {\r\n                        unfinishedTypes.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n    \r\n            if ((unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"Relator\") && unfinishedTypes[0].types.includes(\"None\")) || (unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"None\") && unfinishedTypes[0].types.length === 1))\r\n            {\r\n                unfinishedTypes.splice(0, 1);  \r\n            }\r\n        }\r\n        \r\n        if (unfinishedTypes.length > 0)\r\n        {\r\n            const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n            this.elementUri = unfinishedTypes[0].element;\r\n            return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n        }\r\n        else\r\n        {   \r\n            if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n            {\r\n                this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n\r\n                // vrat dotaz na Value\r\n                if (this.valuationArr.length > 0)\r\n                { \r\n                   return this.handleValuation();\r\n                \r\n                }\r\n            }\r\n            \r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex && this.ruleKey !== \"from\")\r\n            {\r\n                \r\n\r\n                const rel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n                if (rel.to.length < this.relationRuleIndex)\r\n                {\r\n                    const lastEl = this.ontoController.getLastElement(rel.uri,\"to\");\r\n                    this.ontoController.updateOntoModel(rel.uri, \"to\", lastEl.uri);\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n                    return this.updateRelationTypes(true); \r\n                }\r\n\r\n\r\n                this.setIndexexToDefault();\r\n                this.relationOrderIndex ++;\r\n                return this.getDefault();\r\n            } \r\n            else\r\n            {\r\n                \r\n                return this.nextTreeBranch(); \r\n            }   \r\n    \r\n        }\r\n    }\r\n\r\n    updateRelationTypes (end)\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n        console.log(ontoRel)\r\n        if (ontoRel.to.length > 0 && ontoRel.from.length > 0)\r\n        {\r\n            console.log(ontoRel)\r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                \r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from[ontoRel.fromType.length],ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType.length < ontoRel.to.length) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n            else if (ontoRel.toType.length < ontoRel.to.length && ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from[ontoRel.fromType.length],ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n    \r\n        const question = \"Which Datatype represents \" + this.delUri(this.valuationArr[0].valuation) + \"?\"; \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n        return buttons;  \r\n    }\r\n\r\n    nextTreeBranch () \r\n    {\r\n        \r\n        if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n        {\r\n         \r\n            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n            // vrat dotaz na Value\r\n            if (this.valuationArr.length > 0)\r\n            {\r\n                return this.handleValuation();\r\n            \r\n            }\r\n        }\r\n        \r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0 || (this.relationRuleIndex > 1 && this.ruleKey === \"from\"))\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        \r\n\r\n        let relationTypePromise; \r\n\r\n        //number of branches -> uprav \r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex)\r\n            {\r\n               this.ruleKey = this.ruleKey === \"from\" ? \"to\": \"from\"; \r\n               this.relationRuleIndex = 0;\r\n            }   \r\n            \r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n            this.relationRuleIndex ++; \r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        this.additionalRule.key = undefined;\r\n        this.additionalRule.index = 0; \r\n        this.consistencyExeption = [];\r\n\r\n\r\n        return new Promise(resolve => {relationTypePromise.then((results) => {\r\n            this.valuationArr = null;\r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        });});\r\n    }\r\n\r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let treeEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(treeEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                let connectElement = el.uri.value; \r\n                if (this.delUri(el.type.value) === \"BObject\" || el.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                {\r\n                    const lastTypes = this.rulesJson[\"lastTypes\"];\r\n                    let lastEl = [];\r\n                    for (let type of lastTypes)\r\n                    {\r\n                      lastEl = lastEl.concat(this.ontoController.getElementsByOntoType(type, this.relation.uri.value));\r\n                    }\r\n                    if (lastEl.length > 0) {\r\n                        connectElement = lastEl[0]; \r\n                    }\r\n                }\r\n\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: connectElement, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n\r\n        for (let index in valuations)\r\n        {\r\n            if (this.ontoController.getElementByProperty(\"origUri\",valuations[index].valuation) !== false)\r\n            {\r\n                valuations.splice(index, 1);   \r\n            }\r\n        }\r\n\r\n        \r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n      let ontoModel = this.ontoController.getOntoModel();\r\n      //const lastEl = this.ontoController.getOntoElement(this.ontoController.getLastElementUri());\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n\r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey, direction: \"to\"};\r\n        });\r\n        const labelFromE = this.ontoController.getOntoElement(fromE) === false ? this.delUri(fromE) : this.ontoController.getOntoElement(fromE).label;\r\n        const labelToE = this.ontoController.getOntoElement(toE) === false ? this.delUri(toE) : this.ontoController.getOntoElement(toE).label ;\r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n        \r\n        //type save relation - type -> podradnost -> ulozeni \r\n        // this.relationType = definice type \r\n        // \r\n        \r\n    \r\n\r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        \r\n\r\n        //dostanu příchozí elementy \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);\r\n            \r\n        }\r\n        else\r\n        {\r\n            //Poupraví se již vytvořený element \r\n            return true; \r\n        }\r\n        \r\n        if (relType === \"updated\")\r\n        {\r\n            return true;\r\n        }\r\n        if (rule === false && !relationFlow.includes(\"save\"))\r\n        {\r\n            alert(\"Relation rule is not defined! Check rules.json!\"); \r\n    \r\n        }\r\n        \r\n        if (!relationFlow.includes(\"save\") && (relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1))\r\n        {\r\n           \r\n           \r\n            // Vyhod chybu, že není definované pravidlo pro dva typy!! \r\n            if (\"fromT\" in rule && \"toT\" in rule)\r\n            {\r\n                \r\n                this.elSettings.relType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.relType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, undefined, \"nazev\", \"\", \"\");\r\n\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            //ulož do model\r\n            this.ontoController.addRelation(this.elSettings.relType, fromE, toE, undefined, \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            \r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map((ruleClass) => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           });\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};        \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) \r\n            {  \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (this.isSameCaseInsensitive(condition[index + 1],ontoType) || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    relationWasSelected (selectedType) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        //selected type do object property\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        //this.ontoController.addToOntoModel(this.relation.uri.value, this.relation.label.value, selectedType, this.relation.type.value,\r\n        //    this.relation.uri.value, undefined, this.relation.from.value, this.relation.to.value);\r\n\r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, this.relation.label.value);\r\n\r\n      \r\n        \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    handleRelatedElements (elements, origin, ruleKey, rule) \r\n    {\r\n\r\n\r\n        rule = rule === undefined ? this.rulesJson[this.relationType] : rule;\r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1; \r\n        if (origin === \"relationWasSelected\" || this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value) !== false)\r\n        {\r\n            \r\n            const nextElement = this.getNextElement();\r\n            \r\n            \r\n            let additionalRule = [];\r\n            let fatherType = \"\"; \r\n            let el = false; \r\n            let bObjectChild = false;\r\n            let prevEl = false; \r\n            let lastEl = null;\r\n            if (Array.isArray(nextElement) && nextElement[1] === false)\r\n            {\r\n               \r\n                prevEl = nextElement[0]; \r\n                fatherType = nextElement[0].ontoType; \r\n                const rdfEl = this.getElementByUri(nextElement[0].uri); \r\n                \r\n                if (rdfEl !== false && rdfEl.child.length > 0)\r\n                {\r\n                    \r\n                    el = this.getElementByUri(rdfEl.child[0]);\r\n                    this.selectedEl = el;\r\n                    bObjectChild = true;\r\n                }\r\n                this.ontoController.updateOntoModel(nextElement[0].uri,\"branchIndex\",this.relationRuleIndex,false);\r\n               \r\n                if ((this.relationRuleIndex > 1 || prevEl.fromRelation.length > 0) && !this.additionalRule.index > 0)\r\n                {\r\n                    this.additionalRule.index ++; \r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.selectedEl = nextElement; \r\n                el = this.getElementByUri(this.selectedEl.uri.value);\r\n                if (el.father.length > 0)\r\n                {\r\n                  fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                }\r\n            }\r\n            \r\n            if (fatherType !== \"\" && fatherType !== false)\r\n            {\r\n                // vrat poradi elementu ve větvi projdi add rule vrat!! \r\n                // last \r\n                \r\n                const elements = this.ontoController.getElementsFromBranch(prevEl.uri);\r\n               \r\n                let addIndex = 1; \r\n                let prevAdd = []; \r\n                console.log(JSON.parse(JSON.stringify(elements)))\r\n                for (let index in elements)\r\n                {\r\n                    let node = this.ontoController.getOntoElement(elements[index]);\r\n                    if (node.origUri === \"first\")\r\n                    {\r\n                        elements.length = parseInt(index) + parseInt(1); \r\n                        break;\r\n                    }\r\n                }\r\n\r\n                console.log(elements)\r\n                for (let index = elements.length - 1; index >= 0; index--) {\r\n                   \r\n                    let element = this.ontoController.getOntoElement(elements[index])\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),element.ontoType, addIndex);\r\n                 \r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        prevAdd = additionalRule;\r\n                        this.additionalRule.index ++;\r\n                        addIndex = this.additionalRule.index;\r\n                    }\r\n                    else\r\n                    {   \r\n                      \r\n                        if (prevAdd.includes(element.ontoType))\r\n                        {\r\n                            additionalRule = []; \r\n                            break; \r\n                        }\r\n                        else\r\n                        {\r\n                            lastEl = element; \r\n                            this.additionalRule.key = fatherType;\r\n                            additionalRule = prevAdd; \r\n                            break; \r\n                        }\r\n\r\n                    }\r\n\r\n                    if (index === elements.length - 1)\r\n                    {\r\n                        this.additionalRule.key = fatherType;\r\n                        additionalRule = prevAdd; \r\n                    }\r\n                }\r\n\r\n                if (additionalRule.length > 0)\r\n                {\r\n                    this.additionalRule.rule = this.ruleController.getSpecificRule(rule,ruleKey, this.countBTypesInTree(this.relationTree));\r\n                }\r\n            }\r\n          \r\n            if (additionalRule.length === 0)\r\n            {\r\n                if (el === false && bObjectChild === true) \r\n                {\r\n                    return this.nextTreeBranch();\r\n                }\r\n                if (origin !== \"relationWasSelected\"  && bObjectChild === true)\r\n                {\r\n\r\n                    //uprav vztah\r\n                    //tady uprav poslední node ve větvi! -> vlož seller\r\n      \r\n            \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n\r\n                    this.elementUri = prevEl.uri; \r\n\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n\r\n\r\n                    return this.updateRelationTypes(true); \r\n                    \r\n                }\r\n                else if (origin === \"relationWasSelected\" && (bObjectChild === true || prevEl !== false))\r\n                {\r\n                   // diferent branch f\r\n        \r\n                   this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n                   return this.nextTreeBranch(); \r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                    return this.ruleController.ruleSelection(rule,ruleKey,el,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.queryTree);\r\n                }\r\n\r\n            }\r\n            else\r\n            {  \r\n                //selectUridle\r\n                if (el !== false)\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = \"\";\r\n                }\r\n                let lastLabel; \r\n                if (lastEl !== null)\r\n                {\r\n                    this.elementUri = lastEl.uri;\r\n                    lastLabel = lastEl.label;\r\n                }\r\n                else\r\n                {\r\n                    lastLabel = this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label;\r\n                }\r\n                \r\n                 \r\n                return  this.ruleController.ruleSelection(undefined,ruleKey,el,lastLabel,additionalRule,this.queryTree);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const rule = this.rulesJson[this.relationType];\r\n            \r\n            //Zkontroluj zda element useless a jaký typ!!! \r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n\r\n            // check if\r\n            //podívej se jestli se nachází v onto modelu... \r\n            \r\n            //počítá se dle délky pole +1!!\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n        \r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.queryTree));\r\n        }\r\n\r\n    }\r\n\r\n    checkElementsInRelationTree (tree, ontoModel) \r\n    {\r\n        // možná by nebylo od věci zkontrolovat úplnost zvolených typů!!!\r\n        let elementsWithoutType = [];\r\n        let withoutType = true; \r\n        for (let element of tree)\r\n        {\r\n            withoutType = true;\r\n            for (let node of ontoModel)\r\n            {\r\n                if(element.uri.value === node.uri)\r\n                {\r\n                    withoutType = false;\r\n                }\r\n            }\r\n\r\n            if (withoutType === true && !this.isElementUseless(element) && ! this.isElementInstace(element))\r\n            {\r\n                elementsWithoutType.push(element); \r\n            }\r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n        \r\n      \r\n        promiseArr.push(this.rdfController.getRelationBTypes(relation[key][this.relationRuleIndex]));\r\n\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            console.log(result)\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][this.relationRuleIndex-1]));\r\n                    //doplnění prop u elementu\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n                  \r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            return result; \r\n        })\r\n\r\n\r\n        return this.rdfController.getRelationBTypes(relation[key].value);    \r\n    }\r\n\r\n\r\n\r\n    l (m2)\r\n    {\r\n        console.log(\"CECKKKKKKKKKKKKKKKKKKKKK\");\r\n        console.log(m2);\r\n    } \r\n\r\n\r\n    \r\n    getNextElement () \r\n    {\r\n        //koko\r\n \r\n        if(this.relationIndex < 0)\r\n        {\r\n            return false; \r\n        }\r\n\r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n        const  indexLastValue = this.relationIndex; \r\n        //ověření zda už nebyl element určen\r\n    \r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n            if (this.relationTree[this.relationIndex] !== undefined && ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                //Check on another samples \r\n                if (this.areChildrenInBranchUseless(this.relationTree[this.relationIndex]))\r\n                {\r\n                    const lastRel = ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1]; \r\n                    const lastDirection = ontoModel[index].direction[ontoModel[index].direction.length - 1]; \r\n                    \r\n                    let lastElement = this.ontoController.getLastElementUri(lastRel,lastDirection);  \r\n                    \r\n                    while (this.ontoController.getCardinalElement(lastElement, false) !== false)\r\n                    {\r\n                        lastElement = this.ontoController.getCardinalElement(lastElement,false);\r\n                    }\r\n                    \r\n                    lastElement = this.ontoController.getOntoElement(lastElement);\r\n\r\n\r\n\r\n                    const allBranchBtypes = this.ontoController.getOntoBranch(lastRel, lastDirection)\r\n                    \r\n\r\n         \r\n                    //btype může jít do více realtionů\r\n                    for (let el of allBranchBtypes)\r\n                    {\r\n                        this.ontoController.addToProperty(el.uri, \"fromRelation\", this.relation.uri.value);\r\n                        this.ontoController.addToProperty(el.uri, \"direction\", this.ruleKey);\r\n                    }\r\n                \r\n                    return [lastElement, false];  \r\n                }\r\n                this.relationIndex --;\r\n                index = 0;  \r\n            }\r\n            \r\n        }  \r\n      \r\n        returnEl = this.relationTree[this.relationIndex];\r\n        \r\n        returnEl = returnEl === undefined ? false : returnEl;\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    areChildrenInBranchUseless (element)\r\n    {\r\n        if (element.childRel.includes(\"http://lod2-dev.vse.cz/ontology/puro#subTypeOf\"))\r\n        {\r\n           return false;\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n        //tady se to může projet od začátku do konce zas tolik to nevádí :) \r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let consistencyIndex = 0; \r\n        const consistencyTree = []; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node.fromRelation.includes(relation) && node.direction[node.direction.length - 1] === ruleKey && node.branchIndex.includes(this.relationRuleIndex))\r\n            {\r\n            \r\n                consistencyTree.push(node); \r\n            }\r\n        }\r\n\r\n   \r\n       \r\n        if (consistencyTree.length === 0)\r\n        {\r\n            return consistencyTree; \r\n        }\r\n        \r\n        let relOntoType = this.ontoController.getOntoElement(this.relation.uri.value);\r\n        let elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex],this.ontoController);\r\n        //nejsem si jist druhou podmínkou ale \r\n        \r\n        consistencyIndex ++;\r\n\r\n\r\n        while (consistencyIndex < consistencyTree.length && elementTypes.length === 0)\r\n        {\r\n            \r\n            elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex], this.ontoController);\r\n            consistencyIndex ++; \r\n        }\r\n      \r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    // element ve formátu queryTree!!\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n               \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n\r\n        this.lastElInBranch = false; \r\n\r\n\r\n        this.additionalRule = {key: undefined, rule: {}, index: 1}; \r\n\r\n\r\n        this.consistencyExeption = []; \r\n        // Nový začátek \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n               \r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (typeof record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n  \r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relationRuleIndex = 0; \r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n                console.log(prop)\r\n                console.log(JSON.parse(JSON.stringify(this[prop])))\r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n    getOntoSchema ()\r\n    {\r\n        return this.ontoSchemaController.transform(this.ontoController.getOntoModel());\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport fileDownload from 'js-file-download';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js'; \nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n\n\n\n\n\n\n//import RdfController from './controllers/RdfController.js';\n//import { thisTypeAnnotation } from \"@babel/types\";\n\n//přiřadit key k talčítkům -> zamyslet se nad využitím \nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      svg: \"\"  \n    };\n    \n\n    this.eventController = new EventController();\n    mermaid.initialize({\n      startOnLoad: false,\n       themeCSS: '#extensionEnd { fill: white; } #extensionStart { fill: white; }',\n        });\n  }\n\n  createGraph = (svg) =>\n  {\n\n    this.setState({svg: svg});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"form-group col-md-6\" id=\"graph\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Puro model</label>\n          \n            <div className=\"form-control  transformWindow embed-responsive\" id=\"exampleFormControlTextarea1\">\n                <img src={require('./model.PNG')} className = \"img-fluid\"  alt=\"puro-model\"/>\n            </div>\n            \n          </div>\n\n          <div className=\"form-group col-md-6\" id=\"graph\">\n            \n            <TransformWrapper\n            enablePadding = {false}>\n             {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n          <React.Fragment>\n            <div className=\"tools\">\n            <label htmlFor=\"exampleFormControlTextarea1\">Onto model</label>\n              <button  className = \"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n            </div>\n            <div className = \"border\">\n            <TransformComponent>\n            <div dangerouslySetInnerHTML={{__html: this.state.svg}} className=\"transformWindow\" id=\"exampleFormControlTextarea1\"> \n            </div>\n            </TransformComponent>\n            </div>\n          </React.Fragment>\n        )}\n      \n   \n         \n      </TransformWrapper>\n          </div>\n\n\n            <QuestionPart graphCreation = {this.createGraph} />\n           \n        </div>\n       \n      </div>\n\n\n\n    );\n  }\n\n}\n\n\n\nclass PuroModel extends React.Component {\n\n  // $(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\n  loaded = () =>\n  {\n    \n    $(\"#iframePuro\").empty();\n  }\n  render() {\n    return  <iframe onLoad = {this.loaded}  id = \"iframePuro\" className=\"embed-responsive-item\" src = \"http://protegeserver.cz/purom4/?model=ca151b74998bee07d442652cc100f821\"></iframe>;\n  }\n\n\n}\n\nclass Mermaid extends React.Component {\n \n  render() {\n    return <div className dangerouslySetInnerHTML={{__html: this.props.chart}}></div>;\n  }\n}\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n    startTransform: true, originalName: \"\", nameWasChange: false,  \n    buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\"};\n    \n    this.eventController = new EventController();\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined)\n    {\n      event.preventDefault(); \n    }\n    \n    //window.addEventListener('unhandledrejection', function(event) {\n       //alert(\"Rule is not defined!\\nOnly the first answer is correct! \\nRules are not complete yet!\\nPage will be reloaded!\");\n       //window.location.reload(); \n    //});\n     \n      this.eventController.getDefault().then(results => {\n      this.setState({undoActive: false, svgUrl: \"\",buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false});\n    });\n    \n  }\n  \n  undoClick = () =>\n  {\n\n\n\n  }\n\n \n  \n\n  handleClick = (selectedType, selectedUri, type) => {\n     let elName = this.state.elName;\n     let undo = false;\n     let setState = true;\n     let nameWasChange = this.state.nameWasChange;\n\n     if ((elName === \"\" && this.state.changeName === true && type !== \"Undo\") && selectedType.toLowerCase() !== \"none\")\n     {\n       alert(\"Plese write name of the element!\");\n     }\n     else if (elName !== \"\" && !elName.match(/^[A-Za-z0-9-_*<>]+$/))\n     {\n       alert(\"Please change the name. It contains forbidden characters!\");\n     }\n     else\n     {\n        if (type === \"Undo\")\n        {\n         \n          const history = this.eventController.undo(); \n          if (history === false)\n          {\n            this.handleSubmit();\n            setState = false;\n          }\n          else\n          {\n            const inputVariables = history.inputVariables;\n            selectedType = inputVariables[0];\n            selectedUri = inputVariables[1];\n            type =  inputVariables[2];\n            elName = inputVariables[3];  \n            nameWasChange = inputVariables[4];\n  \n            undo = true;\n          }\n\n        }\n        elName = elName.replace(/\\s/g, '_');\n        \n        if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName))\n        {\n          alert(\"Element already exists! Please choose different name.\")\n        }\n        else if (setState === true)\n        {\n          \n           this.eventController.nextElement(selectedType,selectedUri,type, elName, nameWasChange).then(results => {\n            \n            if (undo === false)\n            {\n              let properties = (Object.getOwnPropertyNames(this.eventController));\n              let historyRecord = {}; \n              for (let prop of properties)\n              {\n                 if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\")\n                 {\n                    if (typeof prop !== 'function')\n                    {\n                      historyRecord[prop] = this.assignProp(this.eventController[prop])\n                    }    \n                 }\n              }\n\n              this.eventController.saveHistory(historyRecord, [selectedType,selectedUri,type, elName, this.state.nameWasChange]);\n            }\n\n            let svg = this.eventController.getGraphSvg(); \n            this.setState({buttons: results.buttons,type: results.type, title: results.title,undoActive: true,elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange:false});      \n            \n            if (svg !== false)\n            {\n              this.createGraph(svg);\n            }\n\n            if(this.state.type.includes(\"end\"))\n            {\n              this.handleDownloadImage();\n            }\n            \n          });\n        }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object')\n    {\n     //how to \n     return JSON.parse(JSON.stringify(prop));\n    }\n    else\n    {\n      return prop; \n    }\n\n  }\n\n  createGraph = (chart) => {\n\n      const cb = svg => {  \n        this.setState({svg:svg});\n        this.props.graphCreation(svg);\n      \n      };\n      mermaid.render('id1',chart,cb);\n      \n    \n  }\n\n  handleChangeName = () => {\n\n\n    this.setState({changeName: !this.state.changeName});\n    if (this.state.changeName === true)\n    {\n      this.setState({elName: \"\", nameWasChange: false});\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function(){\n        $(\".changeAlert\").alert('fade');\n       });\n    }\n    else\n    {\n      this.setState({elName: \"\", nameWasChange : true});\n\n    }\n  }\n\n  handleDownloadImage = () => \n  { \n    const svgBlob = new Blob([this.state.svg], {type:\"image/svg+xml;charset=utf-8\"});\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({svgUrl: svgUrl});\n  \n  }\n\n  handleDownloadSchema = () =>\n  {\n    const ontoSchema = JSON.stringify(this.eventController.getOntoSchema()); \n    fileDownload(ontoSchema, 'ontoSchema.json');\n  }\n\n  render() {\n    return(\n      <div className = \"container-fluid text-center questionPart\">\n\n         <button type=\"Submint\" className= {this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {this.handleSubmit}>\n              Start transformation\n          </button>\n        <div className = {this.state.startTransform ? \"d-none\" : \"\"}>\n        <h3>{this.state.title}</h3>\n        <div className = \"optionButtons d-none d-md-block\">\n        <div className = \"btn-group-vertical text-right\"> \n          <button  type = \"button\" className =  \"btn btn-primary btnModal\"   onClick = {this.handleChangeName} disabled = {this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\") || this.state.type === \"nextBranchElements\"}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n          <button type = \"button\" className=\"btn btn-primary btnModal\" onClick = {() => this.handleClick(undefined,undefined,\"Undo\")} disabled = {!this.state.undoActive}>Undo</button>\n          <button type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); } }>Cancel</button>\n        </div>\n        </div>\n        <div className =  {this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n                <div className = \"input-group inputName\">\n                      <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n                      </div>\n                      <input placeholder = {this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.originalName}    type=\"text\" className=\"form-control\" onChange = {this.handleChange}  value = {this.state.elName}></input>\n                  </div> \n              <h5 className = {this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>  \n        </div>\n        <div className = \"divButtons text-center\">\n            <ModalButtons  buttons={this.state.buttons} onClickDownloadSchema = {this.handleDownloadSchema} svgUrl = {this.state.svgUrl} onClick = {this.handleClick} type = {this.state.type} elNames = {this.state.changeName} originalName = {this.state.originalName}/>\n        </div>\n        <div class=\"alert alert-success col-md-6 mx-auto changeAlert\"  role=\"alert\">\n         Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass ModalButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\"))\n    {\n      return (\n        <div className=\"row col-md-5 mx-auto\">\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>  \n          <select ref = \"relFrom\" className = \"col-md-6 mx-auto form-control cardinalitySelect\">\n              {this.props.buttons.filter((val) => {\n                  return val.direction === \"from\";\n              }).map((rel) => { \n               return <option value = {rel.name}>{rel.name}</option>\n              })}\n          </select>\n            \n          <select ref = \"relTo\" className = \"col-md-6 mx-auto form-control cardinalitySelect\"> \n              {this.props.buttons.filter((val) => {\n                  return val.direction === \"to\";\n              }).map((rel) => { \n               return <option value = {rel.name}>{rel.name}</option>\n              })}\n          </select> \n        \n          <button className = \"btn btn-success mx-auto questionPart\" onClick = {() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button> \n        </div> \n      )\n    }\n    else if (this.props.type.includes(\"end\"))\n    {\n      return (\n        <div className = \"col-md-8 mx-auto\">\n          <a className = \"btn btn-success btnEnd\" href = {this.props.svgUrl} download = \"ontoUml-graph.svg\">Download Onto-UML graph</a>\n          <button type=\"button\"  className = \"btn btn-success btnEnd\" onClick = {() => this.props.onClickDownloadSchema()}>Download Onto-Schema</button>\n        </div>\n      ); \n    }\n    else\n    {\n      return (\n      <div className=\"row col-md-6 mx-auto\">\n      {this.props.buttons.map((value) => {\n        return  <div className = \"col-md-4 mx-auto\">\n                      <button key = {this.props.uri} type=\"button\"  className= {value.name.toLowerCase() === \"none\"? \" btn btn-secondary btnModal\" : \"btn btn-success btnModal\"} onClick = {() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || ( this.props.originalName === \"\" && this.props.buttons.length === 1) || (value.name.toLowerCase() === \"relator\" &&  this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n                </div>\n      })}\n     </div>\n    )\n    }\n\n  }\n}\n\nclass Page extends React.Component {\n\n  render() {\n    return [\n      <Layout />\n    ]\n\n  }\n}\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}