{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","controllers/MainController.js","controllers/RdfController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/OntoSchemaController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","MainController","jsonData","ontologyURL","ontoUri","$","ajax","type","url","async","cache","dataType","success","json","this","rulesJson","JSON","parse","stringify","windowUrl","URL","window","location","href","modelId","searchParams","get","element","text","console","log","buttons","title","elName","origName","mapButtons","Array","isArray","buttonType","name","Promise","originalName","labelEL","key","questions","q","replace","label","question","unfinishedType","rule","qType","elLabel","preposition","isSameCaseInsensitive","tree","index","node","delUri","value","uri","result","split","push","object","find","other","localeCompare","undefined","sensitivity","direction","RdfController","puro","rdf","require","modelURL","xml","puroXML","error","jqXHR","textStatus","errorThrown","alert","relator","fromUri","query","sparqlQuery","deleteDuplicity","fatherElement","returnArr","endCall","elementsUri","length","i","findBTypeRelation","bind","debug","findBTypeChild","forEach","father","fatherType","fatherTypeRelation","recursiveFindChild","lastResult","deleteDuplicityInFinal","uniquePropertie","elements","prop","filter","item","pos","indexOf","j","property","concat","splice","bTypeTree","lastCall","final","sparql","callback","turtle","XMLSerializer","serializeToString","store","graph","serialize","err","str","create","load","results","execute","relationUri","elementUri","properties","duplicity","checkArr","res","includes","k","some","OntoModelController","addToOntoModel","ontoType","puroType","relationName","nameWasChange","branchIndex","origUri","elPuroType","elUri","getOntoElement","ontoModel","fromRelation","from","to","updateOntoModel","addRelation","fromType","toType","slice","el","getOntoModel","getElementsRelation","nextRel","getElementOntoType","getElementsByOntoType","origin","changeOrigin","getLastElementUri","getLastElement","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","lastEl","isElInstance","ruleKey","branchesCount","passEl","ontoEl","elementFather","foundFather","lastRelElement","getElementInRelRow","lastElUri","isRelationExist","getOntoBranch","relation","superType","toLowerCase","isRelationComplete","relatedElement","relElements","getElementInRelation","rels","types","rel","getCardinalElement","relationType","all","getOpositeDirection","el1","el2","selectedEl","firstEl","createButtons","ontoModelHistory","ImagController","graphCommand","findLabel","relationSpec","getRelationSpec","base","toKey","trim","relations","normRelType","showType","RuleController","ruleSelection","rules","previousElName","isElementInstance","relationLabel","countBtypes","offerTypes","needElName","getSpecificRule","offer","additionalQuestion","connect","getQuestion","elementConsistencyRules","ontoController","check","elTypes","getRelatedTypes","subType","elementConsistencySelection","moreThanOneRule","minCount","maxCount","allTypes","suffix","additionalRules","r","addRule","elementConsAddSelection","mincCountount","moreThanOne","bTypeNumber","addRules","toString","findSimpleRule","getAdditionalRule","selectedType","commonRuleSelection","fathers","start","fatheFound","addNone","fatherOnto","childPuroType","childType","child","commonRules","elInRelation","childrenCount","indexCount","isNaN","last","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","OntoScheController","ontoUmlSchema","schemaInit","relCount","ontoClassTransformation","opositeIndex","fromIndex","toIndex","relationTransformation","nodeCopy","nodeCopy2","schemas","compile","getSchema","ONTOUML_2","validator","ontoClass","parseInt","EventController","rdfController","imageController","ImageController","ruleController","historyController","ontoSchemaController","OntoSchmeController","getFullPath","then","queryTree","getRelations","elSettings","relationOrderIndex","relationIndex","setIndexexToDefault","firstCall","getRelationBTypes","relationTree","valuation","charAt","toUpperCase","bRelationRules","changeElementsProperty","relationWasSelected","getElementByProperty","consistencyCheck","additionalRule","relFlow","lastElInBranch","cPhaseHandle","updateCardinality","updateRelationTypes","relationEl","ontoRelation","relationRuleIndex","consistencyExeption","countBTypesInTree","getElementByUri","isElementInstace","relType","updateRelTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","ontoRel","nextTreeBranch","purType","getNextElement","getDefault","next","elementsWithoutType","checkElementsInRelationTree","withoutTypeIndex","relationEls","labels","commonRule","getUsableFather","unfinishedTypes","checkElementsConsistency","exeption","createQuestion","getAllTreeValuations","createRelCardinalityBtn","ontoRelFromN","ontoRelToN","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","treeEl","connectElement","lastTypes","createGraph","fromE","toE","relationFlow","fromB","fromT","ruleClass","toB","toT","labelFromE","selectElementsLabel","labelToE","relOntoType","fromEType","toEType","findRule","condition","validity","relationTreePromise","lastLabel","nextElement","bObjectChild","prevEl","rdfEl","getElementsFromBranch","addIndex","prevAdd","dupArray","lastChild","connectFrom","elWithoutType","currEl","childEl","isInAnohterRelation","deleteDuplicityInRelTree","fatherWithouType","getElementsWithoutType","elementConsitencyTree","elementConsistencyIndex","promiseArr","unshift","returnEl","isElementUseless","isRelationShareType","ontoElement","addToProperty","areChildrenInBranchUseless","lastRel","lastDirection","lastElement","allBranchBtypes","currentRelation","getConnectRelation","childRel","consistencyIndex","consistencyTree","elementTypes","checkDuplicity","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","transform","fatherOfFather","Layout","props","svg","setState","eventController","state","iframeURL","getIframeURL","fullSize","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","width","height","display","position","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","fullSizeSvg","addClass","removeClass","handleChangeName","fadeTo","slideUp","svgBlob","Blob","createObjectURL","handleDownloadSchema","ontoSchema","getOntoSchema","fileDownload","data-toggle","data-target","disabled","data-dismiss","confirm","reload","placeholder","onChange","lenght","onClickDownloadSchema","elNames","role","TypeButtons","refs","createRef","Math","random","ref","val","relFrom","relTo","download","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e2f6ec2d.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 304,\n\t\"./locale.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 659;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 795;","var map = {\n\t\"./N3Lexer\": 197,\n\t\"./N3Lexer.js\": 197,\n\t\"./N3Parser\": 198,\n\t\"./N3Parser.js\": 198,\n\t\"./N3Store\": 359,\n\t\"./N3Store.js\": 359,\n\t\"./N3StreamParser\": 360,\n\t\"./N3StreamParser.js\": 360,\n\t\"./N3StreamWriter\": 361,\n\t\"./N3StreamWriter.js\": 361,\n\t\"./N3Util\": 199,\n\t\"./N3Util.js\": 199,\n\t\"./N3Writer\": 200,\n\t\"./N3Writer.js\": 200\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 823;","import $ from 'jquery';\r\nexport default class MainController{\r\n    \r\n    \r\n    ontologyURL  = \"http://lod2-dev.vse.cz/ontology/puro#\"; \r\n    ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\"\r\n\r\n    constructor()\r\n    {\r\n        \r\n        let jsonData;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"rules.json\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function(json) {\r\n                jsonData = json;\r\n            }\r\n        });\r\n        \r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData)); \r\n        const windowUrl = new URL(window.location.href);\r\n        this.modelId = windowUrl.searchParams.get(\"model\");\r\n    }\r\n    // orgin lze držet jako property objektu \r\n    // uri lze držet v property objektu \r\n\r\n    debug (element, text)\r\n    {\r\n        console.log([JSON.parse(JSON.stringify(element)), text])\r\n    }\r\n\r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        \r\n        \r\n        //\"uri\": unfinishedTypes[0].element\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    getQuestion(labelEL, key)\r\n    {\r\n        \r\n        for (let q of this.rulesJson.questions)\r\n        {\r\n            if (q.type === key)\r\n            {\r\n                \r\n                const replace = typeof labelEL === \"string\" ? labelEL : labelEL.label; \r\n                return q.question.replace(\"VAL\", replace); \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            console.log(unfinishedType)\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", unfinishedType.elLabel).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            const preposition = this.isSameCaseInsensitive(unfinishedType.key, \"connect\") ? \" to \" : \" of \";\r\n            return \"What is \" + unfinishedType.key + preposition + unfinishedType.elLabel +\"?\";\r\n        }\r\n\r\n    }\r\n\r\n    countBTypesInTree(tree)\r\n    {\r\n        let index = 0; \r\n        for (let node of tree)\r\n        {\r\n            // && !node.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\")\r\n            if (this.delUri(node.type.value) === \"BType\")\r\n            {\r\n                index ++; \r\n            }\r\n        }\r\n       \r\n        return index; \r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n     getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n      }\r\n\r\n    isSameCaseInsensitive(text, other) {\r\n        return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;\r\n    }\r\n\r\n    getOpositeDirection (direction)\r\n    {\r\n        return  direction = direction === \"from\" ? \"to\" : \"from\"; \r\n    }\r\n\r\n\r\n}","import $ from 'jquery';\r\nimport MainController from './MainController';\r\n\r\n\r\nexport default class RdfController extends MainController {\r\n    \r\n    constructor() {\r\n        super(); \r\n        this.rdf = require('rdflib');\r\n        let puro ;\r\n        \r\n        const modelURL = this.rulesJson[\"modelURL\"].replace(\"MODELID\", this.modelId)\r\n        // puroOutput.xml\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url:   modelURL,\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n          \r\n                this.puroXML = xml;\r\n                console.log(this.puroXML)\r\n                puro = xml; \r\n            },\r\n            error: function (jqXHR, textStatus, errorThrown) {\r\n             alert(\"There is the problem to load serialized PURO model! \\n\" + errorThrown ); \r\n             //window.location.replace(document.referrer); \r\n            }\r\n        });\r\n        \r\n        this.puroXML = puro; \r\n     \r\n    }\r\n\r\n\r\n    getRelatorBtype  (relator, fromUri) \r\n    {\r\n            const query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findBTypeRelation (fatherElement, returnArr,endCall)  \r\n    {       \r\n\r\n            const elementsUri = fatherElement.uri.value;\r\n            const query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label .         \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                console.log(JSON.parse(JSON.stringify(result)));\r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    // otestovat jak funguje v případě dvou \r\n                    \r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    //POZOR MUZE BYT CHYB kvuli opakovani\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n\r\n    findBTypeChild  (fatherElement, returnArr,endCall) \r\n        {\r\n                const elementsUri = fatherElement.uri.value;\r\n                \r\n                const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelation}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, result => {  \r\n                    this.debug(result);\r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                \r\n                    if (result.length > 0)\r\n                    {\r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        }\r\n                    }\r\n                    else\r\n                    { \r\n                      \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                });          \r\n             }\r\n\r\n             getFullPath ()  \r\n             {\r\n                 const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri} ?child a ?childType . ?child ?childRel ?uri . } \r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                     FILTER NOT EXISTS {?uri puro:instanceOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                  this.sparqlQuery(query, result => {\r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            // tady to nastav ve SPARQ \r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                  \r\n                      this.deleteDuplicity(result,[\"valuation\", \"connect\", \"childType\", \"child\", \"childRel\"]);\r\n                      this.recursiveFindChild(0,result,[], lastResult => {\r\n                             lastResult = this.deleteDuplicityInFinal(lastResult);\r\n                             lastResult = this.uniquePropertie(lastResult);\r\n                             resolve(lastResult);\r\n                     });\r\n                 });\r\n             });\r\n             }\r\n\r\n             uniquePropertie (elements)\r\n             {\r\n                for (let element of elements)\r\n                {\r\n                    for (let prop in element)\r\n                    {\r\n                        if (Array.isArray(element[prop]))\r\n                        {\r\n                            element[prop] = element[prop].filter(function(item, pos) {\r\n                                return element[prop].indexOf(item) === pos;\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             deleteDuplicityInFinal (elements)\r\n             {\r\n                for (let i = 0; i < elements.length; i++) {\r\n                    for (let j = 0; j < elements.length; j++) {\r\n                        if (elements[i].uri.value === elements[j].uri.value && i !== j)\r\n                        {\r\n                            for (let property in elements[i])\r\n                            {\r\n                                if (Array.isArray(elements[i][property]))\r\n                                {\r\n                                   //raassss\r\n                                   elements[j][property] = elements[j][property].filter(e => e !== elements[i][property]); \r\n                                   elements[i][property] = elements[i][property].concat(elements[j][property]); \r\n                                }\r\n                            }\r\n\r\n                            elements.splice(j, 1);\r\n                        }            \r\n                    }   \r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             recursiveFindChild (i, result, bTypeTree,lastCall, type)\r\n             {      \r\n                 //last change \r\n                 if(i >= result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        });\r\n                     }\r\n                     else\r\n                     {\r\n                        this.findBTypeChild(result[i],bTypeTree,  final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        });\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             sparqlQuery (sparql, callback)  {\r\n                const puroXML = new XMLSerializer().serializeToString(this.puroXML);\r\n               \r\n                const store = this.rdf.graph();\r\n                const contentType = 'application/rdf+xml';\r\n                const baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                const rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n\r\n     \r\n            //from nebo to poslat si ukazatel? \r\n            getRelationBTypes (relationUri) \r\n            {\r\n                let query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                    this.sparqlQuery(query, (result) => {\r\n                        // result.push({uri: {token:\"uri\", value: relationUri}});\r\n                        console.log(result);\r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            //začátek hlavního\r\n            getRelations  () \r\n            {\r\n                // ještě by to chtělo sjednotit do pole \r\n                const query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation} \r\n                  FILTER NOT EXISTS{?to a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?from a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?to a puro:BValuation}\r\n                  FILTER NOT EXISTS{?from a puro:BValuation}\r\n                  ?to a ?toType . \r\n                  ?from a ?fromType .\r\n                }`;\r\n\r\n                /*\r\n                                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                  {?from a puro:BObject}\r\n                  UNION \r\n                  {?from a puro:BType}\r\n                  {?to a puro:BObject}\r\n                  UNION\r\n                  {?to a puro:BType}   \r\n                  ?to a ?toType . \r\n                  ?from a ?fromType . \r\n                }`; */\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            findRelation  (elementUri) {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            async firstFind  ()  {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //result[index].connect\r\n            deleteDuplicity  (result, properties) {\r\n                var duplicity;\r\n                var checkArr = []; \r\n                \r\n                // sjednocení datových typů na pole\r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class OntoModelController extends MainController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction, elName, nameWasChange, ontoUri, branchIndex, origUri) => \r\n    {\r\n    \r\n        if (this.getOntoElement(this.ontoUri + elName) === false)\r\n        {\r\n            let elPuroType;\r\n            let elLabel;\r\n            let elUri; \r\n            nameWasChange = nameWasChange === undefined ? false : nameWasChange;\r\n            origUri = origUri === undefined ? \"\" : origUri;\r\n            if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n            {\r\n\r\n                elPuroType = false;\r\n                elLabel = elName;\r\n                elUri = this.ontoUri + elName; \r\n\r\n            }\r\n            else\r\n            {\r\n                elPuroType = puroType;\r\n                elLabel = nameWasChange ? elName : label; \r\n                elUri = uri; \r\n            }\r\n\r\n            if (this.getOntoElement(elUri) === false)\r\n            {\r\n                this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: [relationName], direction: [direction], from: [undefined], to:[undefined],type:\"Class\", branchIndex: [branchIndex], origUri:origUri});\r\n            }    \r\n        }\r\n        else\r\n        { \r\n            //koks\r\n            if (nameWasChange) this.updateOntoModel(uri, \"label\",elName);\r\n            this.updateOntoModel(uri, \"fromRelation\",relationName);\r\n            this.updateOntoModel(uri, \"direction\",direction);\r\n            this.updateOntoModel(uri, \"branchIndex\",branchIndex);\r\n        }\r\n        console.log(this.ontoModel)\r\n        return this.ontoModel; \r\n    }\r\n\r\n    isRelationComplete (relation)\r\n    {\r\n        if (relation.type === \"relation\" && relation.from.length > 0 && relation.to.length > 0)\r\n        {\r\n            return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    getCardinalElement (element, superType)\r\n    {\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.from[0] === element && superType === false)\r\n            {\r\n                return node.to[0]; \r\n            }\r\n            else if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.to[0] === element && superType === true)\r\n            {\r\n                return node.from[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getElementByProperty (property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[property] === value)\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    getReletadELement (element, relationName)\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && (node.from.includes(element.uri) || node.to.includes(element.uri)) && this.isRelationComplete(node))\r\n            {\r\n                let relatedElement; \r\n                if (node.from.includes(element.uri)) \r\n                {\r\n                    relatedElement = node.to[0];\r\n                }\r\n                else\r\n                {\r\n                    relatedElement = node.from[0];\r\n                } \r\n                relatedElement = this.getOntoElement(relatedElement);\r\n                if (relatedElement.fromRelation.includes(relationName))\r\n                {\r\n                    return relatedElement; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    addRelation = (type, from, to, uri,label, fromType, toType) => \r\n    {\r\n        //fromT toT\r\n        uri = uri === undefined ? this.ontoUri.slice(0,-1) + \"/relation/\"+type+\"/\"+this.delUri(from)+this.delUri(to) : uri; \r\n        fromType = fromType === undefined ? [] : [fromType];\r\n        toType = toType === undefined ? [] : [toType]; \r\n        from = from === undefined || \"\" || from.length === 0 ? [] : [from];\r\n        to = to === undefined || \"\" || to.length === 0 ? [] : [to];\r\n        \r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && el.from.includes(from) && el.to.includes(to))\r\n            {\r\n                return this.ontoModel;\r\n            }\r\n        }\r\n\r\n\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from: from, to: to,uri:uri, label:label, fromType: fromType, toType: toType, fromRelation: []});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    updateOntoModel = (elementsUri, property, value, duplicity = true) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    if (duplicity === true || !node[property].includes(value))\r\n                    {\r\n                        node[property].push(value);\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if (duplicity === true || node[property] !== value)\r\n                    {\r\n                        node[property] = value;\r\n                    } \r\n                }\r\n                return this.ontoModel;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addToProperty (uri, property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                 \r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    node[property].push(value); \r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n        \r\n       \r\n        let returnArr = []; \r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            let nextRel = false;\r\n            let nextOther = false;\r\n            if (Array.isArray(node[direction]))\r\n            {\r\n                nextRel = node[direction].includes(uri) ? true : false; \r\n            }\r\n\r\n        \r\n            if (node[\"type\"] === \"relation\" && nextRel === true)\r\n            {\r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" &&  (node[\"from\"].includes(uri) || node[\"to\"].includes(uri)))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n    getElementsByOntoType = (type, origin) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType && (origin === undefined || node.fromRelation.includes(origin)))\r\n            {  \r\n                result.push(node.uri);\r\n            }\r\n       }\r\n       return result; \r\n\r\n    }\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n    \r\n\r\n    getLastElementUri = (origin, direction, branchIndex) => \r\n    {\r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n            for (let j = 0; j < this.ontoModel[i].fromRelation.length; j++) {\r\n               \r\n                if ((this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].branchIndex.includes(branchIndex) && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\"))\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\" && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && direction === undefined && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri; \r\n                }\r\n                else if(origin === undefined && direction === undefined  && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    getElementInRelRow (lastElUri)\r\n    {\r\n        \r\n        const relElements = this.getElementInRelation(lastElUri,\"*\",\"from\",false); \r\n        if (relElements.length === 0)\r\n        {\r\n            return lastElUri;\r\n        }\r\n        \r\n        const fatherChildren = this.getElementInRelation(relElements[0].element.uri,\"*\",\"to\",this.getOntoElement(lastElUri).ontoType); \r\n\r\n        return fatherChildren[0].element.uri; \r\n\r\n    }\r\n\r\n    getLastElement = (origin, direction) =>\r\n    {\r\n        const uri = this.getLastElementUri(origin, direction);\r\n        return this.getOntoElement(uri); \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, lastEl, puroType, isElInstance, ruleKey, nameWasChange, branchesCount) => \r\n    {\r\n  \r\n        const ontoEl = this.getOntoElement(selectedUri);\r\n   \r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false && isElInstance === false && (element !== false || ontoEl !== false))\r\n        {    \r\n           \r\n            let father;\r\n            let passEl; \r\n            if (puroType === \"superType\")\r\n            {\r\n                father = this.ontoUri + elName;\r\n                passEl = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = this.ontoUri + elName;    \r\n                father = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else\r\n            {\r\n\r\n                if (element !== false)\r\n                {\r\n                   \r\n                    father = element.father[0] === undefined ? element.uri.value : element.father[0];\r\n                   \r\n                }\r\n                else\r\n                {\r\n                    father = ontoEl.uri;\r\n                }\r\n                passEl = this.ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if (relationUri === null)\r\n        {\r\n            if (element.father.length > 0)\r\n            {\r\n\r\n                return [element.father[0], element.uri.value];\r\n            }\r\n            else return false; \r\n            \r\n        }\r\n        else if (puroType.includes(\"elementSelection\") || (element !== false && this.getOntoElement(element.father[0]) !== false))\r\n        {   \r\n            let elementFather = \"foundFather\" in element ? element.foundFather : this.getOntoElement(element.father[0]);\r\n            if ((puroType.includes(\"invert\") || !puroType.includes(\"elementSelection\")) && !puroType.includes(\"classSelection\"))\r\n            {\r\n \r\n                return [element.uri.value, elementFather.uri];\r\n            }\r\n            else\r\n            {\r\n                return [elementFather.uri,element.uri.value];\r\n            \r\n            }\r\n        }\r\n        else if((addRulesLenght === 0 && lastEl === true) || element === false || isElInstance === true)\r\n        {\r\n            //koko\r\n            \r\n            let lastRelElement = this.getLastElement(relationUri);\r\n            lastRelElement = this.getOntoElement(this.getElementInRelRow(lastRelElement.uri))\r\n          \r\n            const passEl = (element === false || isElInstance === true) ? this.ontoUri + elName : selectedUri;\r\n\r\n            let lastElUri = this.getLastElementUri(relationUri,ruleKey, branchesCount);\r\n            lastElUri = this.getElementInRelRow(lastElUri); \r\n    \r\n            if (lastRelElement !== false && (lastRelElement.direction[lastRelElement.direction.length - 1] !== ruleKey || branchesCount > 1) && addRulesLenght === 0)\r\n            {\r\n             \r\n                if (lastElUri !== false && !this.isRelationExist(lastElUri,passEl) &&  this.getOntoBranch(relationUri, ruleKey).length > 1)\r\n                {\r\n                    return [lastElUri, passEl];\r\n                }\r\n              \r\n                this.updateOntoModel(relationUri,ruleKey,passEl, false);\r\n                return relationUri; \r\n            }\r\n            else if (element === false || lastRelElement !== false || isElInstance === true)\r\n            {\r\n                \r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n        \r\n    }\r\n\r\n    checkDuplicity (label) \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes (elUri, direction, ontoType) \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n        for (let rel of rels)\r\n        {\r\n          //Arrow \r\n          \r\n          if (rel.ontoType === ontoType || (ontoType === \"Generalization\" && rel.ontoType.includes(\"memberOf\")))\r\n          {\r\n              const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType === \"Relator\")\r\n          {\r\n            types.push(rel.ontoType); \r\n          }\r\n          else if (ontoType === false)\r\n          {\r\n            const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n            elements.push(el);\r\n            types.push(this.getElementOntoType(el)); \r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    getElementsFromBranch(element)\r\n    {\r\n\r\n        let returnArr = [element];\r\n        let el = element;\r\n    \r\n        while (this.getCardinalElement(el,true) !== false)\r\n        {   \r\n            el = this.getCardinalElement(el, true);\r\n            returnArr.push(el);\r\n        }\r\n\r\n        return returnArr; \r\n    }\r\n\r\n    getElementInRelation(elementUri, relationType, direction, ontoType)\r\n    {\r\n        let returnArr = [];\r\n        const all = relationType === \"*\" ? true : false; \r\n        ontoType = ontoType === undefined || false ? false : ontoType; \r\n\r\n        for (let relation of this.ontoModel)\r\n        {\r\n     \r\n            if (relation.type === \"relation\" && (relation.ontoType === relationType || all) && relation[this.getOpositeDirection(direction)].includes(elementUri))\r\n            {   \r\n                let el = this.getOntoElement(relation[direction][0]);\r\n         \r\n                if (ontoType === false || ontoType === el.ontoType)\r\n                {\r\n                    returnArr.push({element : el, relationType: relation.ontoType}); \r\n                } \r\n            }\r\n        }\r\n        return returnArr; \r\n    }\r\n\r\n    isRelationExist(el1, el2)\r\n    {\r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && (el.from === el1 && el.to === el2) || (el.from === el2 && el.to === el1))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n    getOntoBranch(relation, key, branchIndex)\r\n    {\r\n        let returnArr = [];\r\n        branchIndex = branchIndex === undefined ? false : branchIndex;\r\n        for (let el of this.ontoModel)\r\n        {\r\n            for (let index in el.fromRelation)\r\n            {\r\n                if (el.fromRelation[index] === relation && el.direction[index] === key && (branchIndex === false || el.branchIndex.includes(branchIndex)))\r\n                {\r\n                    returnArr.push(el);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n    \r\n    connectToBranchElement(relation, key, selectedEl)\r\n    {\r\n\r\n        const question =  \"To which element is the \" + this.delUri(selectedEl.uri.value) + \" connected?\";\r\n\r\n        const firstEl = (this.getOntoBranch(relation, key)[0]);\r\n        const lastEl = this.getLastElement(relation, key);\r\n\r\n        if (firstEl === undefined || lastEl === false)\r\n        {\r\n            return false\r\n        }\r\n        else\r\n        {\r\n            \r\n            return this.createButtons([firstEl.label, lastEl.label],question, \"nextBranchElements\", false, \"\");\r\n        }\r\n\r\n        if (firstEl.uri === lastEl.uri)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n           \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph  (ontoModel) \r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to[0]) !== false && this.findLabel(node.from[0]) !== false) {\r\n                if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from.length > 0 && node.to.length > 0) \r\n                    {\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key] ? '\"'+node.fromType[key][1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\";\r\n                        }\r\n\r\n                      //  graphCommand += this.findLabel(node.from) +\" \"+ (fromT ? '\"'+fromT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+fromT[1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\"; \r\n                        \r\n                        for (let key in node.to)\r\n                        {\r\n                            graphCommand += node.label +\" \"+ (node.toType[key] ? '\"'+node.toType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key]  ? '\"'+node.toType[key][1]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + \" : <<Mediation>>\\n\"; \r\n                        }\r\n                      \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    const relationSpec = this.getRelationSpec(node.ontoType);\r\n                    if (node.from.length === node.to.length)\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0] + (node.toType[key] ? '\"'+node.toType[key]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            let base = this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0];\r\n                            \r\n                            for (let toKey in node.to)\r\n                            {\r\n                                graphCommand += base + (node.toType[toKey] ? '\"'+node.toType[toKey]+'\"' : \"\") + \" \" + this.findLabel(node.to[toKey]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n    \r\n    getRelationSpec (ontoType)\r\n    {\r\n        for(let rel of this.rulesJson.relations)\r\n        {\r\n            \r\n            if (ontoType in rel)\r\n            {\r\n                \r\n                const normRelType = rel[ontoType]; \r\n                const showType = \"showType\" in rel && rel[\"showType\"] === true ? true : false;  \r\n                let code; \r\n                switch(normRelType.toLowerCase())\r\n                {\r\n                    case \"arrowline\": code = \" <|-- \";  \r\n                        break; \r\n                    case \"simpleline\": code = \" -- \"; \r\n                        break; \r\n                    case \"dashedline\": code = \" .. \"; \r\n                        break; \r\n                    case \"composition\": code = \" *-- \"; \r\n                        break; \r\n                    case \"aggregation\": code = \" o-- \"; \r\n                        break; \r\n                    default:  code = \" -- \"; \r\n                }\r\n            \r\n                return [code, showType]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n    \r\n\r\n    //ruleSelection queryTree, \r\n    ruleSelection = (rules, key, element, previousElName, rule, isElementInstance, relationLabel, countBtypes) => \r\n    {\r\n        let commands; \r\n        let additionalRules;\r\n        let offerTypes;\r\n        let uri;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            commands = this.getSpecificRule(rules,key, false, countBtypes);\r\n            //additionalRules = this.getAdditionalRule(commands,ontoType);\r\n            //offerTypes = (additionalRules.length > 0 ) ? offerTypes = additionalRules : offerTypes = commands.offer;\r\n            offerTypes = commands.offer   \r\n        }\r\n\r\n        //z elementu udělat otázku\r\n        if (element !== false)\r\n        {\r\n            let additionalQuestion = \"\";\r\n            \r\n            if (element.connect.length > 1)\r\n            { \r\n                additionalQuestion = \"\\n \" + this.getQuestion(relationLabel, \"relSpecific\");\r\n            }\r\n            \r\n            if (isElementInstance === true)\r\n            {\r\n                needElName =true;\r\n                uri = element.uri.value;\r\n \r\n                question = this.getQuestion(element.label.value, \"instance\") + additionalQuestion;\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n                uri = element.uri.value;\r\n                question = this.getQuestion(element.label.value, \"BType\") + additionalQuestion;\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            needElName = true;\r\n            question = this.getQuestion(previousElName, \"bTypeChild\");\r\n\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n\r\n    moreThanOneRule (ontoController, element,minCount,maxCount, check)\r\n    {\r\n        const elInRelation = ontoController.getElementInRelation(element.uri,\"*\",\"from\",false)[0]; \r\n        const childrenCount = ontoController.getElementInRelation(elInRelation.element.uri,elInRelation.relationType,\"to\", element.ontoType).length;\r\n        if (childrenCount < maxCount)\r\n        {\r\n            const types = childrenCount < minCount ? [element.ontoType] : [element.ontoType, \"None\"]\r\n            check.push({key: \"subType\", types: types, element: elInRelation.element.uri, rule:{type:[element.ontoType],question:this.getQuestion(elInRelation.element,\"moreThanOne\")}}); \r\n        }\r\n\r\n        return check; \r\n\r\n    }\r\n\r\n    // this.ontoController.getOntoElement(this.relation.uri.value);\r\n    elementConsistencyRules = (element,  ontoController) => \r\n    {\r\n            // v případě undefinied vyhoď, že pravidlo není definováno \r\n            let rules = this.rulesJson[element.ontoType];    \r\n            let check = []; \r\n        \r\n       \r\n\r\n            //Tady by měla být pole jelikož to může být 1:N \r\n            // !!! Převod na metodu a úprava dle pravidel\r\n            // udělat connect -> subtype -> supertype jenom v případě arrow \r\n\r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Generalization\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Generalization\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n            \r\n            for (let rule of rules)\r\n            {\r\n             \r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes, ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes,ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes, ontoController);\r\n                if (rule.key === \"moreThanOne\")\r\n                {\r\n                    check = this.moreThanOneRule(ontoController,element,rule.minCount,rule.maxCount,check);\r\n                }\r\n            }\r\n\r\n            //Kontrola none a spojených typů!! \r\n\r\n            if ((check.length > 0 && check[0].types.includes(\"Relator\") && check[0].types.includes(\"None\")))\r\n            {\r\n                check.splice(0, 1);  \r\n            }\r\n\r\n            for (let i = 0; i < check.length; i++) {\r\n                check[i][\"elLabel\"] =  ontoController.getOntoElement(check[i].element).label;  \r\n            }\r\n\r\n\r\n\r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection = (rule,elTypes,key,element,check,rules,allTypes, ontoController) =>\r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                \r\n                const suffix = key[key.length - 1] === \"e\" ? \"d\" : \"ed\";\r\n                const additionalRules =  this.getSpecificRule(rules, key + suffix, true);\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    // if includes none -> zkontrolovat lenght superType -> zeptat se jestli chci doplnit superType -> nabídnout co je v tabulce -> zkontrolovat jestli už není\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n\r\n                }\r\n                else \r\n                {\r\n                    if (additionalRules !== false)\r\n                    {\r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                                if (\"moreThanOne\" in addRule && addRule[\"moreThanOne\"] === true && elTypes.length < 2)\r\n                                {\r\n                                    check = this.moreThanOneRule(ontoController,element,addRule.mincCountount,addRule.maxCount,check);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n    \r\n        if (type in rule)\r\n        {\r\n      \r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                \r\n                for (let index in check)\r\n                {\r\n                  \r\n                    if (check[index].key === type && check[index].element === element.uri)\r\n                    {\r\n                        check.splice(index, 1);\r\n                    }\r\n                }\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n            else if (\"moreThanOne\" in rule && rule[\"moreThanOne\"] === true)\r\n            {\r\n                //vrat element dej fathera \r\n            }\r\n\r\n        }\r\n    \r\n        return check; \r\n       \r\n    }\r\n\r\n    numberOfRuleStep (relationType, key, bTypeNumber)\r\n    {\r\n        const rule = this.getSpecificRule(this.rulesJson[relationType], key, false, bTypeNumber);\r\n        let indexCount = 0; \r\n\r\n        for (let key in rule)\r\n        {\r\n            if (!isNaN(key))\r\n            {\r\n                indexCount ++; \r\n            }\r\n        }\r\n\r\n        return indexCount; \r\n    }\r\n\r\n    getSpecificRule = (rules, key, moreThanOne, bTypeNumber) =>\r\n    {\r\n        let addRules = [];\r\n        \r\n        bTypeNumber = bTypeNumber === undefined ? false : bTypeNumber.toString(); \r\n        moreThanOne = moreThanOne === undefined ? false : moreThanOne; \r\n\r\n        if (bTypeNumber !== false)\r\n        {\r\n            for (let node of rules)\r\n            {\r\n                if (node.key === key &&  (\"bTypeNumber\" in node) && node.bTypeNumber.includes(bTypeNumber))\r\n                {\r\n                    \r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                     \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (moreThanOne === false && addRules < 1)\r\n            {\r\n                addRules = this.findSimpleRule(rules,key,moreThanOne, true);\r\n                if (addRules.length === 1 && moreThanOne === false) return addRules[0]; \r\n            }\r\n        }\r\n        else\r\n        {\r\n          addRules = this.findSimpleRule(rules,key,moreThanOne, false);\r\n          if (addRules.length === 1 && moreThanOne === false) return addRules[0]; \r\n        }\r\n\r\n\r\n\r\n        // Tady možná hvězda \r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n    findSimpleRule (rules, key, moreThanOne, last)\r\n    {\r\n        const returnArr = []; \r\n        \r\n        for (let node of rules)\r\n        {\r\n            \r\n            if (node.key === key && (last === false || !(\"bTypeNumber\" in node))) \r\n            {\r\n                if (moreThanOne === true)\r\n                {\r\n                    returnArr.push(node);\r\n                }\r\n                else\r\n                {   \r\n                    return [node]; \r\n                }   \r\n            }\r\n        }\r\n\r\n        return returnArr; \r\n\r\n\r\n\r\n    }\r\n\r\n    getAdditionalRule = (rule, selectedType, index) =>\r\n    {\r\n        /*\r\n        if (selectedType in rule)\r\n        {\r\n            (\"bam\")\r\n            console.log(rule)\r\n            return rule[selectedType];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n        */\r\n        if (rule !== false && index.toString() in rule && selectedType in rule[index])\r\n        {\r\n            return rule[index][selectedType]; \r\n        }\r\n        \r\n        return [];\r\n    \r\n    }\r\n\r\n\r\n    commonRuleSelection = (element, fathers,start, ontoModel, fatheFound, addNone) => \r\n    {\r\n\r\n        // tohle vyřeš na úrovni onto modelu!\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        //const connection =  element.connect.length > 0 ? true : false;  \r\n        let type = \"elementSelection\"; \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        if (fatheFound)\r\n        {\r\n            fatherOnto.push(element.foundFather.ontoType); \r\n        }\r\n        else\r\n        {\r\n            for (let node of ontoModel)\r\n            {\r\n                if (fathers.includes(node.uri)) {\r\n                    fatherOnto.push(node.ontoType);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        // Změnit!! \r\n        for (let rule of this.rulesJson.commonRules)\r\n        {\r\n\r\n            /*((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))) &&\r\n            (element.childType.some(r=> rule.childPuro.includes(r) || \r\n            (rule.childPuro.includes(\"none\"))) \r\n           ))\r\n            */\r\n           if (start === true && rule.fatherOnto[0] === \"NoRelation\")\r\n           {\r\n             const question = \"Which type is \"+element.label.value+\"?\";\r\n             return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n           }\r\n           else if ((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))))\r\n            {\r\n                \r\n                if (\"invert\" in rule && rule[\"invert\"] === true)\r\n                {\r\n                    type += \"-invert\"\r\n                }\r\n                \r\n                const offerTypes = JSON.parse(JSON.stringify(rule.offer));\r\n                \r\n                if (addNone === true && !offerTypes.includes(\"None\"))\r\n                {\r\n                    offerTypes.push(\"None\");\r\n                }\r\n                \r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import EventController from \"./EventController\";\r\n\r\nexport default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2] !== undefined && this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","import MainController from './MainController';\r\n\r\nexport default class OntoScheController extends MainController{\r\n  /*\r\n    constructor()\r\n    {\r\n      super(); \r\n\r\n    \r\n       const mod = this.initJson();\r\n       console.log(mod)\r\n       const model = this.transform(mod);\r\n\r\n\r\n\r\n         console.log(model);\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(model);\r\n\r\n        if (isValid)\r\n        {\r\n          console.log(\"ok\")\r\n        }\r\n        else\r\n        {\r\n          console.log(validator.errors);\r\n        }\r\n       \r\n    }  */\r\n\r\n    transform (ontoModel)\r\n    {\r\n        const ontoUmlSchema = this.schemaInit(); \r\n        let relCount = 0; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if(node.type === \"Class\" || node.ontoType.toLowerCase() === \"relator\")\r\n            {\r\n              ontoUmlSchema[\"contents\"].push(this.ontoClassTransformation(node)); \r\n            }\r\n        }\r\n        console.log(ontoUmlSchema)\r\n        // Relations have to be added at the end \r\n        for (let node of ontoModel)\r\n        {\r\n          if (node.type === \"relation\" && node.ontoType.toLowerCase() !== \"relator\") {\r\n              let key; \r\n              \r\n              if (node.from.length >= node.to.length)\r\n              {\r\n                 key = \"from\";\r\n              }\r\n              else\r\n              {\r\n                key = \"to\"; \r\n              }\r\n              \r\n              let opositeIndex = 0;\r\n              for (let index in node[key])\r\n              {\r\n                 \r\n                 let fromIndex = key === \"from\" ? index : opositeIndex; \r\n                 let toIndex = key === \"to\" ? index : opositeIndex; \r\n                  \r\n                 ontoUmlSchema[\"contents\"].push(this.relationTransformation(node, relCount, fromIndex, toIndex));\r\n                 relCount += 2;  \r\n                 if (index <= node[key].length)\r\n                 {\r\n                    opositeIndex = index; \r\n                 }\r\n              }\r\n          }\r\n          else if (node.ontoType.toLowerCase() === \"relator\")\r\n          {\r\n            \r\n            let key; \r\n              \r\n            if (node.from.length >= node.to.length)\r\n            {\r\n              key = \"from\";\r\n            }\r\n            else\r\n            {\r\n              key = \"to\"; \r\n            }\r\n            \r\n            let opositeIndex = 0;\r\n\r\n            for (let index in node[key])\r\n            {\r\n              let nodeCopy = JSON.parse(JSON.stringify(node));\r\n              let nodeCopy2 = JSON.parse(JSON.stringify(node));  \r\n\r\n              nodeCopy[\"uri\"] += \"rel1\"\r\n              nodeCopy2[\"uri\"] += \"rel2\"\r\n        \r\n              nodeCopy[\"ontoType\"] = \"mediation\"\r\n              nodeCopy2[\"ontoType\"] = \"mediation\"\r\n              \r\n              if (key === \"from\")\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][index][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][index][1];\r\n\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy2[\"fromType\"] = node[\"toType\"][opositeIndex][0];\r\n                  nodeCopy2[\"toType\"] = node[\"toType\"][opositeIndex][1];\r\n                  nodeCopy2[\"to\"] = [nodeCopy[\"to\"][opositeIndex]];\r\n                }\r\n\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][index]];\r\n                \r\n              }\r\n              else\r\n              {\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy[\"fromType\"] = node[\"fromType\"][opositeIndex][0]; \r\n                  nodeCopy[\"toType\"] = node[\"fromType\"][opositeIndex][1];\r\n                  nodeCopy[\"from\"] = [nodeCopy[\"from\"][opositeIndex]];\r\n                }\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][index][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][index][1];\r\n                \r\n\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][index]];\r\n              }\r\n              \r\n              nodeCopy[\"to\"] = [node.uri];\r\n              nodeCopy2[\"from\"] = [node.uri];\r\n              \r\n              console.log (JSON.parse(JSON.stringify(nodeCopy)))\r\n              console.log (JSON.parse(JSON.stringify(nodeCopy2)))\r\n\r\n              if (!(key === \"to\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy, relCount, 0,0));\r\n                relCount += 2;\r\n              } \r\n              \r\n              if (!(key === \"from\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy2, relCount,0,0));\r\n                relCount += 2; \r\n              } \r\n \r\n              if (index < node[this.getOpositeDirection(key)].length - 1)\r\n              {\r\n                 opositeIndex = index; \r\n              }\r\n              else\r\n              {\r\n                 opositeIndex = false; \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        // this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(ontoUmlSchema);\r\n\r\n        if (isValid)\r\n        {\r\n          return ontoUmlSchema; \r\n        }\r\n        else\r\n        {\r\n          alert(\"Model is not valid! Check OntoSchemaCotroller!\"); \r\n          return {}; \r\n        }\r\n    }\r\n\r\n    schemaInit ()\r\n    {\r\n        return {\r\n            \"type\": \"Package\",\r\n            \"id\": \"puroConversion\",\r\n            \"name\": null,\r\n            \"description\": null,\r\n            \"contents\": [],\r\n            \"propertyAssignments\": null\r\n            }\r\n    }\r\n\r\n    ontoClassTransformation (ontoClass)\r\n    {\r\n      return  {\r\n            \"type\": \"Class\",\r\n            \"id\": ontoClass.uri ,\r\n            \"name\": ontoClass.label,\r\n            \"description\": null,\r\n            \"properties\": null,\r\n            \"literals\": null,\r\n            \"propertyAssignments\": null,\r\n            \"stereotypes\": [ontoClass.ontoType.toLowerCase()],\r\n            \"isAbstract\": null,\r\n            \"isDerived\": null\r\n            }\r\n    }\r\n\r\n    relationTransformation (relation, relCount, fromIndex, toIndex)\r\n    {\r\n\r\n        if (relation.ontoType === \"Generalization\")\r\n        {\r\n             return {\r\n                \"type\": \"Generalization\",\r\n                \"id\": relation.uri,\r\n                \"name\": null,\r\n                \"description\": null,\r\n                \"general\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.from[fromIndex]\r\n                },\r\n                \"specific\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.to[toIndex]\r\n                },\r\n                \"propertyAssignments\": {\r\n                  \"nonStandardProperty\": null\r\n                }\r\n              };\r\n        }\r\n        else\r\n        {\r\n            return {\r\n              \"type\": \"Relation\",\r\n              \"id\": relation.uri,\r\n              \"name\": null,\r\n              \"description\": null,\r\n              \"properties\": [\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + relCount,\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.from[fromIndex]\r\n                  },\r\n                  \"cardinality\": relation.fromType[fromIndex] === \"\" || undefined ? null : relation.fromType[fromIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                },\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + (parseInt(relCount) + 1),\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.to[toIndex]\r\n                  },\r\n                  \"cardinality\": relation.toType[toIndex] === \"\" || undefined ? null : relation.toType[toIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                }\r\n              ],\r\n              \"propertyAssignments\": {\r\n                \"nonStandardProperty\": null\r\n              },\r\n              \"stereotypes\": [relation.ontoType.toLowerCase()],\r\n              \"isAbstract\": true,\r\n              \"isDerived\": false\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n/*\r\n    initJson()\r\n    {\r\n      return JSON.parse(`[\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Relator\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#fsd\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#wqe\",\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#vcxv\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n          \"label\": \"offers\",\r\n          \"fromType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"toType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ],\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Business_Entity\",\r\n          \"label\": \"Business_Entity\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ],\r\n          \"origUri\": \"first\"\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Business_Entity\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#fsd\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/Business_Entityfsd\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#fsd\",\r\n          \"label\": \"fsd\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ],\r\n          \"origUri\": \"\"\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Territory\",\r\n          \"label\": \"Territory\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ],\r\n          \"origUri\": \"first\"\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Territory\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#wqe\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/Territorywqe\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#wqe\",\r\n          \"label\": \"wqe\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\",\r\n            \"to\",\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1,\r\n            1,\r\n            1\r\n          ],\r\n          \"origUri\": \"\"\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#ReleaseType\",\r\n          \"label\": \"ReleaseType\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            2\r\n          ],\r\n          \"origUri\": \"first\"\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#ReleaseType\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#vcxv\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/ReleaseTypevcxv\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#vcxv\",\r\n          \"label\": \"vcxv\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\",\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            2,\r\n            2\r\n          ],\r\n          \"origUri\": \"\"\r\n        }\r\n      ]`); \r\n    }\r\n    */\r\n}","import RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\nimport OntoSchmeController from './OntoSchemaController.js';\r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();   \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController();\r\n        this.historyController = new HistoryController();\r\n        this.ontoSchemaController = new OntoSchmeController(); \r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;          \r\n        });\r\n\r\n                     \r\n        \r\n\r\n\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    getDefault (firstCall)\r\n    {\r\n        \r\n        console.log(this.rdfController.getRelationBTypes(\"http://lod2-dev.vse.cz/data/puromodels#ticket\"));\r\n        // tady se zeptej na type relationu \r\n        // tohle není do defaultu ale do next element\r\n        // hod vyjmku v případě když nebude žádný relation k dispozic\r\n       \r\n        if (this.relationOrderIndex === this.relations.length || this.relations.length === 0)\r\n        {\r\n            if (firstCall === true)\r\n            {\r\n                \r\n                this.relationTree = this.queryTree;\r\n            \r\n                this.ruleKey = \"from\";\r\n                this.elementUri = this.relationTree[this.relationOrderIndex].uri.value;\r\n                this.relation = {uri:{value: null}};\r\n                return this.ruleController.commonRuleSelection(this.relationTree[this.relationOrderIndex], true,this.ontoController.getOntoModel());\r\n            }\r\n            alert(\"Transformation is comlete!!!\");\r\n            return {buttons: [], title: \"The End\", type: \"end\"};\r\n        }\r\n\r\n        \r\n\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n           \r\n            //return this.nextElement(\"Relator\",this.relation.uri.value,\"BRelation\",\"from\");\r\n            const question = relation.label.value.charAt(0).toUpperCase() + relation.label.value.slice(1) + \" was typed as a Relator.\"\r\n            return this.createButtons(\"Relator\",question,this.delUri(relation.type.value),false,relation.label.value);\r\n        }\r\n        else\r\n        {\r\n            //this.elUri = relation.uri.value;\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question =this.getQuestion(relation.label.value, \"bRelation\");\r\n\r\n            return this.createButtons(this.rulesJson.bRelationRules, question,this.delUri(relation.type.value), false, relation.label.value);            \r\n        }\r\n    }\r\n\r\n\r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n      \r\n        let relationRules; \r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n         \r\n           return this.relationWasSelected(selectedType, elName);\r\n        }\r\n        else if (puroType === \"needFather\") \r\n        {\r\n            if (selectedType.toLowerCase() === \"none\")\r\n            {\r\n                this.selectedEl[\"foundFather\"] = selectedType.toLowerCase();\r\n            }\r\n            else\r\n            {\r\n                this.selectedEl[\"foundFather\"] = this.ontoController.getElementByProperty(\"label\",selectedType);\r\n            }\r\n\r\n            return  this.consistencyCheck(); \r\n        }\r\n        else \r\n        {\r\n            \r\n            let relationEl; \r\n            let additionalRule = []; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            \r\n            if (puroType.includes(\"ontoRelation-save-bRelation\") || puroType.includes(\"material\") )\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"to\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"material\")\r\n                    {\r\n                       // select type \r\n                       // alert(selectedType)\r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                    relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                  \r\n                }\r\n\r\n                if (this.lastElInBranch === \"cPhase-next\")\r\n                {\r\n                   \r\n                    return this.cPhaseHandle();\r\n                }\r\n                else\r\n                {\r\n                    if (Object.keys(this.elSettings).length === 0 && this.lastElInBranch === \"cPhase\")\r\n                    {\r\n                        const updateCardinality = this.updateRelationTypes();\r\n                        if (updateCardinality !== false)\r\n                        {\r\n                            return updateCardinality; \r\n                        } \r\n                        else\r\n                        {\r\n                            return this.cPhaseHandle(); \r\n                        }\r\n\r\n                    }\r\n                    selectedType = this.elSettings.selectedType;\r\n                    puroType = this.elSettings.puroType;\r\n                    elName = this.elSettings.elName;\r\n                    relationEl = this.elSettings.relationEl;\r\n                    additionalRule = this.elSettings.additionalRule; \r\n                    nameWasChange = this.elSettings.nameWasChange;\r\n                }\r\n\r\n            }\r\n            if (!Array.isArray(selectedType) && selectedType.toLowerCase() === \"none\")\r\n            {  \r\n                this.elSettings.selectedType = selectedType; \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                this.additionalRule.key = \"stop\"; \r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n            \r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                this.consistencyExeption.push({uri: this.elementUri, ontoType:selectedType, type: puroType});\r\n            \r\n                return this.consistencyCheck(); \r\n            }\r\n            \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {\r\n            //addRUleAsync\r\n\r\n            \r\n               if ((this.additionalRule.key!== \"stop\" && this.additionalRule.key === undefined && (this.additionalRule.index > 1 || this.ontoController.getOntoBranch(this.relation.uri.value,this.ruleKey, this.relationRuleIndex).length === 0)) && this.relation.uri.value !== null)\r\n               {\r\n\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),selectedType, 1)\r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        this.additionalRule.index = 2; \r\n                        this.additionalRule.rule =  this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree));\r\n                        this.additionalRule.key = selectedType;\r\n                    }\r\n               } \r\n               else if (this.additionalRule.index > 1 && this.additionalRule.key !== \"stop\")\r\n               {\r\n                 additionalRule = this.ruleController.getAdditionalRule(this.additionalRule.rule, selectedType, this.additionalRule.index);\r\n                 if (additionalRule.length > 0)\r\n                 {\r\n                    this.additionalRule.index ++; \r\n                 }\r\n                 else\r\n                 {\r\n                    this.additionalRule.key = \"last\";\r\n                 }\r\n\r\n               }\r\n               \r\n               const el = this.getElementByUri(this.elementUri);\r\n               const isElInstance = el !== false && el.father.length > 0 ? this.isElementInstace(this.getElementByUri(el.father[0])): false ; \r\n               relationEl = this.ontoController.getRelationElements(elName,el , this.elementUri,this.relation.uri.value, additionalRule.length, additionalRule.length === 0, puroType, isElInstance, this.ruleKey, nameWasChange,this.relationRuleIndex);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\", elUri: this.elementUri};\r\n            \r\n               \r\n            \r\n               if ((relationEl === this.relation.uri.value) || this.lastElInBranch === \"cPhase\")\r\n               {\r\n                 const updateRelTypes = this.updateRelationTypes(); \r\n\r\n                if (updateRelTypes !== false)\r\n                {\r\n                    this.lastElInBranch += \"-next\"; \r\n                    return updateRelTypes;\r\n                }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"connect\" // rovná čára mezi elementy \r\n                \r\n\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey, undefined,undefined,undefined,undefined,this.elementUri);\r\n            }\r\n            else \r\n            {\r\n             \r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n              \r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n               \r\n                    elRelTypes = selectedType;\r\n                }\r\n              \r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n                this.elementUri = this.elSettings.elUri;\r\n               \r\n            } \r\n            relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n         \r\n            if (relationRules !== true)\r\n            {\r\n                //vrácení otázky v případě true relation ulož -> může se pokračovat\r\n                return Promise.resolve(relationRules); \r\n            }\r\n            \r\n            if (this.valuationArr !== null)\r\n            {\r\n                //koks\r\n                if (this.valuationArr.length > 0)\r\n                {   \r\n\r\n                    return this.handleValuation();\r\n                \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                   \r\n                    if (this.ruleKey === \"to\" && this.relation.to.length === this.relationRuleIndex)\r\n                    {\r\n                        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value); \r\n\r\n                        if (this.updateRelationTypes() === false && ontoRel.from.length === ontoRel.to.length)\r\n                        {\r\n                            return this.cPhaseHandle();\r\n                        }\r\n                        else\r\n                        {\r\n                            const lastEl = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                            this.ontoController.updateOntoModel(this.relation.uri.value,\"to\",lastEl);\r\n    \r\n                            this.elementUri = lastEl; \r\n                            this.lastElInBranch = \"cPhase\";\r\n    \r\n                            return this.updateRelationTypes();\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            } \r\n            //Přidání do ontomodelu \r\n            const purType = this.selectedEl === false || !(\"type\" in this.selectedEl) ? false : this.delUri(this.selectedEl.type.value);\r\n\r\n            let origUri = undefined; \r\n            if (this.relationTree[this.relationTree.length - 1].uri.value === this.elementUri)\r\n            {\r\n               const ontoEl = this.ontoController.getOntoElement(this.elementUri); \r\n               if (ontoEl === false)\r\n               {\r\n                 origUri = \"first\"\r\n               }    \r\n            }\r\n\r\n            //add element into onto model \r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            purType,this.relation.uri.value,this.ruleKey,elName, nameWasChange, this.ontoUri, this.relationRuleIndex, origUri);\r\n          \r\n            \r\n           \r\n            //zjištění dodatečných pravide \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();\r\n                \r\n                console.log(this.selectedEl)\r\n                this.elementUri = this.selectedEl === false || Array.isArray(this.selectedEl) ? \"\" : this.selectedEl.uri.value; \r\n                \r\n                this.selectedEl = this.elementUri === \"\" ? false : this.selectedEl; \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,additionalRule,this.isElementInstace(this.getElementByUri(this.elementUri)), this.relation.label.value);\r\n            }\r\n            else if (this.additionalRule.key === \"last\")\r\n            {   \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    //this.elSettings.selectedType = \"none\"\r\n                    return updateCardinality; \r\n                } \r\n                else\r\n                {\r\n                   \r\n                    this.additionalRule.key = \"stop\";\r\n                    return this.consistencyCheck(); \r\n                }\r\n            }\r\n            else\r\n            {\r\n                \r\n                this.additionalRule.key = \"stop\"; \r\n                \r\n\r\n                // přiřazení typu neurčeným elementům \r\n\r\n                    if (this.relation.uri.value !== null && this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0)\r\n                    {\r\n                        const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                    }\r\n            \r\n                    return this.consistencyCheck();\r\n                    \r\n                \r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n    cPhaseHandle ()\r\n    {\r\n        if (this.relation[this.ruleKey].length <= this.relationRuleIndex)\r\n        {\r\n            this.relationOrderIndex ++;\r\n            this.setIndexexToDefault();\r\n            return this.getDefault();\r\n        } \r\n        else\r\n        {\r\n            return this.nextTreeBranch(); \r\n        }\r\n    }\r\n\r\n    consistencyCheck ()\r\n    {\r\n       \r\n        let next = this.selectedEl !== false && \"foundFather\" in this.selectedEl ? true : false;\r\n        let addNone = false;\r\n        if (this.elementsWithoutType.length === 0 || !next)\r\n        {\r\n            this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n        }     \r\n       \r\n        if ((this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length) || next)\r\n        {        \r\n           \r\n            \r\n            if (next === true && this.selectedEl[\"foundFather\"] === \"None\")\r\n            {\r\n                this.withoutTypeIndex ++; \r\n            }\r\n\r\n            const element = next ? this.selectedEl : this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);   \r\n\r\n            if (\"needToFindFather\" in element && !next)\r\n            {\r\n                const relationEls = this.ontoController.getOntoBranch(this.relation.uri.value, this.ruleKey, this.relationRuleIndex); \r\n                if (relationEls.length < 2)\r\n                {\r\n                    element[\"foundFather\"] = relationEls[0];\r\n                    next = true; \r\n                    addNone = true;\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    const labels = []; \r\n                    const question = \"To which element is \" + element.label.value + \" connected?\"; \r\n                    this.selectedEl = element; \r\n    \r\n                    for (let el of relationEls)\r\n                    {\r\n                        if (!labels.includes(el.label))\r\n                        {\r\n                            labels.push(el.label);\r\n                        }\r\n                    }\r\n                    labels.push(\"None\");\r\n    \r\n                    return this.createButtons(labels,question,\"needFather\", false, \"\")\r\n                }\r\n\r\n            }\r\n            \r\n            let commonRule = false;  \r\n            if (element !== false)\r\n            {   \r\n                this.withoutTypeIndex ++;\r\n                this.elementUri = element.uri.value;\r\n            \r\n                commonRule = this.ruleController.commonRuleSelection(element,this.getUsableFather(element),this.ruleKey,this.ontoController.getOntoModel(), next, addNone);\r\n            }\r\n\r\n            if (commonRule === undefined)\r\n            {   \r\n                alert(\"Common rule is not defined! Check rules.json\");\r\n                //window.location.reload();\r\n            }\r\n            else if (commonRule !== false)\r\n            {\r\n                this.selectedEl = {}; \r\n                \r\n                return commonRule;\r\n            }\r\n        }\r\n\r\n        let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    \r\n        if (unfinishedTypes.length > 0)\r\n        {              \r\n            for (let exeption of this.consistencyExeption)\r\n            {\r\n                for (let index in unfinishedTypes)\r\n                {\r\n                    if(exeption.uri === unfinishedTypes[index].element && unfinishedTypes[index].types.includes(exeption.ontoType) && exeption.type === unfinishedTypes[index].key)\r\n                    {\r\n                        unfinishedTypes.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n    \r\n            if ((unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"Relator\") && unfinishedTypes[0].types.includes(\"None\")) || (unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"None\") && unfinishedTypes[0].types.length === 1))\r\n            {\r\n                unfinishedTypes.splice(0, 1);  \r\n            }\r\n        }\r\n        \r\n        if (unfinishedTypes.length > 0)\r\n        {\r\n            const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n            this.elementUri = unfinishedTypes[0].element;\r\n            return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n        }\r\n        else if (this.relation.uri.value === null)\r\n        {\r\n            return this.getDefault(); \r\n        }\r\n        else\r\n        {\r\n            \r\n            if (this.relation === null)\r\n            {\r\n                this.getDefault(); \r\n            }\r\n            \r\n            if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n            {\r\n                this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n                if (this.valuationArr.length > 0)\r\n                { \r\n                   return this.handleValuation(); \r\n                }\r\n            }\r\n            \r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex && this.ruleKey !== \"from\")\r\n            {\r\n                const rel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n                if (rel.to.length < this.relationRuleIndex)\r\n                {\r\n                    const lastEl = this.ontoController.getLastElement(rel.uri,\"to\");\r\n                    this.ontoController.updateOntoModel(rel.uri, \"to\", lastEl.uri);\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n                    return this.updateRelationTypes(true); \r\n                }\r\n\r\n\r\n                this.setIndexexToDefault();\r\n                this.relationOrderIndex ++;\r\n                return this.getDefault();\r\n            } \r\n            else\r\n            {\r\n                \r\n                return this.nextTreeBranch(); \r\n            }   \r\n    \r\n        }\r\n    }\r\n\r\n    updateRelationTypes ()\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n       \r\n        if (ontoRel.to.length > 0 && ontoRel.from.length > 0)\r\n        {\r\n           \r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType.length < ontoRel.from.length)\r\n            {   \r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from[ontoRel.fromType.length],ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType.length < ontoRel.to.length) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n       /*   else if (ontoRel.ontoType === \"Relator\" && !(\"materialExists\" in ontoRel))\r\n            {\r\n                this.ontoController.addToProperty(ontoRel.uri,\"materialExists\", true); \r\n                return this.createButtons([\"yes\", \"no\"], \"is there material\",\"relator-material\",\"sda\",\"sdsad\"); \r\n            } */\r\n            else if (ontoRel.toType.length < ontoRel.to.length || ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                const ontoRelFromN = ontoRel.from.length <= ontoRel.fromType.length ? ontoRel.from.length - 1 :  ontoRel.fromType.length\r\n                const ontoRelToN = ontoRel.to.length <= ontoRel.toType.length ? ontoRel.to.length - 1 :  ontoRel.toType.length\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from[ontoRelFromN],ontoRel.to[ontoRelToN]);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n\r\n        const question = this.getQuestion(this.delUri(this.valuationArr[0].valuation),\"valuations\"); \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n      //  if (this.valuationArr.length === 0) this.valuationArr = null; \r\n\r\n        return buttons;  \r\n    }\r\n\r\n    nextTreeBranch () \r\n    {\r\n        if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n        {\r\n         \r\n            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n            // vrat dotaz na Value\r\n            if (this.valuationArr.length > 0)\r\n            {\r\n        \r\n                return this.handleValuation();\r\n            \r\n            }\r\n        }\r\n        \r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0 || (this.relationRuleIndex > 1 && this.ruleKey === \"from\"))\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        \r\n\r\n        let relationTypePromise; \r\n\r\n        //number of branches -> uprav \r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex)\r\n            {\r\n               this.ruleKey = this.ruleKey === \"from\" ? \"to\": \"from\"; \r\n               this.relationRuleIndex = 0;\r\n            }   \r\n     \r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n            this.relationRuleIndex ++; \r\n\r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        this.additionalRule.key = undefined;\r\n        this.additionalRule.index = 0; \r\n        this.consistencyExeption = [];\r\n\r\n\r\n        return new Promise(resolve => {relationTypePromise.then((results) => {\r\n            this.valuationArr = null;\r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        });});\r\n    }\r\n\r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let treeEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(treeEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                let connectElement = el.uri.value; \r\n                if (this.delUri(el.type.value) === \"BObject\" || el.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                {\r\n                    const lastTypes = this.rulesJson[\"lastTypes\"];\r\n                    let lastEl = [];\r\n                    for (let type of lastTypes)\r\n                    {\r\n                      lastEl = lastEl.concat(this.ontoController.getElementsByOntoType(type, this.relation.uri.value));\r\n                    }\r\n                    if (lastEl.length > 0) {\r\n                        connectElement = lastEl[0]; \r\n                    }\r\n                }\r\n\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: connectElement, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n\r\n        for (let index in valuations)\r\n        {\r\n            if (this.ontoController.getElementByProperty(\"origUri\",valuations[index].valuation) !== false)\r\n            {\r\n                valuations.splice(index, 1);   \r\n            }\r\n        }\r\n\r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n  \r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.toT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"to\"};\r\n        });\r\n\r\n        const  labelFromE = this.selectElementsLabel(fromE);\r\n        const labelToE = this.selectElementsLabel(toE);\r\n        \r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    selectElementsLabel(element)\r\n    {\r\n         let ontoEl = this.ontoController.getOntoElement(element);\r\n         let label; \r\n         if (ontoEl === false)\r\n         {\r\n             if (element === this.elSettings.elUri)\r\n             {\r\n                label = this.elSettings.elName === \"\" ? this.delUri(element) : this.elSettings.elName; \r\n             }\r\n             else\r\n             {\r\n                 label = this.delUri(element)\r\n             }\r\n         }\r\n         else\r\n         {\r\n            label = ontoEl.label\r\n         }\r\n\r\n\r\n         return label; \r\n    }\r\n   \r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n       \r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        \r\n \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n        \r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);\r\n            \r\n        }\r\n        else\r\n        {\r\n            return true; \r\n        }\r\n        \r\n        if (relType === \"updated\")\r\n        {\r\n            return true;\r\n        }\r\n        if (rule === false && !relationFlow.includes(\"save\"))\r\n        {\r\n            alert(\"Relation rule is not defined! Check rules.json!\"); \r\n    \r\n        }\r\n        \r\n        if (!relationFlow.includes(\"save\") && (relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1))\r\n        {\r\n           \r\n           \r\n            // Vyhod chybu, že není definované pravidlo pro dva typy!! \r\n            if (\"fromT\" in rule && \"toT\" in rule)\r\n            {\r\n                \r\n                this.elSettings.relType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.relType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, undefined, \"nazev\", \"\", \"\");\r\n\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            this.ontoController.addRelation(this.elSettings.relType, fromE, toE, undefined, \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map((ruleClass) => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           });\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};        \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) \r\n            {  \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (this.isSameCaseInsensitive(condition[index + 1],ontoType) || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    relationWasSelected (selectedType, elName) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        elName = elName === \"\" ? this.relation.label.value : elName;\r\n        //selected type do object property\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        \r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, elName);\r\n  \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            // resilts \"relationWasSelected\"\r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    handleRelatedElements (elements, origin, ruleKey, rule) \r\n    {\r\n\r\n\r\n        rule = rule === undefined ? this.rulesJson[this.relationType] : rule;\r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        // tohle do if když to poleze na next element \r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1;        \r\n        \r\n        this.debug(this.relationTree, \"tree\")\r\n    \r\n        if (origin === \"relationWasSelected\" || this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value) !== false)\r\n        {\r\n            // tady if a rozrad to dle vstupu\r\n         \r\n            const nextElement = this.getNextElement();\r\n            \r\n            // tady dopln všechny nadřazené entity aby byly updatovány na stejný relation\r\n            let additionalRule = [];\r\n            let fatherType = \"\"; \r\n            let el = false; \r\n            let bObjectChild = false;\r\n            let prevEl = false; \r\n            let lastEl = null;\r\n            if (Array.isArray(nextElement) && nextElement[1] === false)\r\n            {\r\n               \r\n                prevEl = nextElement[0]; \r\n                fatherType = nextElement[0].ontoType; \r\n                const rdfEl = this.getElementByUri(nextElement[0].uri); \r\n                \r\n                if (rdfEl !== false && rdfEl.child.length > 0)\r\n                {\r\n                    \r\n                    el = this.getElementByUri(rdfEl.child[0]);\r\n                    this.selectedEl = el;\r\n                    bObjectChild = true;\r\n                }\r\n                this.ontoController.updateOntoModel(nextElement[0].uri,\"branchIndex\",this.relationRuleIndex,false);\r\n                \r\n                if ((this.relationRuleIndex > 1 || prevEl.fromRelation.length > 0) && !this.additionalRule.index > 0)\r\n                {\r\n                    this.additionalRule.index ++; \r\n                }\r\n            \r\n            }\r\n            else\r\n            {\r\n                this.selectedEl = nextElement; \r\n        \r\n                if (this.selectedEl !== false)\r\n                {\r\n                    el = this.getElementByUri(this.selectedEl.uri.value);\r\n                    if (el.father.length > 0)\r\n                    {\r\n                      fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                      prevEl = this.ontoController.getOntoElement(el.father[0]);\r\n                    }\r\n                }\r\n\r\n            }\r\n    \r\n            if (fatherType !== \"\" && fatherType !== false)\r\n            {                \r\n                const elements = this.ontoController.getElementsFromBranch(prevEl.uri);\r\n         \r\n                let addIndex = 1; \r\n                let prevAdd = []; \r\n                for (let index in elements)\r\n                {\r\n                    let node = this.ontoController.getOntoElement(elements[index]);\r\n                    if (node.origUri === \"first\")\r\n                    {\r\n                        elements.length = parseInt(index) + parseInt(1); \r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for (let index = elements.length - 1; index >= 0; index--) {\r\n                    let element = this.ontoController.getOntoElement(elements[index])\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),element.ontoType, addIndex);\r\n                   \r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        \r\n                        prevAdd = additionalRule;\r\n                        this.additionalRule.index ++;\r\n                        addIndex = this.additionalRule.index;\r\n                    }\r\n                    else\r\n                    {   \r\n                      \r\n                        if (prevAdd.includes(element.ontoType))\r\n                        {\r\n                            additionalRule = []; \r\n                            break; \r\n                        }\r\n                        else\r\n                        {\r\n                            lastEl = element; \r\n                            this.additionalRule.key = fatherType;\r\n                            additionalRule = prevAdd; \r\n                            break; \r\n                        }\r\n\r\n                    }\r\n\r\n                    if (index === elements.length - 1)\r\n                    {\r\n                        this.additionalRule.key = fatherType;\r\n                        additionalRule = prevAdd; \r\n                    }\r\n                }\r\n       \r\n                if (additionalRule.length > 0)\r\n                {\r\n                   \r\n                    this.additionalRule.rule = this.ruleController.getSpecificRule(rule,ruleKey, this.countBTypesInTree(this.relationTree));\r\n                }\r\n   \r\n            }\r\n            \r\n            if (additionalRule.length === 0)\r\n            {\r\n                if (el === false && bObjectChild === true) \r\n                {\r\n                    return this.nextTreeBranch();\r\n                }\r\n                if (origin !== \"relationWasSelected\")\r\n                {\r\n\r\n                    //uprav vztah\r\n                    //tady uprav poslední node ve větvi! -> vlož seller\r\n                  \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n\r\n                    this.elementUri = prevEl.uri; \r\n\r\n                    this.lastElInBranch = \"cPhase\";\r\n    \r\n                    return this.updateRelationTypes(true); \r\n                    \r\n                }\r\n                else if (origin === \"relationWasSelected\" && (bObjectChild === true || prevEl !== false))\r\n                {\r\n                   // diferent branch\r\n              \r\n                   this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n                   return this.nextTreeBranch(); \r\n                }\r\n                else\r\n                {\r\n                  \r\n                    this.elementUri = this.selectedEl === false || Object.keys(this.selectedEl).length === 0 ? \"\" : this.selectedEl.uri.value; \r\n                    return this.ruleController.ruleSelection(rule,ruleKey,el,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.isElementInstace(el), this.relation.label.value,this.countBTypesInTree(this.relationTree));\r\n                }\r\n\r\n            }\r\n            else\r\n            {  \r\n                //selectUridle\r\n                if (el !== false)\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = \"\";\r\n                }\r\n                let lastLabel; \r\n                if (lastEl !== null)\r\n                {\r\n                    this.elementUri = lastEl.uri;\r\n                    lastLabel = lastEl.label;\r\n                }\r\n                else\r\n                {\r\n                    lastLabel = prevEl.label;\r\n                }\r\n\r\n                return  this.ruleController.ruleSelection(undefined,ruleKey,el,lastLabel,additionalRule,this.isElementInstace(el), this.relation.label.value);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const rule = this.rulesJson[this.relationType];\r\n            \r\n            //Zkontroluj zda element useless a jaký typ!!! \r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n\r\n            // check if\r\n            //podívej se jestli se nachází v onto modelu... \r\n            \r\n            //počítá se dle délky pole +1!!\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n        \r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.isElementInstace(this.selectedEl), this.relation.label.value));\r\n        }\r\n\r\n    }\r\n\r\n    deleteDuplicityInRelTree (dupArray)\r\n    {\r\n        let checkArr = dupArray;\r\n        for (let node of this.relationTree)\r\n        {\r\n            for (let child of dupArray)\r\n            {\r\n                if (node.uri.value === child)\r\n                {\r\n                    checkArr = checkArr.filter(e => e !== child); \r\n                }\r\n            }\r\n        }\r\n\r\n        return checkArr;\r\n    }\r\n\r\n    isInAnohterRelation (element)\r\n    {\r\n       let lastChild = null; \r\n       while (element.connect.length === 0 && element.connectFrom.length === 0 && element.child.length > 0 )\r\n       {\r\n         for (let child of element.child)\r\n         {\r\n            child = this.getElementByUri(child);\r\n\r\n            if(!this.isElementInstace(child)) \r\n            {\r\n                element = child; \r\n                break; \r\n            }\r\n            else if (element.child[element.child.length - 1] === child.uri.value && child.child.length ===  0 && this.isElementInstace(child))\r\n            {\r\n                lastChild = child; \r\n            }\r\n         }\r\n\r\n         if (lastChild !== null) \r\n         {\r\n             element = lastChild;\r\n             break; \r\n         }\r\n\r\n       }\r\n\r\n       if ((element.connectFrom.includes(this.relation.uri.value) || element.connect.includes(this.relation.uri.value)) || (element.child.length === 0 && element.connectFrom.length === 0 && element.connect.length === 0))\r\n       {\r\n           return false;\r\n       }\r\n       else\r\n       {\r\n           return true; \r\n       }\r\n    }\r\n\r\n    getElementsWithoutType (element, elWithoutType)\r\n    {\r\n        const currEl = this.getElementByUri(element.uri.value);\r\n        if (currEl.child.length > 0)\r\n        {   \r\n            \r\n            for (let child of currEl.child)\r\n            {\r\n                const childEl = this.getElementByUri(child); \r\n                if ((!this.isElementInstace(childEl) || (childEl.child.length > 1)) && this.ontoController.getOntoElement(childEl.uri.value) === false && !this.isInAnohterRelation(childEl))\r\n                { \r\n                    if (!childEl.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                    {   \r\n                        elWithoutType.push(childEl);\r\n                    }\r\n                    else\r\n                    {\r\n                       \r\n                        const checkArr = this.deleteDuplicityInRelTree(childEl.child);\r\n\r\n                        if (checkArr.length > 0)\r\n                        {\r\n                            for (let uri of checkArr)\r\n                            {\r\n                              \r\n                                const el = this.getElementByUri(uri); \r\n                                let fatherWithouType = this.getUsableFather(el); \r\n                                fatherWithouType = this.deleteDuplicityInRelTree(fatherWithouType);\r\n                                for (let i in fatherWithouType)\r\n                                {\r\n                                    fatherWithouType[i] = this.getElementByUri(fatherWithouType[i]);\r\n                                    fatherWithouType[i][\"needToFindFather\"] = true; \r\n                                }\r\n                                \r\n                                elWithoutType = elWithoutType.concat(fatherWithouType);\r\n                            }\r\n                        }\r\n\r\n                        \r\n                    }\r\n        \r\n                    elWithoutType = this.getElementsWithoutType(childEl,elWithoutType);\r\n                }\r\n\r\n            }\r\n        }\r\n        return elWithoutType; \r\n    }\r\n\r\n    checkElementsInRelationTree (tree) \r\n    {\r\n        let elementsWithoutType = [];\r\n        // let withoutType = true; \r\n        for (let element of tree)\r\n        {\r\n            //element s definovaným type   \r\n            elementsWithoutType = this.getElementsWithoutType(element, elementsWithoutType); \r\n\r\n\r\n\r\n            // withoutType = true;\r\n              /*\r\n            for (let node of ontoModel)\r\n            {\r\n                if(element.uri.value === node.uri)\r\n                {\r\n                 \r\n                    withoutType = false;\r\n                }\r\n            }\r\n          \r\n            if (withoutType === true && (!this.isElementUseless(element) || this.relation.uri.value === null) && !this.isElementInstace(element))\r\n            {\r\n                alert(element.uri.value + \" SSSSSS\")\r\n                elementsWithoutType.push(element); \r\n            }\r\n            */\r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n      \r\n        promiseArr.push(this.rdfController.getRelationBTypes(relation[key][this.relationRuleIndex]));\r\n\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][this.relationRuleIndex-1]));\r\n                    //doplnění prop u elementu\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n\r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            return result; \r\n        })\r\n   \r\n    }\r\n\r\n    \r\n    getNextElement () \r\n    {\r\n        if(this.relationIndex < 0)\r\n        {\r\n            return false; \r\n        }\r\n\r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]) && this.isElementInstace(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n        \r\n     \r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n           \r\n            if (this.relationTree[this.relationIndex] !== undefined && ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                \r\n                if (this.isRelationShareType(this.getElementByUri(this.relationTree[this.relationIndex].uri.value),this.relation.uri.value,this.relationType))\r\n                {\r\n                    const ontoElement = this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value);\r\n                    \r\n                    this.ontoController.addToProperty(ontoElement.uri, \"fromRelation\", this.relation.uri.value);\r\n                    this.ontoController.addToProperty(ontoElement.uri, \"direction\", this.ruleKey);\r\n                    \r\n                    return [ontoElement, false]; \r\n                }\r\n                else if (this.areChildrenInBranchUseless(this.relationTree[this.relationIndex]))\r\n                {\r\n                    const lastRel = ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1]; \r\n                    let lastDirection = ontoModel[index].direction[ontoModel[index].direction.length - 1]; \r\n\r\n                    // na toto pozor projdi testováním\r\n                    if (ontoModel[index].fromRelation.length > 1 && ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1] === ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 2])\r\n                    {\r\n                        lastDirection = this.getOpositeDirection(lastDirection)\r\n                    }\r\n\r\n                    \r\n                    let lastElement = this.ontoController.getLastElementUri(lastRel,lastDirection, undefined ,this.relation.uri);  \r\n                    \r\n            \r\n                    while (this.ontoController.getCardinalElement(lastElement, false) !== false)\r\n                    {\r\n                        lastElement = this.ontoController.getCardinalElement(lastElement,false);\r\n                    }\r\n                   \r\n                    lastElement = this.ontoController.getElementInRelRow(lastElement);\r\n            \r\n                    lastElement = this.ontoController.getOntoElement(lastElement);\r\n\r\n                    const allBranchBtypes = this.ontoController.getOntoBranch(lastRel, lastDirection); \r\n         \r\n                    \r\n                    for (let el of allBranchBtypes)\r\n                    {\r\n                        \r\n                        this.ontoController.addToProperty(el.uri, \"fromRelation\", this.relation.uri.value);\r\n                        this.ontoController.addToProperty(el.uri, \"direction\", this.ruleKey);\r\n                    }\r\n                    \r\n                    return [lastElement, false];  \r\n                }\r\n                else\r\n                {\r\n                    this.relationIndex --;\r\n                    index = 0;  \r\n                    \r\n                }\r\n\r\n            }\r\n            \r\n        }  \r\n    \r\n        returnEl = this.relationTree[this.relationIndex];\r\n\r\n        returnEl = returnEl === undefined ? false : returnEl;\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    isRelationShareType (el, currentRelation, direction)\r\n    {\r\n        const ontoEl = this.ontoController.getOntoElement(el.uri.value) \r\n        if (ontoEl === false || !ontoEl.fromRelation.includes(currentRelation)) return false;\r\n\r\n        direction = direction === \"from\"? \"connect\" : \"connectFrom\"; \r\n        \r\n        let result = [];\r\n\r\n        result = this.getConnectRelation(el,direction,currentRelation, result); \r\n\r\n        if (result.includes(true))\r\n        {\r\n            return true; \r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    getConnectRelation (el, direction, currentRelation, result)\r\n    {\r\n        for (let child of el.child)\r\n        {\r\n            let childEl = this.getElementByUri(child);\r\n            if (childEl[direction].includes(currentRelation))\r\n            {\r\n                result.push(true); \r\n                break; \r\n            }\r\n            else if (childEl.child.length > 0)\r\n            {\r\n              this.getConnectRelation(childEl,direction,currentRelation, result); \r\n            }\r\n        }\r\n        \r\n        return result; \r\n    }\r\n\r\n    areChildrenInBranchUseless (element)\r\n    {\r\n        if (element.childRel.includes(\"http://lod2-dev.vse.cz/ontology/puro#subTypeOf\") && this.relationTree.length > 1)\r\n        {\r\n           return false;\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        if (typeof element !== \"object\") return false;  \r\n\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\" || this.delUri(type) === \"Some_objects\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n        //tady se to může projet od začátku do konce zas tolik to nevádí :) \r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let consistencyIndex = 0; \r\n        const consistencyTree = []; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node.fromRelation.includes(relation) && node.direction[node.direction.length - 1] === ruleKey && node.branchIndex.includes(this.relationRuleIndex))\r\n            {\r\n            \r\n                consistencyTree.push(node); \r\n            }\r\n        }\r\n\r\n   \r\n       \r\n        if (consistencyTree.length === 0)\r\n        {\r\n            return consistencyTree; \r\n        }\r\n        \r\n        let elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex],this.ontoController);\r\n        //nejsem si jist druhou podmínkou ale \r\n        \r\n        consistencyIndex ++;\r\n\r\n\r\n        while (consistencyIndex < consistencyTree.length && elementTypes.length === 0)\r\n        {\r\n            \r\n            elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex], this.ontoController);\r\n            consistencyIndex ++; \r\n        }\r\n      \r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    // element ve formátu queryTree!!\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        if (typeof uri !== \"string\") return false; \r\n\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n\r\n        this.lastElInBranch = false; \r\n\r\n\r\n        this.additionalRule = {key: undefined, rule: {}, index: 1}; \r\n\r\n\r\n        this.consistencyExeption = []; \r\n        // Nový začátek \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n               \r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (typeof record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n  \r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relationRuleIndex = 0; \r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n                console.log(prop)\r\n                console.log(JSON.parse(JSON.stringify(this[prop])))\r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n    getOntoSchema ()\r\n    {\r\n        return this.ontoSchemaController.transform(this.ontoController.getOntoModel());\r\n    }\r\n\r\n    getIframeURL ()\r\n    {\r\n\r\n        return this.rulesJson[\"iframeURL\"].replace(\"MODELID\",this.modelId); \r\n    }\r\n\r\n    fullSizeSvg ()\r\n    {\r\n        let index = 0; \r\n       \r\n        for (let node of this.ontoController.getOntoModel())\r\n        {\r\n            if (node.type === \"Class\")\r\n            {\r\n                index ++; \r\n            }\r\n            \r\n            if (index === 4)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getUsableFather (element)\r\n    {\r\n        //doporučuji napojení na druhého otce\r\n        const returnArr = []; \r\n        for (let node of element.father)\r\n        {\r\n            let father = this.getElementByUri(node);\r\n            if (this.isElementInstace(father) === false) returnArr.push(father.uri.value); \r\n\r\n            while (this.isElementInstace(father))\r\n            {\r\n           \r\n                for (let fatherOfFather of father.father)\r\n                {\r\n              \r\n                    father = this.getElementByUri(fatherOfFather);\r\n                    if (this.isElementInstace(father) === false)\r\n                    {\r\n                   \r\n                        returnArr.push(father.uri.value); \r\n                    }\r\n                }\r\n\r\n                if (returnArr.length > 0) break; \r\n            }\r\n\r\n\r\n        }\r\n        element.father = returnArr; \r\n        return returnArr;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport fileDownload from 'js-file-download';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport Iframe from 'react-iframe';\n\n\n\n\n\n\n\n//import RdfController from './controllers/RdfController.js';\n//import { thisTypeAnnotation } from \"@babel/types\";\n\n//přiřadit key k talčítkům -> zamyslet se nad využitím \nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n\n    this.eventController = new EventController();\n    this.state = {\n      svg: \"\", iframeURL: this.eventController.getIframeURL(), fullSize: false \n    };\n    \n    mermaid.initialize({\n      startOnLoad: false,\n      themeCSS: '#extensionEnd { fill: white; } #extensionStart { fill: white; } ',\n    });\n  }\n\n  createGraph = (svg) => {\n\n    this.setState({ svg: svg });  \n  }\n\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"form-group col-md-6\" id=\"puroModelContainer\">\n            <label htmlFor=\"puroModel\">Puro model</label>\n            <div className=\"transformWindow border\" id=\"puroModel\">\n              <Iframe url= {this.state.iframeURL}\n                width=\"607px\"\n                height=\"307px\"\n                id=\"iframePuro\"\n                className=\"myClassname\"\n                display=\"initial\"\n                position=\"relative\"/>\n            </div>\n          </div>\n   \n          <div className=\"form-group col-md-6\" id=\"ontoModelContainer\">\n            <TransformWrapper\n              enablePadding={false}>\n              {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n                <React.Fragment>\n                  <div className=\"tools\">\n                    <label htmlFor=\"ontoModel\">Onto model</label>\n                    <button className=\"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n                  </div>\n                  <div className=\"border\">\n                    <TransformComponent>\n                      <div dangerouslySetInnerHTML={{ __html: this.state.svg }} className=\"transformWindow\" id=\"ontoModel\">\n                      </div>\n                    </TransformComponent>\n                  </div>\n                </React.Fragment>\n              )}\n            </TransformWrapper>\n          </div>\n          <QuestionPart graphCreation={this.createGraph} eventController={this.eventController} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass PuroModel extends React.Component {\n\n  // $(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\n\n\n  render() {\n    return <iframe onLoad={this.loaded} title=\"puro-model\" id=\"iframePuro\" className=\"embed-responsive-item\" src={this.props.iframeURL}></iframe>;\n  }\n\n\n}\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTransform: true, originalName: \"\", nameWasChange: false,\n      buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\", \n    };\n\n    this.eventController = this.props.eventController;\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined) {\n      event.preventDefault();\n    }\n\n    //window.addEventListener('unhandledrejection', function(event) {\n    //alert(\"Rule is not defined!\\nOnly the first answer is correct! \\nRules are not complete yet!\\nPage will be reloaded!\");\n    //window.location.reload(); \n    //});\n\n    this.eventController.getDefault(true).then(results => {\n      this.setState({ undoActive: false, svgUrl: \"\", buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false });\n    });\n\n  }\n\n  undoClick = () => {\n\n\n\n  }\n\n  handleClick = (selectedType, selectedUri, type) => {\n    let elName = this.state.elName;\n    let undo = false;\n    let setState = true;\n    let nameWasChange = this.state.nameWasChange;\n\n    elName = elName.trim();\n    elName = elName.replace(/ /g,\"_\"); \n\n    if ((elName === \"\" && this.state.changeName === true && type !== \"Undo\") && selectedType.toLowerCase() !== \"none\") {\n      alert(\"Plese write name of the element!\");\n    }\n    else if (elName !== \"\" && !elName.match(/^[A-Za-z0-9-_*<>]+$/)) {\n      alert(\"Please change the name. It contains forbidden characters!\");\n    }\n    else {\n      if (type === \"Undo\") {\n\n        const history = this.eventController.undo();\n        if (history === false) {\n          this.handleSubmit();\n          setState = false;\n        }\n        else {\n          const inputVariables = history.inputVariables;\n          selectedType = inputVariables[0];\n          selectedUri = inputVariables[1];\n          type = inputVariables[2];\n          elName = inputVariables[3];\n          nameWasChange = inputVariables[4];\n\n          undo = true;\n        }\n\n      }\n      elName = elName.replace(/\\s/g, '_');\n\n      if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName)) {\n        alert(\"Element already exists! Please choose different name.\")\n      }\n      else if (setState === true) {\n       \n        this.eventController.nextElement(selectedType, selectedUri, type, elName, nameWasChange).then(results => {\n          \n          if (undo === false) {\n            let properties = (Object.getOwnPropertyNames(this.eventController));\n            let historyRecord = {};\n            for (let prop of properties) {\n              if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\") {\n                if (typeof prop !== 'function') {\n                  historyRecord[prop] = this.assignProp(this.eventController[prop])\n                }\n              }\n            }\n            this.eventController.saveHistory(historyRecord, [selectedType, selectedUri, type, elName, this.state.nameWasChange]);\n          }\n\n          // Set graph\n          let svg = this.eventController.getGraphSvg();\n\n          this.setState({ buttons: results.buttons, type: results.type, title: results.title, undoActive: true, elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange: false });\n\n          if (svg !== false) {\n            this.createGraph(svg);\n\n\n          }\n\n          if (this.state.type.includes(\"end\")) {\n            this.handleDownloadImage();\n          }\n\n        });\n      }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object') {\n      //how to \n      return JSON.parse(JSON.stringify(prop));\n    }\n    else {\n      return prop;\n    }\n\n  }\n\n  createGraph = (chart) => {\n    const cb = svg => {\n      this.setState({ svg: svg });\n      this.props.graphCreation(svg);\n      if (this.eventController.fullSizeSvg())\n      {\n        $(\"#id1\").addClass(\"fullSize\");\n      }\n      else\n      {\n        $(\"#id1\").removeClass(\"fullSize\");\n      }\n\n    };\n\n    mermaid.render(\"id1\", chart, cb);\n  }\n\n  handleChangeName = () => {\n\n\n    this.setState({ changeName: !this.state.changeName });\n    if (this.state.changeName === true) {\n      this.setState({ elName: \"\", nameWasChange: false });\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function () {\n        $(\".changeAlert\").alert('fade');\n      });\n    }\n    else {\n      this.setState({ elName: \"\", nameWasChange: true });\n\n    }\n  }\n\n  handleDownloadImage = () => {\n    const svgBlob = new Blob([this.state.svg], { type: \"image/svg+xml;charset=utf-8\" });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({ svgUrl: svgUrl });\n\n  }\n\n  handleDownloadSchema = () => {\n    const ontoSchema = JSON.stringify(this.eventController.getOntoSchema());\n    fileDownload(ontoSchema, 'ontoSchema.json');\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid text-center questionPart\">\n\n        <button type=\"Submint\" className={this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleSubmit}>\n          Start transformation\n          </button>\n        <div className={this.state.startTransform ? \"d-none\" : \"\"}>\n          <h3 className=\"questionTitle\">{this.state.title}</h3>\n          <div className=\"optionButtons d-none d-md-block\">\n            <div className=\"btn-group-vertical text-right\">\n              <button type=\"button\" className=\"btn btn-primary btnModal\" onClick={this.handleChangeName} disabled={this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\") || this.state.type === \"nextBranchElements\" || this.state.type === \"needFather\"}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n              <button type=\"button\" className=\"btn btn-primary btnModal\" onClick={() => this.handleClick(undefined, undefined, \"Undo\")} disabled={!this.state.undoActive}>Undo</button>\n              <button type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); }}>Cancel</button>\n            </div>\n          </div>\n          <div className={this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n            <div className=\"input-group inputName\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n              </div>\n              <input placeholder={this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.originalName} type=\"text\" className=\"form-control\" onChange={this.handleChange} value={this.state.elName}></input>\n            </div>\n            <h5 className={this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>\n          </div>\n          <div className=\"divButtons text-center\">\n            <TypeButtons buttons={this.state.buttons} title = {this.state.title} onClickDownloadSchema={this.handleDownloadSchema} svgUrl={this.state.svgUrl} onClick={this.handleClick} type={this.state.type} elNames={this.state.changeName} originalName={this.state.originalName} />\n          </div>\n          <div className=\"alert alert-success col-md-6 mx-auto changeAlert\" role=\"alert\">\n            Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass TypeButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\")) {\n      return (\n        <div className=\"row col-md-5 mx-auto\" key = {Math.random().toString(16).slice(2)}>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>\n          <select ref=\"relFrom\" className=\"col-md-6 mx-auto form-control cardinalitySelect\" >\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"from\";\n            }).map((rel, index) => {\n              return <option key = {index}  value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <select ref=\"relTo\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val, index) => {\n              return val.direction === \"to\";\n            }).map((rel, index) => {\n              return <option key = {index} value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <button className=\"btn btn-success mx-auto questionPart\" onClick={() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button>\n        </div>\n      )\n    }\n    else if (this.props.type.includes(\"end\")) {\n      return (\n        <div className=\"col-md-8 mx-auto\">\n          <a className=\"btn btn-success btnEnd\" href={this.props.svgUrl} download=\"ontoUml-graph.svg\">Download Onto-UML graph</a>\n          <button type=\"button\" className=\"btn btn-success btnEnd\" onClick={() => this.props.onClickDownloadSchema()}>Download Onto-Schema</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"row col-md-6 mx-auto\">\n          {this.props.buttons.map((value, index) => {\n            return <div className=\"col-md-4 mx-auto\" key = {index}>\n              <button key={this.props.uri} type=\"button\" className={value.name.toLowerCase() === \"none\" ? \" btn btn-secondary btnModal\" : \"btn btn-success btnModal\"} onClick={() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || \n              this.props.title.split(\" \").includes(value.name) || (this.props.originalName === \"\" && this.props.buttons.length === 1) || (value.name.toLowerCase() === \"relator\" && this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n            </div>\n          })}\n        </div>\n      )\n    }\n\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return [<Layout />]\n\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}