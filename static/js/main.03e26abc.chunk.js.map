{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.*$","../node_modules/@trust/webcrypto/src/algorithms sync","../node_modules/rdfstore/node_modules/n3/lib sync /^/N3.*$","controllers/MainController.js","controllers/RdfController.js","controllers/OntoModelController.js","controllers/ImageController.js","controllers/RuleController.js","controllers/HistoryController.js","controllers/OntoSchemaController.js","controllers/EventController.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","MainController","jsonData","ontologyURL","ontoUri","$","ajax","type","url","async","cache","dataType","success","json","this","rulesJson","JSON","parse","stringify","windowUrl","URL","window","location","href","modelId","searchParams","get","buttons","title","elName","origName","mapButtons","Array","isArray","buttonType","name","Promise","originalName","labelEL","key","questions","q","replace","label","question","unfinishedType","rule","console","log","qType","elLabel","preposition","isSameCaseInsensitive","tree","index","node","delUri","value","fatherTypeRelation","includes","uri","result","split","element","push","object","find","text","other","localeCompare","undefined","sensitivity","direction","RdfController","puro","rdf","require","modelURL","xml","puroXML","error","jqXHR","textStatus","errorThrown","alert","relator","fromUri","query","sparqlQuery","deleteDuplicity","fatherElement","returnArr","endCall","elementsUri","length","i","findBTypeRelation","bind","findBTypeChild","forEach","father","fatherType","recursiveFindChild","lastResult","deleteDuplicityInFinal","elements","j","property","filter","concat","splice","bTypeTree","lastCall","final","sparql","callback","turtle","XMLSerializer","serializeToString","store","graph","serialize","err","str","create","load","results","execute","relationUri","elementUri","properties","duplicity","checkArr","res","k","some","OntoModelController","addToOntoModel","ontoType","puroType","relationName","nameWasChange","branchIndex","origUri","elPuroType","elUri","getOntoElement","ontoModel","fromRelation","from","to","updateOntoModel","addRelation","fromType","toType","slice","el","getOntoModel","getElementsRelation","nextRel","getElementOntoType","getElementsByOntoType","origin","changeOrigin","getLastElementUri","getLastElement","getFatherOntoType","getRelationElements","selectedUri","addRulesLenght","lastEl","isElInstance","ruleKey","branchesCount","passEl","ontoEl","elementFather","foundFather","lastRelElement","getElementInRelRow","lastElUri","isRelationExist","getOntoBranch","relation","superType","toLowerCase","isRelationComplete","relatedElement","relElements","getElementInRelation","fatherChildren","rels","types","rel","indexOf","getCardinalElement","relationType","all","getOpositeDirection","el1","el2","selectedEl","firstEl","createButtons","ontoModelHistory","ImagController","graphCommand","findLabel","relationSpec","getRelationSpec","base","toKey","trim","relations","normRelType","showType","RuleController","ruleSelection","rules","previousElName","queryTree","relationLabel","offerTypes","needElName","getSpecificRule","offer","additionalQuestion","connect","getQuestion","isElementInstace","elementConsistencyRules","ontoController","check","elTypes","getRelatedTypes","subType","elementConsistencySelection","moreThanOneRule","minCount","maxCount","allTypes","suffix","additionalRules","r","addRule","elementConsAddSelection","mincCountount","moreThanOne","bTypeNumber","addRules","getAdditionalRule","selectedType","toString","commonRuleSelection","fathers","start","fatheFound","addNone","fatherOnto","childPuroType","childType","child","commonRules","elInRelation","childrenCount","indexCount","isNaN","HistoryController","propertiesHistory","inputVariables","rec","pop","lastProp","OntoScheController","ontoUmlSchema","schemaInit","relCount","ontoClassTransformation","opositeIndex","fromIndex","toIndex","relationTransformation","nodeCopy","nodeCopy2","schemas","compile","getSchema","ONTOUML_2","validator","ontoClass","parseInt","EventController","rdfController","imageController","ImageController","ruleController","historyController","ontoSchemaController","OntoSchmeController","getFullPath","then","getRelations","elSettings","relationOrderIndex","relationIndex","setIndexexToDefault","firstCall","relationTree","valuation","charAt","toUpperCase","bRelationRules","changeElementsProperty","relationWasSelected","getElementByProperty","consistencyCheck","additionalRule","relFlow","lastElInBranch","relationRuleIndex","getDefault","nextTreeBranch","relationEl","ontoRelation","updateCardinality","updateRelationTypes","consistencyExeption","countBTypesInTree","getElementByUri","relType","updateRelTypes","elRelTypes","relationRules","getRelationRules","valuationArr","handleValuation","purType","getNextElement","next","elementsWithoutType","checkElementsInRelationTree","withoutTypeIndex","relationEls","labels","commonRule","getUsableFather","unfinishedTypes","checkElementsConsistency","exeption","createQuestion","getAllTreeValuations","ontoRel","createRelCardinalityBtn","ontoRelFromN","ontoRelToN","shift","relationTypePromise","relationTreeIndex","relationTreeArr","getRelatedElements","handleRelatedElements","valuations","treeEl","connectElement","lastTypes","createGraph","fromE","toE","relationFlow","fromB","fromT","ruleClass","toB","toT","labelFromE","selectElementsLabel","labelToE","relOntoType","fromEType","toEType","findRule","condition","validity","relationTreePromise","lastLabel","nextElement","bObjectChild","prevEl","rdfEl","getElementsFromBranch","addIndex","prevAdd","dupArray","elWithoutType","currEl","childEl","deleteDuplicityInRelTree","fatherWithouType","getElementsWithoutType","elementConsitencyTree","elementConsistencyIndex","promiseArr","getRelationBTypes","unshift","returnEl","isElementUseless","areChildrenInBranchUseless","lastRel","lastDirection","lastElement","allBranchBtypes","addToProperty","childRel","consistencyIndex","consistencyTree","elementTypes","connectFrom","checkDuplicity","ruleIndex","record","initRec","init","saveRecords","history","undo","reset","prop","transform","fatherOfFather","Layout","props","svg","setState","eventController","state","iframeURL","getIframeURL","fullSize","mermaid","initialize","startOnLoad","themeCSS","className","htmlFor","width","height","display","position","enablePadding","zoomIn","zoomOut","resetTransform","Fragment","onClick","dangerouslySetInnerHTML","__html","graphCreation","React","Component","QuestionPart","handleChange","event","target","handleSubmit","preventDefault","undoActive","svgUrl","startTransform","undoClick","handleClick","changeName","match","getOwnPropertyNames","historyRecord","assignProp","saveHistory","getGraphSvg","handleDownloadImage","chart","render","fullSizeSvg","addClass","removeClass","handleChangeName","fadeTo","slideUp","svgBlob","Blob","createObjectURL","handleDownloadSchema","ontoSchema","getOntoSchema","fileDownload","data-toggle","data-target","disabled","data-dismiss","confirm","reload","placeholder","onChange","lenght","onClickDownloadSchema","elNames","class","role","TypeButtons","refs","createRef","ref","val","relFrom","relTo","download","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.03e26abc.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 305,\n\t\"./locale.js\": 305\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 659;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 795;","var map = {\n\t\"./N3Lexer\": 197,\n\t\"./N3Lexer.js\": 197,\n\t\"./N3Parser\": 198,\n\t\"./N3Parser.js\": 198,\n\t\"./N3Store\": 360,\n\t\"./N3Store.js\": 360,\n\t\"./N3StreamParser\": 361,\n\t\"./N3StreamParser.js\": 361,\n\t\"./N3StreamWriter\": 362,\n\t\"./N3StreamWriter.js\": 362,\n\t\"./N3Util\": 199,\n\t\"./N3Util.js\": 199,\n\t\"./N3Writer\": 200,\n\t\"./N3Writer.js\": 200\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 823;","import $ from 'jquery';\r\nexport default class MainController{\r\n    \r\n    \r\n    ontologyURL  = \"http://lod2-dev.vse.cz/ontology/puro#\"; \r\n    ontoUri = \"http://lod2-dev.vse.cz/data/ontomodels#\"\r\n\r\n    constructor()\r\n    {\r\n        \r\n        let jsonData;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \"rules.json\",\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function(json) {\r\n                jsonData = json;\r\n            }\r\n        });\r\n        \r\n        this.rulesJson = JSON.parse(JSON.stringify(jsonData)); \r\n        const windowUrl = new URL(window.location.href);\r\n        this.modelId = windowUrl.searchParams.get(\"model\");\r\n    }\r\n    // orgin lze držet jako property objektu \r\n    // uri lze držet v property objektu \r\n    createButtons (buttons, title, type, elName, origName = \"\") \r\n    {\r\n        \r\n        \r\n        //\"uri\": unfinishedTypes[0].element\r\n        buttons = !Array.isArray(buttons)? [buttons] : buttons;\r\n        const mapButtons = buttons.map(buttonType => {\r\n            return {name: buttonType};\r\n        });\r\n        return Promise.resolve({buttons: mapButtons, title: title, type: type, elName: elName, originalName: origName}); \r\n    }\r\n\r\n    getQuestion(labelEL, key)\r\n    {\r\n\r\n        for (let q of this.rulesJson.questions)\r\n        {\r\n            \r\n            if (q.type === key)\r\n            {\r\n                const replace = typeof labelEL === \"string\" ? labelEL : labelEL.label; \r\n                return q.question.replace(\"VAL\", replace); \r\n            }\r\n        }\r\n    }\r\n\r\n    createQuestion (unfinishedType, questions) \r\n    {\r\n        let question = \"\";\r\n        if (\"question\" in unfinishedType.rule)\r\n        {\r\n            for (let q of questions)\r\n            {\r\n                \r\n                if (q.type === unfinishedType.rule.question)\r\n                {\r\n                    question = q.question;\r\n                    break;\r\n                    \r\n                }\r\n            }\r\n            console.log(unfinishedType)\r\n            question = (question === \"\") ? unfinishedType.rule.question : question; \r\n            let qType = (unfinishedType.key in unfinishedType.rule) ? unfinishedType.rule[unfinishedType.key][0] : unfinishedType.rule.type[0];\r\n            return question.replace(\"VAL\", unfinishedType.elLabel).replace(\"TYPE\",qType); \r\n        }\r\n        else\r\n        {\r\n            const preposition = this.isSameCaseInsensitive(unfinishedType.key, \"connect\") ? \" to \" : \" of \";\r\n            return \"What is \" + unfinishedType.key + preposition + unfinishedType.elLabel +\"?\";\r\n        }\r\n\r\n    }\r\n\r\n    countBTypesInTree(tree)\r\n    {\r\n        let index = 0; \r\n        for (let node of tree)\r\n        {\r\n            if (this.delUri(node.type.value) === \"BType\" && !node.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n            {\r\n                index ++; \r\n            }\r\n        }\r\n\r\n        return index; \r\n    }\r\n   \r\n   \r\n    delUri (uri) \r\n    {\r\n        var result = []; \r\n        if (typeof uri === 'string')\r\n        {\r\n            return uri.split('#')[1];\r\n        }\r\n        else if (Array.isArray(uri))\r\n        {\r\n            for(let element of uri)\r\n            {\r\n                result.push(element.split('#')[1]);\r\n            }\r\n            return result; \r\n        }\r\n        else\r\n        {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n     getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n      }\r\n\r\n    isSameCaseInsensitive(text, other) {\r\n        return text.localeCompare(other, undefined, { sensitivity: 'base' }) === 0;\r\n    }\r\n\r\n    getOpositeDirection (direction)\r\n    {\r\n        return  direction = direction === \"from\" ? \"to\" : \"from\"; \r\n    }\r\n\r\n\r\n}","import $ from 'jquery';\r\nimport MainController from './MainController';\r\n\r\n\r\nexport default class RdfController extends MainController {\r\n    \r\n    constructor() {\r\n        super(); \r\n        this.rdf = require('rdflib');\r\n        let puro ;\r\n        \r\n        const modelURL = this.rulesJson[\"modelURL\"].replace(\"MODELID\", this.modelId)\r\n        // puroOutput.xml\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url:   modelURL,\r\n            async: false,\r\n            cache: false,\r\n            dataType: \"xml\",\r\n            success: function(xml) {\r\n          \r\n                this.puroXML = xml;\r\n                console.log(this.puroXML)\r\n                puro = xml; \r\n            },\r\n            error: function (jqXHR, textStatus, errorThrown) {\r\n             alert(\"There is the problem to load serialized PURO model! \\n\" + errorThrown ); \r\n             //window.location.replace(document.referrer); \r\n            }\r\n        });\r\n        \r\n        this.puroXML = puro; \r\n     \r\n    }\r\n\r\n\r\n    getRelatorBtype  (relator, fromUri) \r\n    {\r\n            const query = `\r\n            PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            SELECT ?element ?valuation ?elementLabel ?type ?father ?fatherLabel ?elementType ?fatherType WHERE \r\n            {\r\n                {<`+relator+`> puro:linkedTo ?element . <`+fromUri+`> puro:linkedTo <`+relator+`>} \r\n                UNION\r\n                {?element puro:linkedTo <`+relator+`> . <`+relator+`> puro:linkedTo <`+fromUri+`>}    \r\n                {?element a puro:BObject}\r\n                UNION\r\n                {?element a puro:BType}\r\n                ?element rdfs:label ?elementLabel .\r\n                ?element a ?elementType .  \r\n                OPTIONAL {?element puro:instanceOf ?father}\r\n                OPTIONAL {?father rdfs:label ?fatherLabel}\r\n                OPTIONAL {?father a ?fatherType}\r\n                OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n               \r\n               \r\n            }`\r\n\r\n            return new Promise(resolve => {\r\n                this.sparqlQuery(query, function callback(result) {\r\n                     result = this.deleteDuplicity(result, [\"valuation\"])\r\n                    result[\"relationName\"] = relator; \r\n                    resolve(result);\r\n                  }); \r\n           });\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findBTypeRelation (fatherElement, returnArr,endCall)  \r\n    {       \r\n\r\n            const elementsUri = fatherElement.uri.value;\r\n            const query = `\r\n             PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n             PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n             SELECT ?uri ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n             {\r\n                 {<` +elementsUri+`> puro:instanceOf ?uri }\r\n                 UNION\r\n                 {<` +elementsUri+`> puro:subTypeOf  ?uri }\r\n                 ?uri a ?type . \r\n                 ?uri rdfs:label ?label .         \r\n             }`;\r\n            this.sparqlQuery(query, function callback(result) {  \r\n                \r\n                console.log(JSON.parse(JSON.stringify(result)));\r\n                result = this.deleteDuplicity(result, [\"connect\", \"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\"]);\r\n        \r\n                if (result.length > 0)\r\n                {\r\n                    // otestovat jak funguje v případě dvou \r\n                    \r\n                    for (let i in result) {\r\n                        returnArr.push(result[i]);\r\n                        this.findBTypeRelation(result[i],returnArr,endCall);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    //POZOR MUZE BYT CHYB kvuli opakovani\r\n                    endCall(returnArr);\r\n                    return returnArr;\r\n                }\r\n            }.bind(this));          \r\n         }\r\n\r\n\r\n\r\n    findBTypeChild  (fatherElement, returnArr,endCall) \r\n        {\r\n                const elementsUri = fatherElement.uri.value;\r\n                \r\n                const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?valuationLabel ?label ?father ?fatherType ?type ?fatherTypeRelation ?connect ?connectFrom ?child ?childType ?childRel WHERE \r\n                 {\r\n                     {?uri puro:instanceOf <` +elementsUri+`>}\r\n                     UNION\r\n                     {?uri puro:subTypeOf <` +elementsUri+`>}\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri}}\r\n                     OPTIONAL {?child a ?childType}\r\n                     OPTIONAL {{?child ?childRel ?uri} UNION {?child ?childRel ?uri}}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     ?uri ?fatherTypeRelation <` +elementsUri+`> .\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a ?type . \r\n                     <` +elementsUri+`> a ?fatherType\r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?connectFrom puro:linkedTo ?uri. ?connectFrom a puro:BRelaion}\r\n                     BIND ( <`+elementsUri+`>  AS ?father)\r\n                 }`;\r\n                this.sparqlQuery(query, result => {  \r\n                    \r\n                    result = this.deleteDuplicity(result, [\"connect\",\"connectFrom\", \"father\", \"fatherType\",\"fatherTypeRelation\",\"child\",\"childType\",\"childRel\",\"valuation\"]);\r\n                \r\n                    if (result.length > 0)\r\n                    {\r\n                        for (let i in result) {\r\n                            returnArr.push(result[i]);\r\n                            this.findBTypeChild(result[i],returnArr,endCall);\r\n                        }\r\n                    }\r\n                    else\r\n                    { \r\n                      \r\n                        endCall(returnArr);\r\n                        return returnArr;\r\n                    }\r\n                });          \r\n             }\r\n\r\n             getFullPath ()  \r\n             {\r\n                 const query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT ?uri ?valuation ?label ?type ?connect ?child ?fatherType ?father ?fatherTypeRelation ?childType ?childRel WHERE \r\n                 {\r\n                     ?uri rdfs:label ?label .\r\n                     ?uri a puro:BType . \r\n                     ?uri a ?type\r\n                     OPTIONAL {{?child puro:instanceOf ?uri} UNION {?child puro:subTypeOf ?uri} ?child a ?childType . ?child ?childRel ?uri . } \r\n                     OPTIONAL {?uri puro:linkedTo ?connect. ?connect a puro:BRelation}\r\n                     OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                     FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                     FILTER NOT EXISTS {?uri puro:instanceOf ?object}\r\n                 }`;\r\n                 return new Promise(resolve => {\r\n                  \r\n                  // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                  this.sparqlQuery(query, result => {\r\n                      result.forEach(function(node) {\r\n                            \r\n                            node.father = [];\r\n                            node.fatherType = [];\r\n                            node.fatherTypeRelation = [];\r\n                            // tady to nastav ve SPARQ \r\n                            node[\"connectFrom\"] = [];\r\n                    });\r\n                  \r\n                      this.deleteDuplicity(result,[\"valuation\", \"connect\", \"childType\", \"child\", \"childRel\"]);\r\n                      this.recursiveFindChild(0,result,[], lastResult => {\r\n                             lastResult = this.deleteDuplicityInFinal(lastResult);\r\n                             resolve(lastResult);\r\n                     });\r\n                 });\r\n             });\r\n             }\r\n\r\n             deleteDuplicityInFinal (elements)\r\n             {\r\n                for (let i = 0; i < elements.length; i++) {\r\n                    for (let j = 0; j < elements.length; j++) {\r\n                        if (elements[i].uri.value === elements[j].uri.value && i !== j)\r\n                        {\r\n                            for (let property in elements[i])\r\n                            {\r\n                                if (Array.isArray(elements[i][property]))\r\n                                {\r\n                                   //raassss\r\n                                   elements[j][property] = elements[j][property].filter(e => e !== elements[i][property]); \r\n                                   elements[i][property] = elements[i][property].concat(elements[j][property]); \r\n                                }\r\n                            }\r\n\r\n                            elements.splice(j, 1);\r\n                        }            \r\n                    }   \r\n                }\r\n\r\n                return elements; \r\n             }\r\n\r\n             recursiveFindChild (i, result, bTypeTree,lastCall, type)\r\n             {      \r\n                 //last change \r\n                 if(i >= result.length)\r\n                 {\r\n                     lastCall(bTypeTree);\r\n                     return bTypeTree;\r\n                 }\r\n                 else {\r\n                     bTypeTree.push(result[i]);\r\n                     if (type === \"relation\")\r\n                     {\r\n                        this.findBTypeRelation(result[i],bTypeTree, final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, \"relation\");    \r\n                        });\r\n                     }\r\n                     else\r\n                     {\r\n                        this.findBTypeChild(result[i],bTypeTree,  final => {\r\n                            i++;\r\n                            this.recursiveFindChild(i++, result, bTypeTree,lastCall, type);    \r\n                        });\r\n                     }\r\n\r\n                 }\r\n    \r\n             }\r\n\r\n             sparqlQuery (sparql, callback)  {\r\n                const puroXML = new XMLSerializer().serializeToString(this.puroXML);\r\n               \r\n                const store = this.rdf.graph();\r\n                const contentType = 'application/rdf+xml';\r\n                const baseUrl = \"http://lod2-dev.vse.cz/\";\r\n                \r\n                this.rdf.parse(puroXML, store, baseUrl, contentType); \r\n        \r\n                var turtle;\r\n                 this.rdf.serialize(undefined, store, \"http://www.w3sds.org/1999/02/22-rdf-syntax-ns#type\", 'text/turtle', function(err, str){\r\n                    turtle = str;\r\n                })\r\n        \r\n                const rdfstore = require('rdfstore');\r\n                rdfstore.create( function(err, store) {\r\n                     store.load(\"text/turtle\", turtle, function(err, results) {\r\n                        store.execute(sparql,\r\n                          function(err, results) {\r\n                          callback(results);\r\n                            \r\n                        });\r\n                    });\r\n                });\r\n                 \r\n            }; \r\n\r\n\r\n     \r\n            //from nebo to poslat si ukazatel? \r\n            getRelationBTypes (relationUri) \r\n            {\r\n                let query = `\r\n                 PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                 PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                 SELECT  ?uri ?type ?label  WHERE \r\n                 {\r\n                     {<`+relationUri+`> puro:instanceOf ?uri}\r\n                     UNION\r\n                     {<`+relationUri+`> puro:subTypeOf ?uri}\r\n                     ?uri a ?type .\r\n                     ?uri rdfs:label ?label\r\n                 }`; \r\n\r\n                 return new Promise(resolve => {\r\n                    // instance může mít mnohem více dětí!!!! zaměř se na to a dej si na to pozor!!!\r\n                    this.sparqlQuery(query, (result) => {\r\n                        \r\n                        // result.push({uri: {token:\"uri\", value: relationUri}});\r\n                        console.log(result);\r\n                        this.recursiveFindChild(0,result,[], function lastCall(lastResult){\r\n                               resolve(lastResult);\r\n                       },\"relation\");\r\n                   });\r\n                });\r\n\r\n\r\n            }\r\n\r\n            //začátek hlavního\r\n            getRelations  () \r\n            {\r\n                // ještě by to chtělo sjednotit do pole \r\n                const query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation} \r\n                  FILTER NOT EXISTS{?to a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?from a puro:BAttribute}\r\n                  FILTER NOT EXISTS{?to a puro:BValuation}\r\n                  FILTER NOT EXISTS{?from a puro:BValuation}\r\n                  ?to a ?toType . \r\n                  ?from a ?fromType .\r\n                }`;\r\n\r\n                /*\r\n                                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?valuation ?from ?to ?toType ?fromType ?label ?type  WHERE \r\n                {\r\n                  ?uri a puro:BRelation . \r\n                  ?from puro:linkedTo ?uri .\r\n                  ?uri puro:linkedTo ?to .\r\n                  ?uri rdfs:label ?label . \r\n                  ?uri a ?type .\r\n                  OPTIONAL {?uri puro:linkedTo ?valuation. ?valuation a puro:BValuation}\r\n                  {?from a puro:BObject}\r\n                  UNION \r\n                  {?from a puro:BType}\r\n                  {?to a puro:BObject}\r\n                  UNION\r\n                  {?to a puro:BType}   \r\n                  ?to a ?toType . \r\n                  ?from a ?fromType . \r\n                }`; */\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        result = this.deleteDuplicity(result,[ \"from\", \"to\", \"toType\", \"fromType\", \"valuation\"]);\r\n                        console.log(result)\r\n                        resolve(result);\r\n                    }.bind(this));\r\n                  }); \r\n            }\r\n\r\n            findRelation  (elementUri) {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label  WHERE \r\n                {\r\n                  <`+elementUri+`> puro:linkedTo ?uri . \r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  }); \r\n\r\n            }\r\n\r\n            async firstFind  ()  {\r\n                var query = `\r\n                PREFIX puro: <http://lod2-dev.vse.cz/ontology/puro#>\r\n                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n                SELECT ?uri ?label ?child WHERE \r\n                {\r\n                    {?child puro:instanceOf ?uri}\r\n                     UNION\r\n                    {?child puro:subTypeOf ?uri}\r\n                    ?uri rdfs:label ?label. asfadf\r\n                    ?uri a puro:BType\r\n                    FILTER NOT EXISTS {?uri puro:linkedTo ?obj}\r\n                    FILTER NOT EXISTS {?uri puro:subTypeOf ?object}\r\n                }`;\r\n                \r\n                return new Promise(resolve => {\r\n                    this.sparqlQuery(query, function callback(result) {\r\n                        resolve(result);\r\n                    });\r\n                  });       \r\n            }\r\n\r\n            //result[index].connect\r\n            deleteDuplicity  (result, properties) {\r\n                var duplicity;\r\n                var checkArr = []; \r\n                \r\n                // sjednocení datových typů na pole\r\n                for (var res of result)\r\n                {\r\n                    for (let property of properties)\r\n                    {               \r\n                        if (res[property] === null)\r\n                        {\r\n                            res[property] = [];    \r\n                        }\r\n                        else\r\n                        {\r\n                            res[property] = [res[property].value]; \r\n                        }        \r\n                    }\r\n                }\r\n\r\n                for (let index = result.length -1; index >= 0; index --) {\r\n                    \r\n                    if (checkArr.includes(result[index].uri.value))\r\n                    {\r\n                            for (let property of properties)\r\n                            {\r\n                                for (let k = result.length -1; k >= 0; k --) {\r\n                                duplicity = result[index][property];    \r\n                                if(result[k].uri.value === result[index].uri.value){     \r\n                                    \r\n                                    if (!duplicity.some(e => result[k][property].includes(e)))\r\n                                    {                                    \r\n                                        result[k][property] = result[k][property].concat(duplicity); \r\n                                        break;\r\n                                    }\r\n                                    else{\r\n                                        if(property.includes(\"Type\"))\r\n                                        {\r\n                                            if (result[k][property.split(\"Type\")[0]].length !== result[k][property].length) {\r\n                                                result[k][property] = result[k][property].concat(duplicity); \r\n                                                break; \r\n                                            }\r\n                                        }\r\n                                    }     \r\n                                }   \r\n                            }\r\n                        }\r\n                        \r\n                        result.splice(index, 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        checkArr.push(result[index].uri.value);\r\n                    } \r\n                }\r\n\r\n                return result; \r\n\r\n            }\r\n\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class OntoModelController extends MainController {\r\n\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n        this.ontoModel  = []; \r\n    } \r\n  \r\n    \r\n    addToOntoModel = (uri, label, ontoType, puroType, relationName, direction, elName, nameWasChange, ontoUri, branchIndex, origUri) => \r\n    {\r\n    \r\n        if (this.getOntoElement(this.ontoUri + elName) === false)\r\n        {\r\n            let elPuroType;\r\n            let elLabel;\r\n            let elUri; \r\n            nameWasChange = nameWasChange === undefined ? false : nameWasChange;\r\n            origUri = origUri === undefined ? \"\" : origUri;\r\n            if (elName !==  \"\" && elName !== undefined && nameWasChange === false) \r\n            {\r\n\r\n                elPuroType = false;\r\n                elLabel = elName;\r\n                elUri = this.ontoUri + elName; \r\n\r\n            }\r\n            else\r\n            {\r\n                elPuroType = puroType;\r\n                elLabel = nameWasChange ? elName : label; \r\n                elUri = uri; \r\n            }\r\n\r\n            if (this.getOntoElement(elUri) === false)\r\n            {\r\n                this.ontoModel.push({uri: elUri, label:elLabel, ontoType: ontoType, puroType: elPuroType, fromRelation: [relationName], direction: [direction], from: [undefined], to:[undefined],type:\"Class\", branchIndex: [branchIndex], origUri:origUri});\r\n            }    \r\n        }\r\n        else\r\n        {\r\n            uri = ontoUri + elName; \r\n            this.updateOntoModel(uri, \"fromRelation\",relationName);\r\n            this.updateOntoModel(uri, \"direction\",direction);\r\n            this.updateOntoModel(uri, \"branchIndex\",branchIndex);\r\n        }\r\n        console.log(this.ontoModel)\r\n        return this.ontoModel; \r\n    }\r\n\r\n    isRelationComplete (relation)\r\n    {\r\n        if (relation.type === \"relation\" && relation.from.length > 0 && relation.to.length > 0)\r\n        {\r\n            return true;\r\n        }\r\n        return false; \r\n    }\r\n    \r\n    getCardinalElement (element, superType)\r\n    {\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.from[0] === element && superType === false)\r\n            {\r\n                return node.to[0]; \r\n            }\r\n            else if (node.type === \"relation\" && node.ontoType.toLowerCase() === \"generalization\" && node.to[0] === element && superType === true)\r\n            {\r\n                return node.from[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getElementByProperty (property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[property] === value)\r\n            {\r\n                return node; \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    getReletadELement (element, relationName)\r\n    {\r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.type === \"relation\" && (node.from.includes(element.uri) || node.to.includes(element.uri)) && this.isRelationComplete(node))\r\n            {\r\n                let relatedElement; \r\n                if (node.from.includes(element.uri)) \r\n                {\r\n                    relatedElement = node.to[0];\r\n                }\r\n                else\r\n                {\r\n                    relatedElement = node.from[0];\r\n                } \r\n                relatedElement = this.getOntoElement(relatedElement);\r\n                if (relatedElement.fromRelation.includes(relationName))\r\n                {\r\n                    return relatedElement; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n\r\n    addRelation = (type, from, to, uri,label, fromType, toType) => \r\n    {\r\n        //fromT toT\r\n        uri = uri === undefined ? this.ontoUri.slice(0,-1) + \"/relation/\"+type+\"/\"+this.delUri(from)+this.delUri(to) : uri; \r\n        fromType = fromType === undefined ? [] : [fromType];\r\n        toType = toType === undefined ? [] : [toType]; \r\n        from = from === undefined || \"\" || from.length === 0 ? [] : [from];\r\n        to = to === undefined || \"\" || to.length === 0 ? [] : [to];\r\n        \r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && el.from.includes(from) && el.to.includes(to))\r\n            {\r\n                return this.ontoModel;\r\n            }\r\n        }\r\n\r\n\r\n        this.ontoModel.push({type:\"relation\",ontoType: type, from: from, to: to,uri:uri, label:label, fromType: fromType, toType: toType, fromRelation: []});\r\n        \r\n        return this.ontoModel; \r\n    }\r\n\r\n    updateOntoModel = (elementsUri, property, value, duplicity = true) =>\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === elementsUri) {\r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    if (duplicity === true || !node[property].includes(value))\r\n                    {\r\n                        node[property].push(value);\r\n                    }\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    if (duplicity === true || node[property] !== value)\r\n                    {\r\n                        node[property] = value;\r\n                    } \r\n                }\r\n                return this.ontoModel;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addToProperty (uri, property, value)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                 \r\n                if (Array.isArray(node[property]))\r\n                {\r\n                    node[property].push(value); \r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getOntoModel = () =>\r\n    {\r\n        return this.ontoModel; \r\n    }\r\n    \r\n    getElementsRelation = (uri, direction) =>\r\n    {\r\n        \r\n       \r\n        let returnArr = []; \r\n        \r\n        for (let node of this.ontoModel)\r\n        {\r\n            let nextRel = false;\r\n            let nextOther = false;\r\n            if (Array.isArray(node[direction]))\r\n            {\r\n                nextRel = node[direction].includes(uri) ? true : false; \r\n            }\r\n\r\n        \r\n            if (node[\"type\"] === \"relation\" && nextRel === true)\r\n            {\r\n                returnArr.push(node);\r\n            }\r\n            else if(direction === \"connect\" &&  (node[\"from\"].includes(uri) || node[\"to\"].includes(uri)))\r\n            {\r\n                returnArr.push(node) ;\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n\r\n\r\n\r\n    getElementOntoType = (uri) => \r\n    {\r\n        \r\n        let element = this.getOntoElement(uri);\r\n\r\n        if (element === false)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return element.ontoType; \r\n        }\r\n\r\n    }\r\n\r\n    getElementsByOntoType = (type, origin) => \r\n    {\r\n       let result = [];\r\n\r\n       for (let node of this.ontoModel)\r\n       {\r\n            if (type === node.ontoType && (origin === undefined || node.fromRelation.includes(origin)))\r\n            {  \r\n                result.push(node.uri);\r\n            }\r\n       }\r\n       return result; \r\n\r\n    }\r\n\r\n    getOntoElement = (uri) => \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri) \r\n            {\r\n                return node; \r\n        \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeOrigin = (uri, origin) => \r\n    {\r\n       for (let i = 0; i < this.ontoModel.length; i++)   \r\n       {\r\n         if (this.ontoModel[i].uri === uri) {\r\n             this.ontoModel[i].origin = origin; \r\n             return true;\r\n         }\r\n       }\r\n       return false; \r\n    }\r\n\r\n    \r\n\r\n    getLastElementUri = (origin, direction, branchIndex) => \r\n    {\r\n        for (let i = this.ontoModel.length - 1; i >= 0; i--) \r\n        {\r\n            for (let j = 0; j < this.ontoModel[i].fromRelation.length; j++) {\r\n               \r\n                if ((this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].branchIndex.includes(branchIndex) && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\"))\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && this.ontoModel[i].direction[j] === direction && this.ontoModel[i].ontoType !== \"Datatype\" && branchIndex === undefined)\r\n                {\r\n             \r\n                    return this.ontoModel[i].uri;\r\n                }\r\n                else if (this.ontoModel[i].fromRelation[j] === origin && direction === undefined && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri; \r\n                }\r\n                else if(origin === undefined && direction === undefined  && branchIndex === undefined)\r\n                {\r\n                    return this.ontoModel[i].uri;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    getElementInRelRow (lastElUri)\r\n    {\r\n        \r\n        const relElements = this.getElementInRelation(lastElUri,\"*\",\"from\",false); \r\n        if (relElements.length === 0)\r\n        {\r\n            return lastElUri;\r\n        }\r\n        //kokos\r\n        console.log(relElements)\r\n        const fatherChildren = this.getElementInRelation(relElements[0].element.uri,\"*\",\"to\",this.getOntoElement(lastElUri).ontoType); \r\n        console.log(fatherChildren)\r\n        console.log(fatherChildren[0].element.uri)\r\n        return fatherChildren[0].element.uri; \r\n\r\n    }\r\n\r\n    getLastElement = (origin, direction) =>\r\n    {\r\n        const uri = this.getLastElementUri(origin, direction);\r\n        return this.getOntoElement(uri); \r\n    }\r\n\r\n    getFatherOntoType = (element) => \r\n    {\r\n\r\n        let result = []; \r\n        if ('father' in element)\r\n        {\r\n            for (let node of this.ontoModel)\r\n            {\r\n                if(element.father.includes(node.uri))\r\n                {\r\n                    result.push(node.ontoType);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(result.length === 0)\r\n        {\r\n            result = [\"\"];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRelationElements = (elName, element, selectedUri, relationUri, addRulesLenght, lastEl, puroType, isElInstance, ruleKey, nameWasChange, branchesCount) => \r\n    {\r\n  \r\n        const ontoEl = this.getOntoElement(selectedUri);\r\n   \r\n        if (elName !== \"\" && puroType !== \"dataType\" && nameWasChange === false && isElInstance === false && (element !== false || ontoEl !== false))\r\n        {    \r\n           \r\n            let father;\r\n            let passEl; \r\n            if (puroType === \"superType\")\r\n            {\r\n                father = this.ontoUri + elName;\r\n                passEl = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else if (puroType === \"subType\")\r\n            {\r\n                passEl = this.ontoUri + elName;    \r\n                father = ontoEl !== false ? ontoEl.uri : element.uri.value; \r\n            }\r\n            else\r\n            {\r\n\r\n                if (element !== false)\r\n                {\r\n                   \r\n                    father = element.father[0] === undefined ? element.uri.value : element.father[0];\r\n                   \r\n                }\r\n                else\r\n                {\r\n                    father = ontoEl.uri;\r\n                }\r\n                passEl = this.ontoUri + elName; \r\n            }\r\n            return [father, passEl];\r\n\r\n        }\r\n        else if (relationUri === null)\r\n        {\r\n            if (element.father.length > 0)\r\n            {\r\n\r\n                return [element.father[0], element.uri.value];\r\n            }\r\n            else return false; \r\n            \r\n        }\r\n        else if (puroType.includes(\"elementSelection\") || (element !== false && this.getOntoElement(element.father[0]) !== false))\r\n        {   \r\n            let elementFather = \"foundFather\" in element ? element.foundFather : this.getOntoElement(element.father[0]);\r\n            if (puroType.includes(\"invert\") || !puroType.includes(\"elementSelection\"))\r\n            {\r\n                return [element.uri.value, elementFather.uri];\r\n            }\r\n            else\r\n            {\r\n                return [elementFather.uri,element.uri.value];\r\n            \r\n            }\r\n        }\r\n        else if((addRulesLenght === 0 && lastEl === true) || element === false || isElInstance === true)\r\n        {\r\n            //koko\r\n            \r\n            let lastRelElement = this.getLastElement(relationUri);\r\n            lastRelElement = this.getOntoElement(this.getElementInRelRow(lastRelElement.uri))\r\n          \r\n            const passEl = (element === false || isElInstance === true) ? this.ontoUri + elName : selectedUri;\r\n\r\n            let lastElUri = this.getLastElementUri(relationUri,ruleKey, branchesCount);\r\n            lastElUri = this.getElementInRelRow(lastElUri); \r\n    \r\n            if (lastRelElement !== false && (lastRelElement.direction[lastRelElement.direction.length - 1] !== ruleKey || branchesCount > 1) && addRulesLenght === 0)\r\n            {\r\n             \r\n                if (lastElUri !== false && !this.isRelationExist(lastElUri,passEl) &&  this.getOntoBranch(relationUri, ruleKey).length > 1)\r\n                {\r\n                    return [lastElUri, passEl];\r\n                }\r\n              \r\n                this.updateOntoModel(relationUri,ruleKey,passEl, false);\r\n                return relationUri; \r\n            }\r\n            else if (element === false || lastRelElement !== false || isElInstance === true)\r\n            {\r\n                \r\n                return [lastRelElement.uri, passEl];\r\n            }\r\n            \r\n        }  \r\n        \r\n    }\r\n\r\n    checkDuplicity (label) \r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.label === label) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    getRelatedTypes (elUri, direction, ontoType) \r\n    {\r\n        let rels = this.getElementsRelation(elUri, direction);\r\n        let elements = [];\r\n        let types = []; \r\n        for (let rel of rels)\r\n        {\r\n          //Arrow \r\n          \r\n          if (rel.ontoType === ontoType || (ontoType === \"Generalization\" && rel.ontoType.includes(\"memberOf\")))\r\n          {\r\n              const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n              elements.push(el);\r\n              types.push(this.getElementOntoType(el));\r\n          }\r\n          else if (ontoType === false && rel.ontoType === \"Relator\")\r\n          {\r\n            types.push(rel.ontoType); \r\n          }\r\n          else if (ontoType === false)\r\n          {\r\n            const el = (rel.to.includes(elUri)) ? rel.from[rel.to.indexOf(elUri)] : rel.to[rel.from.indexOf(elUri)];\r\n            elements.push(el);\r\n            types.push(this.getElementOntoType(el)); \r\n          }\r\n        }  \r\n\r\n        return types; \r\n    }\r\n\r\n    getElementsFromBranch(element)\r\n    {\r\n\r\n        let returnArr = [element];\r\n        let el = element;\r\n    \r\n        while (this.getCardinalElement(el,true) !== false)\r\n        {   \r\n            el = this.getCardinalElement(el, true);\r\n            returnArr.push(el);\r\n        }\r\n\r\n        return returnArr; \r\n    }\r\n\r\n    getElementInRelation(elementUri, relationType, direction, ontoType)\r\n    {\r\n        let returnArr = [];\r\n        const all = relationType === \"*\" ? true : false; \r\n        ontoType = ontoType === undefined || false ? false : ontoType; \r\n\r\n        for (let relation of this.ontoModel)\r\n        {\r\n     \r\n            if (relation.type === \"relation\" && (relation.ontoType === relationType || all) && relation[this.getOpositeDirection(direction)].includes(elementUri))\r\n            {   \r\n                let el = this.getOntoElement(relation[direction][0]);\r\n         \r\n                if (ontoType === false || ontoType === el.ontoType)\r\n                {\r\n                    returnArr.push({element : el, relationType: relation.ontoType}); \r\n                } \r\n            }\r\n        }\r\n        return returnArr; \r\n    }\r\n\r\n    isRelationExist(el1, el2)\r\n    {\r\n        for (let el of this.ontoModel)\r\n        {\r\n            if (el.type === \"relation\" && (el.from === el1 && el.to === el2) || (el.from === el2 && el.to === el1))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n    getOntoBranch(relation, key, branchIndex)\r\n    {\r\n        let returnArr = [];\r\n        branchIndex = branchIndex === undefined ? false : branchIndex;\r\n        for (let el of this.ontoModel)\r\n        {\r\n            for (let index in el.fromRelation)\r\n            {\r\n                if (el.fromRelation[index] === relation && el.direction[index] === key && (branchIndex === false || el.branchIndex.includes(branchIndex)))\r\n                {\r\n                    returnArr.push(el);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return returnArr; \r\n    }\r\n    \r\n    connectToBranchElement(relation, key, selectedEl)\r\n    {\r\n\r\n        const question =  \"To which element is the \" + this.delUri(selectedEl.uri.value) + \" connected?\";\r\n\r\n        const firstEl = (this.getOntoBranch(relation, key)[0]);\r\n        const lastEl = this.getLastElement(relation, key);\r\n\r\n        if (firstEl === undefined || lastEl === false)\r\n        {\r\n            return false\r\n        }\r\n        else\r\n        {\r\n            \r\n            return this.createButtons([firstEl.label, lastEl.label],question, \"nextBranchElements\", false, \"\");\r\n        }\r\n\r\n        if (firstEl.uri === lastEl.uri)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n           \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    undo (ontoModelHistory)\r\n    {\r\n        \r\n        this.ontoModel =  JSON.parse(JSON.stringify(ontoModelHistory));  \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import MainController from \"./MainController\";\r\n\r\nexport default class ImagController extends MainController {\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.ontoModel = [];\r\n    }\r\n\r\n    createGraph  (ontoModel) \r\n    {\r\n        this.ontoModel = ontoModel;\r\n        let graphCommand = \"classDiagram\\n\"; \r\n\r\n\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node[\"type\"] === \"relation\" && this.findLabel(node.to[0]) !== false && this.findLabel(node.from[0]) !== false) {\r\n                if (node.ontoType === \"Relator\")\r\n                {\r\n                    if (node.from.length > 0 && node.to.length > 0) \r\n                    {\r\n                    \r\n                        graphCommand += 'class '+ node.label + `{\r\n                                <<`+ node.ontoType + `>>\r\n                        }\\n`;   \r\n                        \r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key] ? '\"'+node.fromType[key][1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\";\r\n                        }\r\n\r\n                      //  graphCommand += this.findLabel(node.from) +\" \"+ (fromT ? '\"'+fromT[0]+'\"' : \"\") +\" .. \"+ (toT ? '\"'+fromT[1]+'\"' : \"\") + \" \" + node.label +  \" : <<Mediation>>\\n\"; \r\n                        \r\n                        for (let key in node.to)\r\n                        {\r\n                            graphCommand += node.label +\" \"+ (node.toType[key] ? '\"'+node.toType[key][0]+'\"' : \"\") +\" .. \"+ (node.toType[key]  ? '\"'+node.toType[key][1]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + \" : <<Mediation>>\\n\"; \r\n                        }\r\n                      \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    const relationSpec = this.getRelationSpec(node.ontoType);\r\n                    if (node.from.length === node.to.length)\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            graphCommand += this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0] + (node.toType[key] ? '\"'+node.toType[key]+'\"' : \"\") + \" \" + this.findLabel(node.to[key]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        for (let key in node.from)\r\n                        {\r\n                            let base = this.findLabel(node.from[key]) +\" \"+ (node.fromType[key] ? '\"'+node.fromType[key]+'\"' : \"\") + relationSpec[0];\r\n                            \r\n                            for (let toKey in node.to)\r\n                            {\r\n                                graphCommand += base + (node.toType[toKey] ? '\"'+node.toType[toKey]+'\"' : \"\") + \" \" + this.findLabel(node.to[toKey]) + (relationSpec[1] === true ? \" : <<\"+node.ontoType.split('-')[0]+\">>\" : \"\" ) + \"\\n\"; \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n            else if (node[\"type\"] !== \"relation\")\r\n            {\r\n              \r\n                graphCommand += 'class '+ node.label + `{\r\n                    <<`+ node.ontoType + `>>\r\n                }\\n`;   \r\n            }\r\n        }\r\n        return graphCommand = (graphCommand.trim() === \"classDiagram\") ? false : graphCommand; \r\n    }\r\n    \r\n    getRelationSpec (ontoType)\r\n    {\r\n        for(let rel of this.rulesJson.relations)\r\n        {\r\n            \r\n            if (ontoType in rel)\r\n            {\r\n                \r\n                const normRelType = rel[ontoType]; \r\n                const showType = \"showType\" in rel && rel[\"showType\"] === true ? true : false;  \r\n                let code; \r\n                switch(normRelType.toLowerCase())\r\n                {\r\n                    case \"arrowline\": code = \" <|-- \";  \r\n                        break; \r\n                    case \"simpleline\": code = \" -- \"; \r\n                        break; \r\n                    case \"dashedline\": code = \" .. \"; \r\n                        break; \r\n                    case \"composition\": code = \" *-- \"; \r\n                        break; \r\n                    case \"aggregation\": code = \" o-- \"; \r\n                        break; \r\n                    default:  code = \" -- \"; \r\n                }\r\n            \r\n                return [code, showType]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findLabel (uri)\r\n    {\r\n        for (let node of this.ontoModel)\r\n        {\r\n            if (node.uri === uri)\r\n            {\r\n                return node.label;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}","import MainController from \"./MainController\";\r\n\r\nexport default class RuleController extends MainController {\r\n    \r\n\r\n    //ruleSelection queryTree, \r\n    ruleSelection = (rules, key, element, previousElName, rule, queryTree, relationLabel) => \r\n    {\r\n        \r\n        let commands; \r\n        let additionalRules;\r\n        let offerTypes;\r\n        let uri;\r\n        let question;\r\n        let needElName;\r\n        let elName = \"\";\r\n        \r\n        if (rule)\r\n        {\r\n            offerTypes = rule; \r\n        }\r\n        else\r\n        {\r\n            commands = this.getSpecificRule(rules,key);\r\n            //additionalRules = this.getAdditionalRule(commands,ontoType);\r\n            //offerTypes = (additionalRules.length > 0 ) ? offerTypes = additionalRules : offerTypes = commands.offer;\r\n            offerTypes = commands.offer   \r\n        }\r\n\r\n        //z elementu udělat otázku\r\n        if (element !== false)\r\n        {\r\n            let additionalQuestion = \"\";\r\n            \r\n            if (element.connect.length > 1)\r\n            { \r\n                additionalQuestion = \"\\n \" + this.getQuestion(relationLabel, \"relSpecific\");\r\n            }\r\n            \r\n            if (this.isElementInstace(element,queryTree))\r\n            {\r\n                needElName =true;\r\n                uri = element.uri.value;\r\n\r\n\r\n\r\n                question = this.rulesJson.questions[1].question.replace(\"VAL\",element.label.value) + additionalQuestion;\r\n            }\r\n            else\r\n            {\r\n                needElName = false;\r\n                uri = element.uri.value;\r\n                question = this.rulesJson.questions[0].question.replace(\"VAL\",element.label.value) + additionalQuestion;\r\n                elName = element.label.value; \r\n            }\r\n        }\r\n        else\r\n        {\r\n            //zjisti zda je chyby nebno ne \r\n            needElName = true;\r\n\r\n            //Třeba dodělat Replace!!\r\n\r\n            for (let q of this.rulesJson.questions)\r\n            {\r\n                if (q.type === \"bTypeChild\")\r\n                {\r\n                    question = q.question.replace(\"VAL\", previousElName);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n       \r\n        return this.createButtons(offerTypes,question, \"classSelection\",needElName,elName);\r\n    }\r\n\r\n    isElementInstace = (element, queryTree) =>\r\n    {\r\n        for (let node of queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n\r\n    moreThanOneRule (ontoController, element,minCount,maxCount, check)\r\n    {\r\n        const elInRelation = ontoController.getElementInRelation(element.uri,\"*\",\"from\",false)[0]; \r\n        const childrenCount = ontoController.getElementInRelation(elInRelation.element.uri,elInRelation.relationType,\"to\", element.ontoType).length;\r\n        if (childrenCount < maxCount)\r\n        {\r\n            const types = childrenCount < minCount ? [element.ontoType] : [element.ontoType, \"None\"]\r\n            check.push({key: \"subType\", types: types, element: elInRelation.element.uri, rule:{type:[element.ontoType],question:this.getQuestion(elInRelation.element,\"moreThanOne\")}}); \r\n        }\r\n\r\n        return check; \r\n\r\n    }\r\n\r\n    // this.ontoController.getOntoElement(this.relation.uri.value);\r\n    elementConsistencyRules = (element,  ontoController) => \r\n    {\r\n            // v případě undefinied vyhoď, že pravidlo není definováno \r\n            let rules = this.rulesJson[element.ontoType];    \r\n            let check = []; \r\n        \r\n       \r\n\r\n            //Tady by měla být pole jelikož to může být 1:N \r\n            // !!! Převod na metodu a úprava dle pravidel\r\n            // udělat connect -> subtype -> supertype jenom v případě arrow \r\n\r\n            let elTypes = {\r\n                superType: ontoController.getRelatedTypes(element.uri,\"to\", \"Generalization\"), \r\n                subType: ontoController.getRelatedTypes(element.uri,\"from\",\"Generalization\"), \r\n                connect: ontoController.getRelatedTypes(element.uri, \"connect\", false)\r\n            };\r\n\r\n            console.log (elTypes.connect)\r\n            \r\n            for (let rule of rules)\r\n            {\r\n             \r\n                check = this.elementConsistencySelection(rule,elTypes.connect,\"connect\",element,check,rules,elTypes, ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.superType,\"superType\",element,check,rules,elTypes,ontoController);\r\n                check = this.elementConsistencySelection(rule,elTypes.subType,\"subType\",element,check,rules,elTypes, ontoController);\r\n                if (rule.key === \"moreThanOne\")\r\n                {\r\n                    check = this.moreThanOneRule(ontoController,element,rule.minCount,rule.maxCount,check);\r\n                }\r\n            }\r\n\r\n            //Kontrola none a spojených typů!! \r\n\r\n            if ((check.length > 0 && check[0].types.includes(\"Relator\") && check[0].types.includes(\"None\")))\r\n            {\r\n                check.splice(0, 1);  \r\n            }\r\n\r\n            for (let i = 0; i < check.length; i++) {\r\n                check[i][\"elLabel\"] =  ontoController.getOntoElement(check[i].element).label;  \r\n            }\r\n\r\n\r\n\r\n            return check;\r\n    }\r\n\r\n\r\n\r\n    elementConsistencySelection = (rule,elTypes,key,element,check,rules,allTypes, ontoController) =>\r\n    {\r\n        if(rule.key === key)\r\n        {\r\n                \r\n                const suffix = key[key.length - 1] === \"e\" ? \"d\" : \"ed\";\r\n                const additionalRules =  this.getSpecificRule(rules, key + suffix, true);\r\n                if (!rule.type.some(r=> elTypes.includes(r)) && rule.type.length > 0 )\r\n                {\r\n                    // if includes none -> zkontrolovat lenght superType -> zeptat se jestli chci doplnit superType -> nabídnout co je v tabulce -> zkontrolovat jestli už není\r\n                    check.push({key: key, types: rule.type, element:element.uri, rule:rule});\r\n\r\n                }\r\n                else \r\n                {\r\n                    if (additionalRules !== false)\r\n                    {\r\n                      \r\n                        for (let addRule of additionalRules)\r\n                        {\r\n                            console.log(JSON.parse(JSON.stringify(addRule)))\r\n                            if (addRule.type.some(r=> elTypes.includes(r))) {\r\n                                check = this.elementConsAddSelection(\"superType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"subType\",addRule,elTypes,check,element,allTypes);\r\n                                check = this.elementConsAddSelection(\"connect\",addRule,elTypes,check,element,allTypes);\r\n                                if (\"moreThanOne\" in addRule && addRule[\"moreThanOne\"] === true && elTypes.length < 2)\r\n                                {\r\n                                    check = this.moreThanOneRule(ontoController,element,addRule.mincCountount,addRule.maxCount,check);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n        return check; \r\n    }\r\n    \r\n    elementConsAddSelection (type, rule, elTypes, check, element, allTypes)\r\n    {\r\n    \r\n        if (type in rule)\r\n        {\r\n      \r\n            if (!rule[type].some(r=> allTypes[type].includes(r)) && rule[type].length > 0 )\r\n            {\r\n                \r\n                for (let index in check)\r\n                {\r\n                  \r\n                    if (check[index].key === type && check[index].element === element.uri)\r\n                    {\r\n                        check.splice(index, 1);\r\n                    }\r\n                }\r\n                check.push({key: type, types: rule[type], element:element.uri, rule:rule});\r\n            }\r\n            else if (\"moreThanOne\" in rule && rule[\"moreThanOne\"] === true)\r\n            {\r\n                //vrat element dej fathera \r\n            }\r\n\r\n        }\r\n    \r\n        return check; \r\n       \r\n    }\r\n\r\n    numberOfRuleStep (relationType, key, bTypeNumber)\r\n    {\r\n        const rule = this.getSpecificRule(this.rulesJson[relationType], key, false, bTypeNumber);\r\n        let indexCount = 0; \r\n\r\n        for (let key in rule)\r\n        {\r\n            if (!isNaN(key))\r\n            {\r\n                indexCount ++; \r\n            }\r\n        }\r\n\r\n        return indexCount; \r\n    }\r\n\r\n    getSpecificRule = (rules, key, moreThanOne, bTypeNumber) =>\r\n    {\r\n        let addRules = [];\r\n        \r\n        bTypeNumber = bTypeNumber === undefined ? false : bTypeNumber; \r\n        moreThanOne = moreThanOne === undefined ? false : moreThanOne; \r\n        \r\n        if (bTypeNumber !== false)\r\n        {\r\n            for (let node of rules)\r\n            {\r\n                if (node.key === key &&  (\"bTypeNumber\" in node) && node.bTypeNumber.includes(bTypeNumber))\r\n                {\r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n\r\n       \r\n        }\r\n            for (let node of rules)\r\n            {\r\n                \r\n                if (node.key === key)\r\n                {\r\n                    if (moreThanOne === true)\r\n                    {\r\n                        addRules.push(node);\r\n                    }\r\n                    else\r\n                    {   \r\n                        return node; \r\n                    }   \r\n                }\r\n            }\r\n        \r\n\r\n\r\n        // Tady možná hvězda \r\n        if (addRules.length > 0)\r\n        {\r\n            return rules;\r\n        }\r\n        else\r\n        {\r\n            return false; \r\n        }     \r\n    }\r\n\r\n\r\n\r\n    getAdditionalRule = (rule, selectedType, index) =>\r\n    {\r\n        /*\r\n        if (selectedType in rule)\r\n        {\r\n            (\"bam\")\r\n            console.log(rule)\r\n            return rule[selectedType];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n        */\r\n        if (rule !== false && index.toString() in rule && selectedType in rule[index])\r\n        {\r\n            console.log(rule[index][selectedType])\r\n            return rule[index][selectedType]; \r\n        }\r\n        \r\n        return [];\r\n    \r\n    }\r\n\r\n\r\n    commonRuleSelection = (element, fathers,start, ontoModel, fatheFound, addNone) => \r\n    {\r\n\r\n        // tohle vyřeš na úrovni onto modelu!\r\n        let fatherOnto = [];\r\n        let childPuroType = [];\r\n        //const connection =  element.connect.length > 0 ? true : false;  \r\n        let type = \"elementSelection\"; \r\n        for (let child of element.childType)\r\n        {\r\n            childPuroType.push(this.delUri(child));\r\n        }\r\n\r\n        if (fatheFound)\r\n        {\r\n            fatherOnto.push(element.foundFather.ontoType); \r\n        }\r\n        else\r\n        {\r\n            for (let node of ontoModel)\r\n            {\r\n                if (fathers.includes(node.uri)) {\r\n                    fatherOnto.push(node.ontoType);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        // Změnit!! \r\n        for (let rule of this.rulesJson.commonRules)\r\n        {\r\n\r\n            /*((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))) &&\r\n            (element.childType.some(r=> rule.childPuro.includes(r) || \r\n            (rule.childPuro.includes(\"none\"))) \r\n           ))\r\n            */\r\n            console.log(start === true)\r\n            console.log(rule.fatherOnto === \"NoRelation\")\r\n            console.log(rule.fatherOnto)\r\n           if (start === true && rule.fatherOnto[0] === \"NoRelation\")\r\n           {\r\n             const question = \"Which type is \"+element.label.value+\"?\";\r\n             return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n           }\r\n           else if ((fatherOnto.some(r=> rule.fatherOnto.includes(r)) || (rule.fatherOnto.includes(\"none\"))))\r\n            {\r\n                \r\n                if (\"invert\" in rule && rule[\"invert\"] === true)\r\n                {\r\n                    type += \"-invert\"\r\n                }\r\n                \r\n                const offerTypes = JSON.parse(JSON.stringify(rule.offer));\r\n                \r\n                if (addNone === true && !offerTypes.includes(\"None\"))\r\n                {\r\n                    offerTypes.push(\"None\");\r\n                }\r\n                \r\n                const question = \"Which type is \"+element.label.value+\"?\";\r\n                return this.createButtons(rule.offer,question, type,false, element.label.value);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import EventController from \"./EventController\";\r\n\r\nexport default class HistoryController {\r\n    constructor ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    init (rec)\r\n    {\r\n         this.propertiesHistory.push(rec);\r\n         this.ontoModelHistory.push([]); \r\n    }\r\n\r\n    reset ()\r\n    {\r\n        this.ontoModelHistory = [];\r\n        this.propertiesHistory = []; \r\n        this.inputVariables = [];\r\n    }\r\n\r\n    saveRecords (properties = {}, ontoModel = [], inputVariables)\r\n    {\r\n        this.propertiesHistory.push(properties);\r\n        this.ontoModelHistory.push(ontoModel);\r\n        this.inputVariables.push(inputVariables); \r\n    }\r\n\r\n\r\n    undo()\r\n    {   \r\n        \r\n        this.ontoModelHistory.pop();\r\n        const lastProp = this.propertiesHistory.pop();\r\n        this.inputVariables.pop(); \r\n        if (this.propertiesHistory[this.propertiesHistory.length-2] !== undefined && this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"].length === 0)\r\n        {\r\n            this.propertiesHistory[this.propertiesHistory.length-2][\"queryTree\"] = JSON.parse(JSON.stringify(lastProp[\"queryTree\"]));\r\n        }\r\n        console.log(this.propertiesHistory)\r\n        console.log(this.inputVariables)\r\n        console.log(this.ontoModelHistory)\r\n        return {ontoModel: this.ontoModelHistory[this.ontoModelHistory.length-2], properties: this.propertiesHistory[this.propertiesHistory.length-2],\r\n        inputVariables: this.inputVariables[this.inputVariables.length-1]};\r\n    }\r\n\r\n}\r\n","import MainController from './MainController';\r\n\r\nexport default class OntoScheController extends MainController{\r\n  /*\r\n    constructor()\r\n    {\r\n      super(); \r\n\r\n    \r\n       const mod = this.initJson();\r\n       console.log(mod)\r\n       const model = this.transform(mod);\r\n\r\n\r\n\r\n         console.log(model);\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(model);\r\n\r\n        if (isValid)\r\n        {\r\n          console.log(\"ok\")\r\n        }\r\n        else\r\n        {\r\n          console.log(validator.errors);\r\n        }\r\n       \r\n    }  */\r\n\r\n    transform (ontoModel)\r\n    {\r\n        const ontoUmlSchema = this.schemaInit(); \r\n        let relCount = 0; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if(node.type === \"Class\" || node.ontoType.toLowerCase() === \"relator\")\r\n            {\r\n              ontoUmlSchema[\"contents\"].push(this.ontoClassTransformation(node)); \r\n            }\r\n        }\r\n        console.log(ontoUmlSchema)\r\n        // Relations have to be added at the end \r\n        for (let node of ontoModel)\r\n        {\r\n          if (node.type === \"relation\" && node.ontoType.toLowerCase() !== \"relator\") {\r\n              let key; \r\n              \r\n              if (node.from.length >= node.to.length)\r\n              {\r\n                 key = \"from\";\r\n              }\r\n              else\r\n              {\r\n                key = \"to\"; \r\n              }\r\n              \r\n              let opositeIndex = 0;\r\n              for (let index in node[key])\r\n              {\r\n                 \r\n                 let fromIndex = key === \"from\" ? index : opositeIndex; \r\n                 let toIndex = key === \"to\" ? index : opositeIndex; \r\n                  \r\n                 ontoUmlSchema[\"contents\"].push(this.relationTransformation(node, relCount, fromIndex, toIndex));\r\n                 relCount += 2;  \r\n                 if (index <= node[key].length)\r\n                 {\r\n                    opositeIndex = index; \r\n                 }\r\n              }\r\n          }\r\n          else if (node.ontoType.toLowerCase() === \"relator\")\r\n          {\r\n            \r\n            let key; \r\n              \r\n            if (node.from.length >= node.to.length)\r\n            {\r\n              key = \"from\";\r\n            }\r\n            else\r\n            {\r\n              key = \"to\"; \r\n            }\r\n            \r\n            let opositeIndex = 0;\r\n\r\n            for (let index in node[key])\r\n            {\r\n              let nodeCopy = JSON.parse(JSON.stringify(node));\r\n              let nodeCopy2 = JSON.parse(JSON.stringify(node));  \r\n\r\n              nodeCopy[\"uri\"] += \"rel1\"\r\n              nodeCopy2[\"uri\"] += \"rel2\"\r\n        \r\n              nodeCopy[\"ontoType\"] = \"mediation\"\r\n              nodeCopy2[\"ontoType\"] = \"mediation\"\r\n              \r\n              if (key === \"from\")\r\n              {\r\n                nodeCopy[\"fromType\"] = node[\"fromType\"][index][0]; \r\n                nodeCopy[\"toType\"] = node[\"fromType\"][index][1];\r\n\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy2[\"fromType\"] = node[\"toType\"][opositeIndex][0];\r\n                  nodeCopy2[\"toType\"] = node[\"toType\"][opositeIndex][1];\r\n                  nodeCopy2[\"to\"] = [nodeCopy[\"to\"][opositeIndex]];\r\n                }\r\n\r\n                \r\n                nodeCopy[\"from\"] = [nodeCopy[\"from\"][index]];\r\n                \r\n              }\r\n              else\r\n              {\r\n                if (opositeIndex !== false)\r\n                {\r\n                  nodeCopy[\"fromType\"] = node[\"fromType\"][opositeIndex][0]; \r\n                  nodeCopy[\"toType\"] = node[\"fromType\"][opositeIndex][1];\r\n                  nodeCopy[\"from\"] = [nodeCopy[\"from\"][opositeIndex]];\r\n                }\r\n                nodeCopy2[\"fromType\"] = node[\"toType\"][index][0];\r\n                nodeCopy2[\"toType\"] = node[\"toType\"][index][1];\r\n                \r\n\r\n                nodeCopy2[\"to\"] = [nodeCopy[\"to\"][index]];\r\n              }\r\n              \r\n              nodeCopy[\"to\"] = [node.uri];\r\n              nodeCopy2[\"from\"] = [node.uri];\r\n              \r\n              console.log (JSON.parse(JSON.stringify(nodeCopy)))\r\n              console.log (JSON.parse(JSON.stringify(nodeCopy2)))\r\n\r\n              if (!(key === \"to\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy, relCount, 0,0));\r\n                relCount += 2;\r\n              } \r\n              \r\n              if (!(key === \"from\" && opositeIndex === false))\r\n              {\r\n                ontoUmlSchema[\"contents\"].push(this.relationTransformation(nodeCopy2, relCount,0,0));\r\n                relCount += 2; \r\n              } \r\n \r\n              if (index < node[this.getOpositeDirection(key)].length - 1)\r\n              {\r\n                 opositeIndex = index; \r\n              }\r\n              else\r\n              {\r\n                 opositeIndex = false; \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const schemas = require('ontouml-schema');\r\n        const Ajv = require('ajv');\r\n        const validator = new Ajv().compile(schemas.getSchema(schemas.ONTOUML_2));\r\n        // this.ontoModel = this.initJson();\r\n       \r\n        const isValid = validator(ontoUmlSchema);\r\n\r\n        if (isValid)\r\n        {\r\n          return ontoUmlSchema; \r\n        }\r\n        else\r\n        {\r\n          alert(\"Model is not valid! Check OntoSchemaCotroller!\"); \r\n          return {}; \r\n        }\r\n    }\r\n\r\n    schemaInit ()\r\n    {\r\n        return {\r\n            \"type\": \"Package\",\r\n            \"id\": \"puroConversion\",\r\n            \"name\": null,\r\n            \"description\": null,\r\n            \"contents\": [],\r\n            \"propertyAssignments\": null\r\n            }\r\n    }\r\n\r\n    ontoClassTransformation (ontoClass)\r\n    {\r\n      return  {\r\n            \"type\": \"Class\",\r\n            \"id\": ontoClass.uri ,\r\n            \"name\": ontoClass.label,\r\n            \"description\": null,\r\n            \"properties\": null,\r\n            \"literals\": null,\r\n            \"propertyAssignments\": null,\r\n            \"stereotypes\": [ontoClass.ontoType.toLowerCase()],\r\n            \"isAbstract\": null,\r\n            \"isDerived\": null\r\n            }\r\n    }\r\n\r\n    relationTransformation (relation, relCount, fromIndex, toIndex)\r\n    {\r\n\r\n        if (relation.ontoType === \"Generalization\")\r\n        {\r\n             return {\r\n                \"type\": \"Generalization\",\r\n                \"id\": relation.uri,\r\n                \"name\": null,\r\n                \"description\": null,\r\n                \"general\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.from[fromIndex]\r\n                },\r\n                \"specific\": {\r\n                  \"type\": \"Class\",\r\n                  \"id\": relation.to[toIndex]\r\n                },\r\n                \"propertyAssignments\": {\r\n                  \"nonStandardProperty\": null\r\n                }\r\n              };\r\n        }\r\n        else\r\n        {\r\n            return {\r\n              \"type\": \"Relation\",\r\n              \"id\": relation.uri,\r\n              \"name\": null,\r\n              \"description\": null,\r\n              \"properties\": [\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + relCount,\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.from[fromIndex]\r\n                  },\r\n                  \"cardinality\": relation.fromType[fromIndex] === \"\" || undefined ? null : relation.fromType[fromIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                },\r\n                {\r\n                  \"type\": \"Property\",\r\n                  \"id\": \"prop\" + (parseInt(relCount) + 1),\r\n                  \"name\": null,\r\n                  \"description\": null,\r\n                  \"propertyType\": {\r\n                    \"type\": \"Class\",\r\n                    \"id\": relation.to[toIndex]\r\n                  },\r\n                  \"cardinality\": relation.toType[toIndex] === \"\" || undefined ? null : relation.toType[toIndex],\r\n                  \"isDerived\": null,\r\n                  \"isOrdered\": null,\r\n                  \"isReadOnly\": null,\r\n                  \"stereotypes\": null,\r\n                  \"propertyAssignments\": null,\r\n                  \"subsettedProperties\": null,\r\n                  \"redefinedProperties\": null,\r\n                  \"aggregationKind\": null\r\n                }\r\n              ],\r\n              \"propertyAssignments\": {\r\n                \"nonStandardProperty\": null\r\n              },\r\n              \"stereotypes\": [relation.ontoType.toLowerCase()],\r\n              \"isAbstract\": true,\r\n              \"isDerived\": false\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n/*\r\n    initJson()\r\n    {\r\n      return JSON.parse(`[\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Relator\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#fsd\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#wqe\",\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#vcxv\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n          \"label\": \"offers\",\r\n          \"fromType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"toType\": [\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ],\r\n            [\r\n              \"1\",\r\n              \"1\"\r\n            ]\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Business_Entity\",\r\n          \"label\": \"Business_Entity\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ],\r\n          \"origUri\": \"first\"\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Business_Entity\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#fsd\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/Business_Entityfsd\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#fsd\",\r\n          \"label\": \"fsd\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"from\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ],\r\n          \"origUri\": \"\"\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#Territory\",\r\n          \"label\": \"Territory\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1\r\n          ],\r\n          \"origUri\": \"first\"\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#Territory\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#wqe\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/Territorywqe\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#wqe\",\r\n          \"label\": \"wqe\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\",\r\n            \"to\",\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            1,\r\n            1,\r\n            1\r\n          ],\r\n          \"origUri\": \"\"\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/puromodels#ReleaseType\",\r\n          \"label\": \"ReleaseType\",\r\n          \"ontoType\": \"Kind\",\r\n          \"puroType\": \"BType\",\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            2\r\n          ],\r\n          \"origUri\": \"first\"\r\n        },\r\n        {\r\n          \"type\": \"relation\",\r\n          \"ontoType\": \"Generalization\",\r\n          \"from\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#ReleaseType\"\r\n          ],\r\n          \"to\": [\r\n            \"http://lod2-dev.vse.cz/data/ontomodels#vcxv\"\r\n          ],\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels/relation/Generalization/ReleaseTypevcxv\",\r\n          \"label\": \"nazev\",\r\n          \"fromType\": [\r\n            \"\"\r\n          ],\r\n          \"toType\": [\r\n            \"\"\r\n          ],\r\n          \"fromRelation\": []\r\n        },\r\n        {\r\n          \"uri\": \"http://lod2-dev.vse.cz/data/ontomodels#vcxv\",\r\n          \"label\": \"vcxv\",\r\n          \"ontoType\": \"Role\",\r\n          \"puroType\": false,\r\n          \"fromRelation\": [\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\",\r\n            \"http://lod2-dev.vse.cz/data/puromodels#offers\"\r\n          ],\r\n          \"direction\": [\r\n            \"to\",\r\n            \"to\"\r\n          ],\r\n          \"from\": [\r\n            null\r\n          ],\r\n          \"to\": [\r\n            null\r\n          ],\r\n          \"type\": \"Class\",\r\n          \"branchIndex\": [\r\n            2,\r\n            2\r\n          ],\r\n          \"origUri\": \"\"\r\n        }\r\n      ]`); \r\n    }\r\n    */\r\n}","import RdfController from './RdfController.js';\r\nimport OntoModelController from './OntoModelController';\r\nimport ImageController from './ImageController.js';\r\nimport RuleController from './RuleController.js';\r\nimport MainController from './MainController.js';\r\nimport HistoryController from './HistoryController.js';\r\nimport OntoSchmeController from './OntoSchemaController.js';\r\nimport Iframe from 'react-iframe';\r\n\r\n//chyba nejspíše bude v RDF!! v relationTree je instance v případě prvního XML tam instance není, history of dogs je smazané, tak udělej příklad s tím!!!\r\n// TODO -> v případě dvou otců projdi cyklem a zkontroluj oba!!!!\r\n// TODO -> vyřešit vazby\r\n// TODO -> next element do objektového schématu -> zatím prototyp \r\n// TODO -> třída element pro sjednocení properties \r\n// UNDO \r\n\r\n// Udělat material \r\n// Udělat derivation \r\n// zkontrolovat jestli \r\n\r\n\r\nexport default class EventController extends MainController{\r\n    constructor() {\r\n        super();   \r\n        this.rdfController = new RdfController(); \r\n        this.ontoController = new OntoModelController();  \r\n        this.imageController = new ImageController();\r\n        this.ruleController = new RuleController();\r\n        this.historyController = new HistoryController();\r\n        this.ontoSchemaController = new OntoSchmeController(); \r\n        const queryTreePromise = this.rdfController.getFullPath();\r\n        \r\n        queryTreePromise.then(results => {\r\n            this.queryTree = results;   \r\n            console.log(results);        \r\n        });\r\n        \r\n        const relationsPromise = this.rdfController.getRelations();\r\n        relationsPromise.then(results => {\r\n            this.relations = results;          \r\n        });\r\n\r\n                     \r\n        \r\n\r\n\r\n        this.elSettings = {};\r\n        // Nový začátek \r\n\r\n        this.relationOrderIndex = 0;\r\n        this.relation = {};\r\n        this.relationIndex = 0; \r\n        this.relationType = \"\"; \r\n        \r\n        this.setIndexexToDefault();\r\n\r\n    }\r\n    \r\n    getDefault (firstCall)\r\n    {\r\n      \r\n        // tady se zeptej na type relationu \r\n        // tohle není do defaultu ale do next element\r\n        // hod vyjmku v případě když nebude žádný relation k dispozic\r\n       \r\n        if (this.relationOrderIndex === this.relations.length || this.relations.length === 0)\r\n        {\r\n            if (firstCall === true)\r\n            {\r\n                \r\n                this.relationTree = this.queryTree;\r\n            \r\n                this.ruleKey = \"from\";\r\n                this.elementUri = this.relationTree[this.relationOrderIndex].uri.value;\r\n                this.relation = {uri:{value: null}};\r\n                return this.ruleController.commonRuleSelection(this.relationTree[this.relationOrderIndex], true,this.ontoController.getOntoModel());\r\n            }\r\n            alert(\"Transformation is comlete!!!\");\r\n            return {buttons: [], title: \"The End\", type: \"end\"};\r\n        }\r\n\r\n        \r\n\r\n\r\n        const relation = this.relations[this.relationOrderIndex];\r\n        this.relation = relation;\r\n        this.ruleKey = \"from\";\r\n\r\n        if(this.relation.valuation.length > 0)\r\n        {\r\n           \r\n            //return this.nextElement(\"Relator\",this.relation.uri.value,\"BRelation\",\"from\");\r\n            const question = relation.label.value.charAt(0).toUpperCase() + relation.label.value.slice(1) + \" was typed as a Relator.\"\r\n            return this.createButtons(\"Relator\",question,this.delUri(relation.type.value),false,relation.label.value);\r\n        }\r\n        else\r\n        {\r\n            //this.elUri = relation.uri.value;\r\n            this.elementUri = relation.uri.value;\r\n            \r\n            const question =this.getQuestion(relation.label.value, \"bRelation\");\r\n\r\n            return this.createButtons(this.rulesJson.bRelationRules, question,this.delUri(relation.type.value), false, relation.label.value);            \r\n        }\r\n    }\r\n\r\n\r\n    async nextElement (selectedType, selectedUri, puroType ,elName, nameWasChange) \r\n    {  \r\n        \r\n        let relationRules; \r\n        if (elName !== \"\" && nameWasChange === true)\r\n        {\r\n            this.changeElementsProperty(this.elementUri,\"label\", elName);\r\n        } \r\n    \r\n        if (puroType === \"BRelation\")\r\n        {   \r\n         \r\n           return this.relationWasSelected(selectedType, elName);\r\n        }\r\n        else if (puroType === \"needFather\") \r\n        {\r\n            if (selectedType.toLowerCase() === \"none\")\r\n            {\r\n                this.selectedEl[\"foundFather\"] = selectedType.toLowerCase();\r\n            }\r\n            else\r\n            {\r\n                this.selectedEl[\"foundFather\"] = this.ontoController.getElementByProperty(\"label\",selectedType);\r\n            }\r\n\r\n            return  this.consistencyCheck(); \r\n        }\r\n        else \r\n        {\r\n            \r\n            let relationEl; \r\n            let additionalRule = []; \r\n            let relFlow = puroType;\r\n            let elRelTypes;\r\n            \r\n            if (puroType.includes(\"ontoRelation-save-bRelation\") || puroType.includes(\"material\") )\r\n            {\r\n                if(puroType.includes(\"relator\"))\r\n                {\r\n                    let direction = puroType.replace(\"ontoRelation-save-bRelation-relator-\",\"\");\r\n                    if(direction === \"from\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"to\")\r\n                    {\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType);\r\n                        relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                    }\r\n                    else if (direction === \"material\")\r\n                    {\r\n                       // select type \r\n                       // alert(selectedType)\r\n                    }\r\n                }\r\n                else\r\n                {     \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"fromType\", selectedType[0]);\r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,\"toType\", selectedType[1]);\r\n                    relFlow = this.additionalRule.key === \"last\" ? \"updated\" : relFlow;\r\n                }\r\n\r\n                if (this.lastElInBranch === \"cPhase-next\")\r\n                {\r\n                   \r\n                    if (this.relation[this.ruleKey].length <= this.relationRuleIndex)\r\n                    {\r\n                       \r\n                        this.relationOrderIndex ++;\r\n                        this.setIndexexToDefault();\r\n                        return this.getDefault();\r\n                    } \r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch(); \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                 \r\n                    selectedType = this.elSettings.selectedType;\r\n                    puroType = this.elSettings.puroType;\r\n                    elName = this.elSettings.elName;\r\n                    relationEl = this.elSettings.relationEl;\r\n                    additionalRule = this.elSettings.additionalRule; \r\n                    nameWasChange = this.elSettings.nameWasChange;\r\n                }\r\n\r\n            }\r\n            if (!Array.isArray(selectedType) && selectedType.toLowerCase() === \"none\")\r\n            {  \r\n                this.elSettings.selectedType = selectedType; \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                this.additionalRule.key = \"stop\"; \r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n            \r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    return updateCardinality; \r\n                } \r\n                this.consistencyExeption.push({uri: this.elementUri, ontoType:selectedType, type: puroType});\r\n            \r\n                return this.consistencyCheck(); \r\n            }\r\n            \r\n            if (!puroType.includes(\"ontoRelation\")  && puroType !== \"dataType\")\r\n            {\r\n            //addRUleAsync\r\n\r\n            \r\n               if ((this.additionalRule.key!== \"stop\" && this.additionalRule.key === undefined && (this.additionalRule.index > 1 || this.ontoController.getOntoBranch(this.relation.uri.value,this.ruleKey, this.relationRuleIndex).length === 0)) && this.relation.uri.value !== null)\r\n               {\r\n\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),selectedType, 1)\r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        this.additionalRule.index = 2; \r\n                        this.additionalRule.rule =  this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree));\r\n                        this.additionalRule.key = selectedType;\r\n                    }\r\n               } \r\n               else if (this.additionalRule.index > 1 && this.additionalRule.key !== \"stop\")\r\n               {\r\n                 additionalRule = this.ruleController.getAdditionalRule(this.additionalRule.rule, selectedType, this.additionalRule.index);\r\n                 if (additionalRule.length > 0)\r\n                 {\r\n                    this.additionalRule.index ++; \r\n                 }\r\n                 else\r\n                 {\r\n                    this.additionalRule.key = \"last\";\r\n                 }\r\n\r\n               }\r\n               \r\n               const el = this.getElementByUri(this.elementUri);\r\n               const isElInstance = el !== false && el.father.length > 0 ? this.isElementInstace(this.getElementByUri(el.father[0])): false ; \r\n               relationEl = this.ontoController.getRelationElements(elName,el , this.elementUri,this.relation.uri.value, additionalRule.length, additionalRule.length === 0, puroType, isElInstance, this.ruleKey, nameWasChange,this.relationRuleIndex);\r\n               this.elSettings = {selectedType: selectedType, nameWasChange: nameWasChange, puroType: puroType, ruleKey:this.ruleKey, elName:elName, relationEl: relationEl, additionalRule: additionalRule, relType: \"\", elUri: this.elementUri};\r\n            \r\n               \r\n            \r\n               if ((relationEl === this.relation.uri.value) || this.lastElInBranch === \"cPhase\")\r\n               {\r\n                 const updateRelTypes = this.updateRelationTypes(); \r\n\r\n                if (updateRelTypes !== false)\r\n                {\r\n                    this.lastElInBranch += \"-next\"; \r\n                    return updateRelTypes;\r\n                }\r\n               }\r\n            }\r\n            else if(puroType === \"dataType\")\r\n            {\r\n                relationEl = [selectedType, this.ontoUri+elName];\r\n                this.elSettings.relationEl = relationEl;\r\n                this.elSettings.relType = \"connect\" // rovná čára mezi elementy \r\n                \r\n\r\n                this.ontoController.addToOntoModel(this.ontoUri+elName,elName,\"Datatype\",\"BValue\",this.relation.uri,this.ruleKey, undefined,undefined,undefined,undefined,this.elementUri);\r\n            }\r\n            else \r\n            {\r\n             \r\n                if (puroType.includes(\"ontoRelation-cardinality\"))\r\n                {\r\n              \r\n                    this.elSettings.relType = selectedType; \r\n                }\r\n                else if (puroType.includes(\"ontoRelation-save\"))\r\n                {\r\n               \r\n                    elRelTypes = selectedType;\r\n                }\r\n              \r\n                selectedType = this.elSettings.selectedType;\r\n                puroType = this.elSettings.puroType;\r\n                elName = this.elSettings.elName;\r\n                relationEl = this.elSettings.relationEl;\r\n                additionalRule = this.elSettings.additionalRule; \r\n                nameWasChange = this.elSettings.nameWasChange;\r\n                this.elementUri = this.elSettings.elUri;\r\n               \r\n            } \r\n            relationRules = this.getRelationRules(relationEl, relFlow, selectedUri,this.ruleKey, this.elSettings.selectedType, this.elSettings.relType, elRelTypes);\r\n         \r\n            if (relationRules !== true)\r\n            {\r\n                //vrácení otázky v případě true relation ulož -> může se pokračovat\r\n                return Promise.resolve(relationRules); \r\n            }\r\n            \r\n            if (this.valuationArr !== null)\r\n            {\r\n                \r\n                if (this.valuationArr.length > 0)\r\n                {\r\n                    return this.handleValuation();\r\n                \r\n                }\r\n                else if(this.valuationArr.length === 0)\r\n                {\r\n                   \r\n                    if (this.ruleKey === \"to\" && this.relation.to.length === this.relationRuleIndex)\r\n                    {\r\n                        const lastEl = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value,\"to\",lastEl);\r\n\r\n                        this.elementUri = lastEl; \r\n                        this.lastElInBranch = \"cPhase\";\r\n\r\n                        return this.updateRelationTypes();\r\n                    }\r\n                    else\r\n                    {\r\n                        return this.nextTreeBranch();\r\n                    }\r\n                }\r\n            } \r\n            //Přidání do ontomodelu \r\n            const purType = this.selectedEl === false || !(\"type\" in this.selectedEl) ? false : this.delUri(this.selectedEl.type.value);\r\n\r\n            let origUri = undefined; \r\n            if (this.relationTree[this.relationTree.length - 1].uri.value === this.elementUri)\r\n            {\r\n               const ontoEl = this.ontoController.getOntoElement(this.elementUri); \r\n               if (ontoEl === false)\r\n               {\r\n                 origUri = \"first\"\r\n               }    \r\n            }\r\n\r\n            this.ontoController.addToOntoModel(this.elementUri, this.delUri(this.elementUri),selectedType,\r\n            purType,this.relation.uri.value,this.ruleKey,elName, nameWasChange, this.ontoUri, this.relationRuleIndex, origUri);\r\n          \r\n            \r\n           \r\n            //zjištění dodatečných pravide \r\n            if (additionalRule.length > 0)\r\n            {\r\n                this.selectedEl = this.getNextElement();\r\n                \r\n             \r\n                this.elementUri = this.selectedEl === false || Array.isArray(this.selectedEl) ? \"\" : this.selectedEl.uri.value; \r\n                \r\n                this.selectedEl = this.elementUri === \"\" ? false : this.selectedEl; \r\n                \r\n                return this.ruleController.ruleSelection(undefined,this.ruleKey,this.selectedEl,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,additionalRule,this.queryTree, this.relation.label.value);\r\n            }\r\n            else if (this.additionalRule.key === \"last\")\r\n            {\r\n                \r\n               \r\n                const ontoRelation = this.ontoController.getOntoElement(this.relation.uri.value);\r\n                if (ontoRelation[this.ruleKey].length !== this.relationRuleIndex)\r\n                {\r\n                    const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value,this.ruleKey);\r\n                    this.ontoController.updateOntoModel(ontoRelation.uri, this.ruleKey,lastElUri);\r\n                }\r\n                const updateCardinality = this.updateRelationTypes();\r\n                if (updateCardinality !== false)\r\n                {\r\n                    //this.elSettings.selectedType = \"none\"\r\n                    return updateCardinality; \r\n                } \r\n                else\r\n                {\r\n                   \r\n                    this.additionalRule.key = \"stop\";\r\n                    return this.consistencyCheck(); \r\n                }\r\n            }\r\n            else\r\n            {\r\n                \r\n                this.additionalRule.key = \"stop\"; \r\n                \r\n\r\n                // přiřazení typu neurčeným elementům \r\n\r\n                    if (this.relation.uri.value !== null && this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0)\r\n                    {\r\n                        const lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n                        this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n                    }\r\n            \r\n                    return this.consistencyCheck();\r\n                    \r\n                \r\n            }\r\n\r\n        }\r\n            \r\n    }\r\n\r\n\r\n    consistencyCheck ()\r\n    {\r\n        let next = this.selectedEl !== false && \"foundFather\" in this.selectedEl ? true : false;\r\n        let addNone = false;\r\n        if (this.elementsWithoutType.length === 0 || !next)\r\n        {\r\n            this.elementsWithoutType = this.checkElementsInRelationTree(this.relationTree,this.ontoController.getOntoModel());\r\n        }     \r\n\r\n        if ((this.elementsWithoutType.length > 0 && this.withoutTypeIndex < this.elementsWithoutType.length) || next)\r\n        {        \r\n           \r\n            \r\n            if (next === true && this.selectedEl[\"foundFather\"] === \"None\")\r\n            {\r\n                this.withoutTypeIndex ++; \r\n            }\r\n\r\n            const element = next ? this.selectedEl : this.getElementByUri(this.elementsWithoutType[this.withoutTypeIndex].uri.value);   \r\n\r\n            if (\"needToFindFather\" in element && !next)\r\n            {\r\n                const relationEls = this.ontoController.getOntoBranch(this.relation.uri.value, this.ruleKey, this.relationRuleIndex); \r\n                if (relationEls.length < 2)\r\n                {\r\n                    element[\"foundFather\"] = relationEls[0];\r\n                    next = true; \r\n                    addNone = true;\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    const labels = []; \r\n                    const question = \"To which element is \" + element.label.value + \" connected?\"; \r\n                    this.selectedEl = element; \r\n    \r\n                    for (let el of relationEls)\r\n                    {\r\n                        if (!labels.includes(el.label))\r\n                        {\r\n                            labels.push(el.label);\r\n                        }\r\n                    }\r\n                    labels.push(\"None\");\r\n    \r\n                    return this.createButtons(labels,question,\"needFather\", false, \"\")\r\n                }\r\n\r\n            }\r\n            \r\n            let commonRule = false;  \r\n            if (element !== false)\r\n            {   \r\n                this.withoutTypeIndex ++;\r\n                this.elementUri = element.uri.value;\r\n            \r\n                commonRule = this.ruleController.commonRuleSelection(element,this.getUsableFather(element),this.ruleKey,this.ontoController.getOntoModel(), next, addNone);\r\n            }\r\n\r\n            if (commonRule === undefined)\r\n            {   \r\n                alert(\"Common rule is not defined! Check rules.json\");\r\n                //window.location.reload();\r\n            }\r\n            else if (commonRule !== false)\r\n            {\r\n                this.selectedEl = {}; \r\n                \r\n                return commonRule;\r\n            }\r\n        }\r\n\r\n        let unfinishedTypes = this.checkElementsConsistency(this.relation.uri.value, this.ruleKey); \r\n                    \r\n        if (unfinishedTypes.length > 0)\r\n        {              \r\n            for (let exeption of this.consistencyExeption)\r\n            {\r\n                for (let index in unfinishedTypes)\r\n                {\r\n                    if(exeption.uri === unfinishedTypes[index].element && unfinishedTypes[index].types.includes(exeption.ontoType) && exeption.type === unfinishedTypes[index].key)\r\n                    {\r\n                        unfinishedTypes.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n    \r\n            if ((unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"Relator\") && unfinishedTypes[0].types.includes(\"None\")) || (unfinishedTypes.length > 0 && unfinishedTypes[0].types.includes(\"None\") && unfinishedTypes[0].types.length === 1))\r\n            {\r\n                unfinishedTypes.splice(0, 1);  \r\n            }\r\n        }\r\n        \r\n        if (unfinishedTypes.length > 0)\r\n        {\r\n            const question = this.createQuestion(unfinishedTypes[0], this.rulesJson.questions); \r\n            this.elementUri = unfinishedTypes[0].element;\r\n            return this.createButtons(unfinishedTypes[0].types, question, unfinishedTypes[0].key,true);                               \r\n        }\r\n        else if (this.relation.uri.value === null)\r\n        {\r\n            return this.getDefault(); \r\n        }\r\n        else\r\n        {\r\n            \r\n            if (this.relation === null)\r\n            {\r\n                this.getDefault(); \r\n            }\r\n            \r\n            if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n            {\r\n                this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n                if (this.valuationArr.length > 0)\r\n                { \r\n                   return this.handleValuation(); \r\n                }\r\n            }\r\n            \r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex && this.ruleKey !== \"from\")\r\n            {\r\n                const rel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n\r\n                if (rel.to.length < this.relationRuleIndex)\r\n                {\r\n                    const lastEl = this.ontoController.getLastElement(rel.uri,\"to\");\r\n                    this.ontoController.updateOntoModel(rel.uri, \"to\", lastEl.uri);\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n                    return this.updateRelationTypes(true); \r\n                }\r\n\r\n\r\n                this.setIndexexToDefault();\r\n                this.relationOrderIndex ++;\r\n                return this.getDefault();\r\n            } \r\n            else\r\n            {\r\n                \r\n                return this.nextTreeBranch(); \r\n            }   \r\n    \r\n        }\r\n    }\r\n\r\n    updateRelationTypes ()\r\n    {\r\n        const ontoRel = this.ontoController.getOntoElement(this.relation.uri.value);\r\n       \r\n        if (ontoRel.to.length > 0 && ontoRel.from.length > 0)\r\n        {\r\n           \r\n            if (ontoRel.ontoType === \"Relator\" && ontoRel.fromType.length < ontoRel.from.length)\r\n            {   \r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-from\",rule,\"from\",ontoRel.from[ontoRel.fromType.length],ontoRel.uri);\r\n            }\r\n            else if (ontoRel.ontoType === \"Relator\" && ontoRel.toType.length < ontoRel.to.length) \r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation-relator-to\",rule,\"to\",ontoRel.uri,ontoRel.to[ontoRel.toType.length]);\r\n            }\r\n       /*   else if (ontoRel.ontoType === \"Relator\" && !(\"materialExists\" in ontoRel))\r\n            {\r\n                this.ontoController.addToProperty(ontoRel.uri,\"materialExists\", true); \r\n                return this.createButtons([\"yes\", \"no\"], \"is there material\",\"relator-material\",\"sda\",\"sdsad\"); \r\n            } */\r\n            else if (ontoRel.toType.length < ontoRel.to.length || ontoRel.fromType.length < ontoRel.from.length)\r\n            {\r\n                const rule = this.ruleController.getSpecificRule(this.rulesJson[ontoRel.ontoType],\"cardinality\");\r\n                const ontoRelFromN = ontoRel.from.length <= ontoRel.fromType.length ? ontoRel.from.length - 1 :  ontoRel.fromType.length\r\n                const ontoRelToN = ontoRel.to.length <= ontoRel.toType.length ? ontoRel.to.length - 1 :  ontoRel.toType.length\r\n                return this.createRelCardinalityBtn(\"ontoRelation-save-bRelation\",rule,\"to\",ontoRel.from[ontoRelFromN],ontoRel.to[ontoRelToN]);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleValuation () \r\n    {\r\n        const question = this.getQuestion(this.delUri(this.valuationArr[0].valuation),\"valuations\"); \r\n        const buttons = this.createButtons(this.valuationArr[0].el, question, \"dataType\",true); \r\n        this.elementUri = this.valuationArr[0].valuation; \r\n        this.valuationArr.shift();\r\n        return buttons;  \r\n    }\r\n\r\n    nextTreeBranch () \r\n    {\r\n        if (this.valuationArr === null && this.relationRuleIndex === 1)\r\n        {\r\n         \r\n            this.valuationArr = this.getAllTreeValuations(this.ruleKey);\r\n            // vrat dotaz na Value\r\n            if (this.valuationArr.length > 0)\r\n            {\r\n                return this.handleValuation();\r\n            \r\n            }\r\n        }\r\n        \r\n\r\n        if (this.ontoController.getOntoElement(this.relation.uri.value).from.length === 0 || (this.relationRuleIndex > 1 && this.ruleKey === \"from\"))\r\n        {\r\n            let lastElUri = this.ontoController.getLastElementUri(this.relation.uri.value, this.ruleKey);\r\n            this.ontoController.updateOntoModel(this.relation.uri.value, this.ruleKey, lastElUri);\r\n        }\r\n        \r\n        \r\n\r\n        let relationTypePromise; \r\n\r\n        //number of branches -> uprav \r\n        if (this.relationTreeIndex === this.relationTreeArr.length)\r\n        {\r\n            if (this.relation[this.ruleKey].length === this.relationRuleIndex)\r\n            {\r\n               this.ruleKey = this.ruleKey === \"from\" ? \"to\": \"from\"; \r\n               this.relationRuleIndex = 0;\r\n            }   \r\n     \r\n            relationTypePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n            this.relationRuleIndex ++; \r\n        }\r\n        else\r\n        {   \r\n            relationTypePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n\r\n        this.additionalRule.key = undefined;\r\n        this.additionalRule.index = 0; \r\n        this.consistencyExeption = [];\r\n\r\n\r\n        return new Promise(resolve => {relationTypePromise.then((results) => {\r\n            this.valuationArr = null;\r\n            console.log(results)\r\n            resolve (this.handleRelatedElements(results,\"nextElement\",this.ruleKey ))\r\n        });});\r\n    }\r\n\r\n    getAllTreeValuations (ruleKey)\r\n    {\r\n        let valuations = [];\r\n        for(let treeEl of this.relationTree)\r\n        {\r\n          \r\n            let el = this.getElementByUri(treeEl.uri.value);\r\n            if (el.valuation.length > 0)\r\n            {\r\n                let connectElement = el.uri.value; \r\n                if (this.delUri(el.type.value) === \"BObject\" || el.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                {\r\n                    const lastTypes = this.rulesJson[\"lastTypes\"];\r\n                    let lastEl = [];\r\n                    for (let type of lastTypes)\r\n                    {\r\n                      lastEl = lastEl.concat(this.ontoController.getElementsByOntoType(type, this.relation.uri.value));\r\n                    }\r\n                    if (lastEl.length > 0) {\r\n                        connectElement = lastEl[0]; \r\n                    }\r\n                }\r\n\r\n                for (let valuation of el.valuation)\r\n                {\r\n                    valuations.push({el: connectElement, valuation: valuation})\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ruleKey === \"from\")\r\n        {\r\n            for (let valuation of this.relation.valuation)\r\n            {\r\n                valuations.push({el: this.relation.uri.value, valuation: valuation})\r\n            }\r\n        }\r\n\r\n        for (let index in valuations)\r\n        {\r\n            if (this.ontoController.getElementByProperty(\"origUri\",valuations[index].valuation) !== false)\r\n            {\r\n                valuations.splice(index, 1);   \r\n            }\r\n        }\r\n\r\n        return valuations; \r\n    }\r\n\r\n\r\n    getGraphSvg  () \r\n    {\r\n        let ontoModel = this.ontoController.getOntoModel();\r\n\r\n        let svg = this.imageController.createGraph(ontoModel);\r\n        return svg; \r\n\r\n    }\r\n    \r\n    createRelCardinalityBtn (type, rule, ruleKey, fromE, toE, relationFlow, elUri) \r\n    {\r\n  \r\n        type += (relationFlow === \"dataType\") ? \"-daType\" : \"\"; \r\n        \r\n        let fromB = rule.fromT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"from\"};\r\n            });\r\n        \r\n        let toB = rule.toT.map(ruleClass => {\r\n            return {\"name\": ruleClass, \"uri\":elUri, direction: \"to\"};\r\n        });\r\n\r\n        const  labelFromE = this.selectElementsLabel(fromE);\r\n        const labelToE = this.selectElementsLabel(toE);\r\n        \r\n        return {\"buttons\": toB.concat(fromB) , \"title\": \"Select cardinality between elements\", \"type\": type, \"elName\": [labelFromE, labelToE]};\r\n    }\r\n\r\n    selectElementsLabel(element)\r\n    {\r\n         let ontoEl = this.ontoController.getOntoElement(element);\r\n         let label; \r\n         if (ontoEl === false)\r\n         {\r\n             if (element === this.elSettings.elUri)\r\n             {\r\n                label = this.elSettings.elName === \"\" ? this.delUri(element) : this.elSettings.elName; \r\n             }\r\n             else\r\n             {\r\n                 label = this.delUri(element)\r\n             }\r\n         }\r\n         else\r\n         {\r\n            label = ontoEl.label\r\n         }\r\n\r\n         return label; \r\n    }\r\n   \r\n    getRelationRules  (elements, relType, elUri, ruleKey,ontoType, relOntoType, elRelTypes ) \r\n    {\r\n            \r\n        let fromE;\r\n        let toE;\r\n\r\n        let fromEType;\r\n        let toEType; \r\n\r\n        let relationFlow = relType.replace(\"ontoRelation-\", \"\");\r\n        let rule;\r\n        let relationRules = this.rulesJson.relationRules;  \r\n        \r\n \r\n        if (Array.isArray(elements)) {\r\n           fromE = elements[0];\r\n           toE = elements[1];\r\n           fromEType = this.ontoController.getElementOntoType(fromE);\r\n           toEType = this.ontoController.getElementOntoType(toE);\r\n\r\n           fromEType = fromEType === false ? ontoType : fromEType;\r\n           toEType = toEType === false ? ontoType : toEType; \r\n           rule = this.findRule(relationRules, [\"from\", fromEType, \"to\", toEType]);\r\n            \r\n        }\r\n        else\r\n        {\r\n            return true; \r\n        }\r\n        \r\n        if (relType === \"updated\")\r\n        {\r\n            return true;\r\n        }\r\n        if (rule === false && !relationFlow.includes(\"save\"))\r\n        {\r\n            alert(\"Relation rule is not defined! Check rules.json!\"); \r\n    \r\n        }\r\n        \r\n        if (!relationFlow.includes(\"save\") && (relationFlow === \"cardinality\" || relationFlow === \"dataType\" || rule.offer.length === 1))\r\n        {\r\n           \r\n           \r\n            // Vyhod chybu, že není definované pravidlo pro dva typy!! \r\n            if (\"fromT\" in rule && \"toT\" in rule)\r\n            {\r\n                \r\n                this.elSettings.relType = (rule.offer.length === 1) ? rule.offer[0] : this.elSettings.relType ;   \r\n                return this.createRelCardinalityBtn(\"ontoRelation-save\",rule,ruleKey,fromE,toE,relationFlow,elUri);\r\n            }\r\n            else\r\n            { \r\n                \r\n                relOntoType = (rule.offer.length === 1) ? rule.offer[0] : relOntoType; \r\n                this.ontoController.addRelation(relOntoType, fromE, toE, undefined, \"nazev\", \"\", \"\");\r\n\r\n                return true;\r\n            }\r\n\r\n            \r\n        }\r\n        else if (relationFlow.includes(\"save\"))\r\n        {\r\n            this.ontoController.addRelation(this.elSettings.relType, fromE, toE, undefined, \"nazev\", elRelTypes[0], elRelTypes[1]);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n\r\n           let result = rule.offer.map((ruleClass) => {\r\n            return {\"name\": ruleClass, \"uri\":elUri,\"origin\":ruleKey};\r\n           });\r\n\r\n           this.elementUri = elUri;\r\n\r\n           return {\"buttons\": result, \"title\": \"Which type of relation is between \"+ this.delUri(fromE) +\" and \" + this.delUri(toE)+\"?\", \"type\": \"ontoRelation-cardinality\"};        \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    findRule (rules, condition) \r\n    {\r\n        let validity = false;  \r\n        for (let rule of rules)\r\n        {\r\n            validity = false;\r\n            for (let index = 0; index < condition.length; index += 2 ) \r\n            {  \r\n                for (let ontoType of rule[condition[index]])\r\n                {\r\n                    if (this.isSameCaseInsensitive(condition[index + 1],ontoType) || ontoType === \"*\")\r\n                    {   \r\n                        if (validity === true)\r\n                        {\r\n                            return rule; \r\n                        } \r\n                        validity = true;\r\n                        break; \r\n                    }\r\n\r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return false; \r\n    }\r\n\r\n    relationWasSelected (selectedType, elName) \r\n    {\r\n        \r\n        this.ruleKey = \"from\";\r\n        this.relation = this.relations[this.relationOrderIndex];\r\n        this.relationType = selectedType; \r\n        elName = elName === \"\" ? this.relation.label.value : elName;\r\n        //selected type do object property\r\n        \r\n        let rule = this.rulesJson[selectedType];\r\n        let relationTreePromise;\r\n        \r\n        if(this.relationTreeArr.length === this.relationTreeIndex)\r\n        {\r\n            relationTreePromise = this.getRelatedElements(this.relation,this.ruleKey);\r\n        }\r\n        else\r\n        {\r\n            relationTreePromise = Promise.resolve(this.relationTreeArr);\r\n        }\r\n        \r\n        \r\n        this.relationRuleIndex ++; \r\n\r\n        \r\n        this.ontoController.addRelation(selectedType, \"\" , \"\", this.relation.uri.value, elName);\r\n  \r\n        return new Promise(resolve => {relationTreePromise.then(results => {\r\n            resolve (this.handleRelatedElements(results,\"relationWasSelected\", this.ruleKey, rule));\r\n\r\n         });});\r\n    }\r\n\r\n    handleRelatedElements (elements, origin, ruleKey, rule) \r\n    {\r\n\r\n\r\n        rule = rule === undefined ? this.rulesJson[this.relationType] : rule;\r\n        this.relationTreeArr = elements; \r\n        this.relationTree = elements[this.relationTreeIndex];\r\n        this.relationTreeIndex ++; \r\n        this.relationIndex = this.relationTree.length - 1;        \r\n        if (origin === \"relationWasSelected\" || this.ontoController.getOntoElement(this.relationTree[this.relationIndex].uri.value) !== false)\r\n        {\r\n            \r\n            const nextElement = this.getNextElement();\r\n            \r\n            \r\n            let additionalRule = [];\r\n            let fatherType = \"\"; \r\n            let el = false; \r\n            let bObjectChild = false;\r\n            let prevEl = false; \r\n            let lastEl = null;\r\n            if (Array.isArray(nextElement) && nextElement[1] === false)\r\n            {\r\n               \r\n                prevEl = nextElement[0]; \r\n                fatherType = nextElement[0].ontoType; \r\n                const rdfEl = this.getElementByUri(nextElement[0].uri); \r\n                \r\n                if (rdfEl !== false && rdfEl.child.length > 0)\r\n                {\r\n                    \r\n                    el = this.getElementByUri(rdfEl.child[0]);\r\n                    this.selectedEl = el;\r\n                    bObjectChild = true;\r\n                }\r\n                this.ontoController.updateOntoModel(nextElement[0].uri,\"branchIndex\",this.relationRuleIndex,false);\r\n               \r\n                if ((this.relationRuleIndex > 1 || prevEl.fromRelation.length > 0) && !this.additionalRule.index > 0)\r\n                {\r\n                    this.additionalRule.index ++; \r\n                }\r\n            \r\n            }\r\n            else\r\n            {\r\n                this.selectedEl = nextElement; \r\n                el = this.getElementByUri(this.selectedEl.uri.value);\r\n                if (el.father.length > 0)\r\n                {\r\n                  fatherType = this.ontoController.getElementOntoType(el.father[0]); \r\n                }\r\n            }\r\n    \r\n            if (fatherType !== \"\" && fatherType !== false)\r\n            {                \r\n        \r\n                const elements = this.ontoController.getElementsFromBranch(prevEl.uri);\r\n               \r\n                let addIndex = 1; \r\n                let prevAdd = []; \r\n                for (let index in elements)\r\n                {\r\n                    let node = this.ontoController.getOntoElement(elements[index]);\r\n                    if (node.origUri === \"first\")\r\n                    {\r\n                        elements.length = parseInt(index) + parseInt(1); \r\n                        break;\r\n                    }\r\n                }\r\n\r\n              \r\n                for (let index = elements.length - 1; index >= 0; index--) {\r\n                   \r\n                    let element = this.ontoController.getOntoElement(elements[index])\r\n                    additionalRule = this.ruleController.getAdditionalRule(this.ruleController.getSpecificRule(this.rulesJson[this.relationType],this.ruleKey,false, this.countBTypesInTree(this.relationTree)),element.ontoType, addIndex);\r\n                 \r\n                    if (additionalRule.length > 0)\r\n                    {\r\n                        prevAdd = additionalRule;\r\n                        this.additionalRule.index ++;\r\n                        addIndex = this.additionalRule.index;\r\n                    }\r\n                    else\r\n                    {   \r\n                      \r\n                        if (prevAdd.includes(element.ontoType))\r\n                        {\r\n                            additionalRule = []; \r\n                            break; \r\n                        }\r\n                        else\r\n                        {\r\n                            lastEl = element; \r\n                            this.additionalRule.key = fatherType;\r\n                            additionalRule = prevAdd; \r\n                            break; \r\n                        }\r\n\r\n                    }\r\n\r\n                    if (index === elements.length - 1)\r\n                    {\r\n                        this.additionalRule.key = fatherType;\r\n                        additionalRule = prevAdd; \r\n                    }\r\n                }\r\n\r\n                if (additionalRule.length > 0)\r\n                {\r\n                    this.additionalRule.rule = this.ruleController.getSpecificRule(rule,ruleKey, this.countBTypesInTree(this.relationTree));\r\n                }\r\n            }\r\n          \r\n            if (additionalRule.length === 0)\r\n            {\r\n                if (el === false && bObjectChild === true) \r\n                {\r\n                    return this.nextTreeBranch();\r\n                }\r\n                if (origin !== \"relationWasSelected\"  && bObjectChild === true)\r\n                {\r\n\r\n                    //uprav vztah\r\n                    //tady uprav poslední node ve větvi! -> vlož seller\r\n      \r\n            \r\n                    this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n\r\n                    this.elementUri = prevEl.uri; \r\n\r\n                    this.lastElInBranch = \"cPhase\";\r\n\r\n\r\n\r\n                    return this.updateRelationTypes(true); \r\n                    \r\n                }\r\n                else if (origin === \"relationWasSelected\" && (bObjectChild === true || prevEl !== false))\r\n                {\r\n                   // diferent branch f\r\n        \r\n                   this.ontoController.updateOntoModel(this.relation.uri.value,ruleKey, prevEl.uri);\r\n                   return this.nextTreeBranch(); \r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                    return this.ruleController.ruleSelection(rule,ruleKey,el,this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.queryTree, this.relation.label.value);\r\n                }\r\n\r\n            }\r\n            else\r\n            {  \r\n                //selectUridle\r\n                if (el !== false)\r\n                {\r\n                    this.elementUri = this.selectedEl.uri.value;\r\n                }\r\n                else\r\n                {\r\n                    this.elementUri = \"\";\r\n                }\r\n                let lastLabel; \r\n                if (lastEl !== null)\r\n                {\r\n                    this.elementUri = lastEl.uri;\r\n                    lastLabel = lastEl.label;\r\n                }\r\n                else\r\n                {\r\n                    lastLabel = prevEl.label;\r\n                }\r\n\r\n                return  this.ruleController.ruleSelection(undefined,ruleKey,el,lastLabel,additionalRule,this.queryTree, this.relation.label.value);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const rule = this.rulesJson[this.relationType];\r\n            \r\n            //Zkontroluj zda element useless a jaký typ!!! \r\n            this.selectedEl = this.relationTree[this.relationIndex];\r\n\r\n            // check if\r\n            //podívej se jestli se nachází v onto modelu... \r\n            \r\n            //počítá se dle délky pole +1!!\r\n            this.relationIndex --;\r\n    \r\n            this.elementUri = this.selectedEl.uri.value;\r\n        \r\n            return (this.ruleController.ruleSelection(rule,ruleKey,this.selectedEl, this.ontoController.getLastElement(this.relation.uri.value, this.ruleKey).label,undefined,this.queryTree, this.relation.label.value));\r\n        }\r\n\r\n    }\r\n\r\n    deleteDuplicityInRelTree (dupArray)\r\n    {\r\n        let checkArr = dupArray;\r\n        for (let node of this.relationTree)\r\n        {\r\n            for (let child of dupArray)\r\n            {\r\n                if (node.uri.value === child)\r\n                {\r\n                    checkArr = checkArr.filter(e => e !== child); \r\n                }\r\n            }\r\n        }\r\n\r\n        return checkArr;\r\n    }\r\n\r\n    getElementsWithoutType (element, elWithoutType)\r\n    {\r\n        const currEl = this.getElementByUri(element.uri.value);\r\n        if (currEl.child.length > 0)\r\n        {   \r\n            for (let child of currEl.child)\r\n            {\r\n                const childEl = this.getElementByUri(child); \r\n                if ((!this.isElementInstace(childEl) || (childEl.child.length > 1)) && this.ontoController.getOntoElement(childEl.uri.value) === false)\r\n                { \r\n                    if (!childEl.fatherTypeRelation.includes(\"http://lod2-dev.vse.cz/ontology/puro#instanceOf\"))\r\n                    {   \r\n                        elWithoutType.push(childEl);\r\n                    }\r\n                    else\r\n                    {\r\n                        const checkArr = this.deleteDuplicityInRelTree(childEl.child);\r\n\r\n                        if (checkArr.length > 0)\r\n                        {\r\n                            for (let uri of checkArr)\r\n                            {\r\n                              \r\n                                const el = this.getElementByUri(uri); \r\n                                let fatherWithouType = this.getUsableFather(el); \r\n                                fatherWithouType = this.deleteDuplicityInRelTree(fatherWithouType);\r\n                                for (let i in fatherWithouType)\r\n                                {\r\n                                    fatherWithouType[i] = this.getElementByUri(fatherWithouType[i]);\r\n                                    fatherWithouType[i][\"needToFindFather\"] = true; \r\n                                }\r\n                                \r\n                                elWithoutType = elWithoutType.concat(fatherWithouType);\r\n                            }\r\n                        }\r\n\r\n                        \r\n                    }\r\n\r\n                    elWithoutType = this.getElementsWithoutType(childEl,elWithoutType);\r\n                }\r\n            }\r\n        }\r\n        return elWithoutType; \r\n    }\r\n\r\n    checkElementsInRelationTree (tree) \r\n    {\r\n        let elementsWithoutType = [];\r\n        // let withoutType = true; \r\n        for (let element of tree)\r\n        {\r\n            //element s definovaným type \r\n            \r\n            elementsWithoutType = this.getElementsWithoutType(element, elementsWithoutType); \r\n\r\n\r\n            // withoutType = true;\r\n              /*\r\n            for (let node of ontoModel)\r\n            {\r\n                if(element.uri.value === node.uri)\r\n                {\r\n                 \r\n                    withoutType = false;\r\n                }\r\n            }\r\n          \r\n            if (withoutType === true && (!this.isElementUseless(element) || this.relation.uri.value === null) && !this.isElementInstace(element))\r\n            {\r\n                alert(element.uri.value + \" SSSSSS\")\r\n                elementsWithoutType.push(element); \r\n            }\r\n            */\r\n        }\r\n        return elementsWithoutType; \r\n    }\r\n\r\n\r\n    getRelatedElements (relation, key) \r\n    {\r\n\r\n        this.elementConsitencyTree = [];\r\n        this.elementConsistencyIndex = 0;\r\n\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr = [];\r\n\r\n        let promiseArr = [];\r\n        \r\n      \r\n        promiseArr.push(this.rdfController.getRelationBTypes(relation[key][this.relationRuleIndex]));\r\n\r\n\r\n        return Promise.all(promiseArr).then(result => {\r\n            console.log(result)\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (result[i].length > 0)\r\n                {\r\n                    result[i].unshift(this.getElementByUri(relation[key][this.relationRuleIndex-1]));\r\n                    //doplnění prop u elementu\r\n                    result[i] = result[i].map(el => el = this.getElementByUri(el.uri.value));\r\n                }\r\n                else\r\n                {\r\n                  \r\n                   result[i] = [this.getElementByUri(relation[key][i])];\r\n                }\r\n            }\r\n            return result; \r\n        })\r\n   \r\n    }\r\n\r\n    \r\n    getNextElement () \r\n    {\r\n        //koko\r\n \r\n        if(this.relationIndex < 0)\r\n        {\r\n            return false; \r\n        }\r\n\r\n        const ontoModel = this.ontoController.getOntoModel();\r\n        let returnEl;\r\n        if (this.isElementUseless(this.relationTree[this.relationIndex]))\r\n        {\r\n            this.relationIndex --;\r\n        }\r\n         \r\n        //ověření zda už nebyl element určen\r\n    \r\n        for (let index = 0; index < ontoModel.length; index ++) \r\n        {\r\n            if (this.relationTree[this.relationIndex] !== undefined && ontoModel[index].uri === this.relationTree[this.relationIndex].uri.value)\r\n            {\r\n                //Check on another samples \r\n                if (this.areChildrenInBranchUseless(this.relationTree[this.relationIndex]))\r\n                {\r\n                    const lastRel = ontoModel[index].fromRelation[ontoModel[index].fromRelation.length - 1]; \r\n                    const lastDirection = ontoModel[index].direction[ontoModel[index].direction.length - 1]; \r\n                    \r\n                    let lastElement = this.ontoController.getLastElementUri(lastRel,lastDirection);  \r\n                    \r\n\r\n                    while (this.ontoController.getCardinalElement(lastElement, false) !== false)\r\n                    {\r\n                        lastElement = this.ontoController.getCardinalElement(lastElement,false);\r\n                    }\r\n                   \r\n                    lastElement = this.ontoController.getElementInRelRow(lastElement);\r\n            \r\n                    lastElement = this.ontoController.getOntoElement(lastElement);\r\n\r\n                    const allBranchBtypes = this.ontoController.getOntoBranch(lastRel, lastDirection); \r\n         \r\n                    //btype může jít do více realtionů\r\n                    for (let el of allBranchBtypes)\r\n                    {\r\n                        this.ontoController.addToProperty(el.uri, \"fromRelation\", this.relation.uri.value);\r\n                        this.ontoController.addToProperty(el.uri, \"direction\", this.ruleKey);\r\n                    }\r\n               \r\n                    return [lastElement, false];  \r\n                }\r\n                this.relationIndex --;\r\n                index = 0;  \r\n            }\r\n            \r\n        }  \r\n      \r\n        returnEl = this.relationTree[this.relationIndex];\r\n        \r\n        returnEl = returnEl === undefined ? false : returnEl;\r\n        this.relationIndex --; \r\n        return returnEl;\r\n    }\r\n\r\n    areChildrenInBranchUseless (element)\r\n    {\r\n        if (element.childRel.includes(\"http://lod2-dev.vse.cz/ontology/puro#subTypeOf\"))\r\n        {\r\n           return false;\r\n        }\r\n\r\n        return true; \r\n    }\r\n\r\n    isElementInstace (element) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n           \r\n            if (element.uri.value === node.uri.value  )\r\n            {\r\n                for (let type of node.fatherTypeRelation)\r\n                {\r\n                    if (this.delUri(type) === \"instanceOf\" || this.delUri(type) === \"Some_objects\")\r\n                    {\r\n                        return true; \r\n                    }\r\n                }\r\n            \r\n            }\r\n        }\r\n        return false; \r\n    } \r\n    \r\n    checkElementsConsistency  (relation,ruleKey) \r\n    {\r\n        //tady se to může projet od začátku do konce zas tolik to nevádí :) \r\n        let ontoModel = this.ontoController.getOntoModel();\r\n        let consistencyIndex = 0; \r\n        const consistencyTree = []; \r\n\r\n        for (let node of ontoModel)\r\n        {\r\n            if (node.fromRelation.includes(relation) && node.direction[node.direction.length - 1] === ruleKey && node.branchIndex.includes(this.relationRuleIndex))\r\n            {\r\n            \r\n                consistencyTree.push(node); \r\n            }\r\n        }\r\n\r\n   \r\n       \r\n        if (consistencyTree.length === 0)\r\n        {\r\n            return consistencyTree; \r\n        }\r\n        \r\n        let elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex],this.ontoController);\r\n        //nejsem si jist druhou podmínkou ale \r\n        \r\n        consistencyIndex ++;\r\n\r\n\r\n        while (consistencyIndex < consistencyTree.length && elementTypes.length === 0)\r\n        {\r\n            \r\n            elementTypes = this.ruleController.elementConsistencyRules(consistencyTree[consistencyIndex], this.ontoController);\r\n            consistencyIndex ++; \r\n        }\r\n      \r\n\r\n        return elementTypes; \r\n    }\r\n\r\n    // element ve formátu queryTree!!\r\n    isElementUseless (element) \r\n    {\r\n      \r\n        if ('child' in element) {\r\n            if (element.child.length === 0 && element.connect.length === 0 && element.connectFrom.length === 0)\r\n            {       \r\n                return true; \r\n            }\r\n        } \r\n        return false; \r\n    }\r\n\r\n    getElementByUri (uri) \r\n    {\r\n        for (let node of this.queryTree)\r\n        {\r\n            if (node.uri.value === uri) {\r\n                return node; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    changeElementsProperty (uri, property, value)\r\n    {\r\n        for (let i = 0; i < this.queryTree.length; i++) {\r\n            if (this.queryTree[i].uri.value === uri)\r\n            {\r\n                this.queryTree[i][property].value = value;\r\n                return true; \r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    checkDuplicity (elName) \r\n    {\r\n        return this.ontoController.checkDuplicity(elName);\r\n    }\r\n     \r\n    getConnectedElements (rule, elements) \r\n    {\r\n        let result = [];\r\n        for (let element of elements)\r\n        {\r\n            let ontoType = this.ontoController.getElementOntoType(element);\r\n\r\n            if (ontoType === false || rule[this.ruleIndex].connect.includes(ontoType))\r\n            {\r\n                let name = (ontoType !== false) ? this.delUri(element)+ \" [\"+ontoType+\"]\" : this.delUri(element);\r\n                result.push({\"name\": name, \"uri\":element})\r\n            }\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n    setIndexexToDefault  ()  \r\n    {      \r\n        this.valuationArr = null;  \r\n\r\n        this.relationRuleIndex = 0; \r\n\r\n        this.relationTree = {};\r\n        this.relationTreeIndex = 0; \r\n        this.relationTreeArr =[];\r\n        this.elementsWithoutType = [];\r\n        this.withoutTypeIndex = 0; \r\n\r\n        this.elementConsistencyIndex = 0; \r\n        this.elementConsitencyTree = [];\r\n\r\n        this.elementUri = \"\";\r\n        this.ruleKey = \"\";\r\n        this.type = \"\";\r\n\r\n\r\n        this.selectedEl = {};\r\n        this.elSettings = {};\r\n\r\n        this.lastElInBranch = false; \r\n\r\n\r\n        this.additionalRule = {key: undefined, rule: {}, index: 1}; \r\n\r\n\r\n        this.consistencyExeption = []; \r\n        // Nový začátek \r\n\r\n    }\r\n\r\n    saveHistory (record, inputVariables)\r\n    {\r\n        if (this.historyController.propertiesHistory.length === 0)\r\n        {\r\n            let initRec = {};\r\n            for (let key in record) \r\n            {\r\n               \r\n                if (record[key] === \"queryTree\")\r\n                {\r\n                    initRec[key] = JSON.parse(JSON.stringify(this.queryTree));\r\n                }\r\n                else if (typeof record[key] === \"string\")\r\n                {\r\n                    initRec[key] = \"\"; \r\n                }\r\n                else if (typeof record[key] === \"number\") \r\n                {\r\n                    initRec[key] = 0;\r\n                }\r\n                else if (Array.isArray(record[key]))\r\n                {\r\n                    initRec[key] = []\r\n                }\r\n                else if (typeof record[key] === \"object\")\r\n                {\r\n                    initRec[key] = {}\r\n                }\r\n            }\r\n            this.historyController.init(initRec);\r\n        }\r\n\r\n\r\n        this.historyController.saveRecords(record,JSON.parse(JSON.stringify(this.ontoController.getOntoModel())), inputVariables);\r\n    }\r\n  \r\n    undo()\r\n    {\r\n        const history = this.historyController.undo(); \r\n\r\n\r\n        if (history.ontoModel === undefined && history.properties === undefined)\r\n        {\r\n  \r\n            this.historyController.reset();\r\n            this.ontoController.undo([]);\r\n            this.setIndexexToDefault();\r\n            this.elSettings = {};\r\n            this.relationOrderIndex = 0;\r\n            this.relationRuleIndex = 0; \r\n            this.relation = {};\r\n            this.relationIndex = 0; \r\n            this.relationType = \"\"; \r\n            return false; \r\n        }\r\n        this.ontoController.undo(history.ontoModel);\r\n\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        for (let prop in history.properties)\r\n        {\r\n            if (typeof history.properties[prop] === \"object\")\r\n            {\r\n                console.log(prop)\r\n                console.log(JSON.parse(JSON.stringify(this[prop])))\r\n                this[prop] = JSON.parse(JSON.stringify(history.properties[prop]))\r\n                \r\n            }\r\n            else\r\n            {\r\n                this[prop] = history.properties[prop]; \r\n            }\r\n            \r\n        }\r\n        console.log(JSON.parse(JSON.stringify(this.additionalRule)))\r\n        return {inputVariables: history.inputVariables};\r\n    }\r\n\r\n    getOntoSchema ()\r\n    {\r\n        return this.ontoSchemaController.transform(this.ontoController.getOntoModel());\r\n    }\r\n\r\n    getIframeURL ()\r\n    {\r\n\r\n        return this.rulesJson[\"iframeURL\"].replace(\"MODELID\",this.modelId); \r\n    }\r\n\r\n    fullSizeSvg ()\r\n    {\r\n        let index = 0; \r\n       \r\n        for (let node of this.ontoController.getOntoModel())\r\n        {\r\n            if (node.type === \"Class\")\r\n            {\r\n                index ++; \r\n            }\r\n            \r\n            if (index === 4)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n    getUsableFather (element)\r\n    {\r\n        //doporučuji napojení na druhého otce\r\n        const returnArr = []; \r\n        for (let node of element.father)\r\n        {\r\n            let father = this.getElementByUri(node);\r\n            if (this.isElementInstace(father) === false) returnArr.push(father.uri.value); \r\n\r\n            while (this.isElementInstace(father))\r\n            {\r\n           \r\n                for (let fatherOfFather of father.father)\r\n                {\r\n              \r\n                    father = this.getElementByUri(fatherOfFather);\r\n                    if (this.isElementInstace(father) === false)\r\n                    {\r\n                   \r\n                        returnArr.push(father.uri.value); \r\n                    }\r\n                }\r\n\r\n                if (returnArr.length > 0) break; \r\n            }\r\n\r\n\r\n        }\r\n        element.father = returnArr; \r\n        return returnArr;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport $ from 'jquery';\nimport fileDownload from 'js-file-download';\nimport mermaid from \"mermaid\";\nimport EventController from './controllers/EventController.js';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport Iframe from 'react-iframe';\n\n\n\n\n\n\n\n//import RdfController from './controllers/RdfController.js';\n//import { thisTypeAnnotation } from \"@babel/types\";\n\n//přiřadit key k talčítkům -> zamyslet se nad využitím \nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n\n    this.eventController = new EventController();\n    this.state = {\n      svg: \"\", iframeURL: this.eventController.getIframeURL(), fullSize: false \n    };\n    \n    mermaid.initialize({\n      startOnLoad: false,\n      themeCSS: '#extensionEnd { fill: white; } #extensionStart { fill: white; } ',\n    });\n  }\n\n  createGraph = (svg) => {\n\n    this.setState({ svg: svg });  \n  }\n\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"form-group col-md-6\" id=\"puroModelContainer\">\n            <label htmlFor=\"puroModel\">Puro model</label>\n            <div className=\"transformWindow border\" id=\"puroModel\">\n              <Iframe url= {this.state.iframeURL}\n                width=\"607px\"\n                height=\"307px\"\n                id=\"iframePuro\"\n                className=\"myClassname\"\n                display=\"initial\"\n                position=\"relative\"/>\n            </div>\n          </div>\n   \n          <div className=\"form-group col-md-6\" id=\"ontoModelContainer\">\n            <TransformWrapper\n              enablePadding={false}>\n              {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n                <React.Fragment>\n                  <div className=\"tools\">\n                    <label htmlFor=\"ontoModel\">Onto model</label>\n                    <button className=\"toolBtn btn-sm btn-light\" onClick={resetTransform}>Unzoom</button>\n                  </div>\n                  <div className=\"border\">\n                    <TransformComponent>\n                      <div dangerouslySetInnerHTML={{ __html: this.state.svg }} className=\"transformWindow\" id=\"ontoModel\">\n                      </div>\n                    </TransformComponent>\n                  </div>\n                </React.Fragment>\n              )}\n            </TransformWrapper>\n          </div>\n          <QuestionPart graphCreation={this.createGraph} eventController={this.eventController} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\n\nclass PuroModel extends React.Component {\n\n  // $(\"#iFrameId\").contents().find(\"#yourDiv\").empty();\n\n\n  render() {\n    return <iframe onLoad={this.loaded} title=\"puro-model\" id=\"iframePuro\" className=\"embed-responsive-item\" src={this.props.iframeURL}></iframe>;\n  }\n\n\n}\n\n\nclass QuestionPart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTransform: true, originalName: \"\", nameWasChange: false,\n      buttons: [], changeName: false, elName: \"\", type: \"\", undoActive: false, svg: \"\", \n    };\n\n    this.eventController = this.props.eventController;\n  }\n\n  handleChange = (event) => {\n    this.setState({ elName: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    if (event !== undefined) {\n      event.preventDefault();\n    }\n\n    //window.addEventListener('unhandledrejection', function(event) {\n    //alert(\"Rule is not defined!\\nOnly the first answer is correct! \\nRules are not complete yet!\\nPage will be reloaded!\");\n    //window.location.reload(); \n    //});\n\n    this.eventController.getDefault(true).then(results => {\n      this.setState({ undoActive: false, svgUrl: \"\", buttons: results.buttons, title: results.title, originalName: results.originalName, type: results.type, startTransform: false });\n    });\n\n  }\n\n  undoClick = () => {\n\n\n\n  }\n\n  handleClick = (selectedType, selectedUri, type) => {\n    let elName = this.state.elName;\n    let undo = false;\n    let setState = true;\n    let nameWasChange = this.state.nameWasChange;\n\n    elName = elName.trim();\n    elName = elName.replace(/ /g,\"_\"); \n\n    if ((elName === \"\" && this.state.changeName === true && type !== \"Undo\") && selectedType.toLowerCase() !== \"none\") {\n      alert(\"Plese write name of the element!\");\n    }\n    else if (elName !== \"\" && !elName.match(/^[A-Za-z0-9-_*<>]+$/)) {\n      alert(\"Please change the name. It contains forbidden characters!\");\n    }\n    else {\n      if (type === \"Undo\") {\n\n        const history = this.eventController.undo();\n        if (history === false) {\n          this.handleSubmit();\n          setState = false;\n        }\n        else {\n          const inputVariables = history.inputVariables;\n          selectedType = inputVariables[0];\n          selectedUri = inputVariables[1];\n          type = inputVariables[2];\n          elName = inputVariables[3];\n          nameWasChange = inputVariables[4];\n\n          undo = true;\n        }\n\n      }\n      elName = elName.replace(/\\s/g, '_');\n\n      if (elName !== \"\" && this.state.changeName === true && !this.eventController.checkDuplicity(elName)) {\n        alert(\"Element already exists! Please choose different name.\")\n      }\n      else if (setState === true) {\n       \n        this.eventController.nextElement(selectedType, selectedUri, type, elName, nameWasChange).then(results => {\n          \n          if (undo === false) {\n            let properties = (Object.getOwnPropertyNames(this.eventController));\n            let historyRecord = {};\n            for (let prop of properties) {\n              if (!prop.includes(\"Controller\") && prop !== \"rulesJson\" && prop !== \"relations\") {\n                if (typeof prop !== 'function') {\n                  historyRecord[prop] = this.assignProp(this.eventController[prop])\n                }\n              }\n            }\n            this.eventController.saveHistory(historyRecord, [selectedType, selectedUri, type, elName, this.state.nameWasChange]);\n          }\n\n          // Set graph\n          let svg = this.eventController.getGraphSvg();\n\n          this.setState({ buttons: results.buttons, type: results.type, title: results.title, undoActive: true, elName: \"\", changeName: results.elName, originalName: results.originalName, nameWasChange: false });\n\n          if (svg !== false) {\n            this.createGraph(svg);\n\n\n          }\n\n          if (this.state.type.includes(\"end\")) {\n            this.handleDownloadImage();\n          }\n\n        });\n      }\n    }\n  }\n\n\n\n  assignProp = (prop) => {\n\n    if (Array.isArray(prop) || typeof prop === 'object') {\n      //how to \n      return JSON.parse(JSON.stringify(prop));\n    }\n    else {\n      return prop;\n    }\n\n  }\n\n  createGraph = (chart) => {\n    const cb = svg => {\n      this.setState({ svg: svg });\n      this.props.graphCreation(svg);\n      if (this.eventController.fullSizeSvg())\n      {\n        $(\"#id1\").addClass(\"fullSize\");\n      }\n      else\n      {\n        $(\"#id1\").removeClass(\"fullSize\");\n      }\n\n    };\n\n    mermaid.render(\"id1\", chart, cb);\n  }\n\n  handleChangeName = () => {\n\n\n    this.setState({ changeName: !this.state.changeName });\n    if (this.state.changeName === true) {\n      this.setState({ elName: \"\", nameWasChange: false });\n      $(\".changeAlert\").fadeTo(1400, 500).slideUp(500, function () {\n        $(\".changeAlert\").alert('fade');\n      });\n    }\n    else {\n      this.setState({ elName: \"\", nameWasChange: true });\n\n    }\n  }\n\n  handleDownloadImage = () => {\n    const svgBlob = new Blob([this.state.svg], { type: \"image/svg+xml;charset=utf-8\" });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    this.setState({ svgUrl: svgUrl });\n\n  }\n\n  handleDownloadSchema = () => {\n    const ontoSchema = JSON.stringify(this.eventController.getOntoSchema());\n    fileDownload(ontoSchema, 'ontoSchema.json');\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid text-center questionPart\">\n\n        <button type=\"Submint\" className={this.state.startTransform ? \"btn btn-primary\" : \"d-none\"} data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleSubmit}>\n          Start transformation\n          </button>\n        <div className={this.state.startTransform ? \"d-none\" : \"\"}>\n          <h3 className=\"questionTitle\">{this.state.title}</h3>\n          <div className=\"optionButtons d-none d-md-block\">\n            <div className=\"btn-group-vertical text-right\">\n              <button type=\"button\" className=\"btn btn-primary btnModal\" onClick={this.handleChangeName} disabled={this.state.originalName === \"\" || this.state.type.includes(\"ontoRelation\") || this.state.type.includes(\"end\") || this.state.type === \"nextBranchElements\" || this.state.type === \"needFather\"}>{this.state.changeName === true && this.state.originalName !== \"\" ? \"Set original name\" : \"Change name\"}</button>\n              <button type=\"button\" className=\"btn btn-primary btnModal\" onClick={() => this.handleClick(undefined, undefined, \"Undo\")} disabled={!this.state.undoActive}>Undo</button>\n              <button type=\"button\" className=\"btn btn-secondary btnModal\" data-dismiss=\"modal\" onClick={(e) => { if (window.confirm('Are you sure you want to cancel the transformation?')) window.location.reload(); }}>Cancel</button>\n            </div>\n          </div>\n          <div className={this.state.changeName === true ? 'col-md-6 mx-auto' : 'd-none'}>\n            <div className=\"input-group inputName\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\" id=\"\">Name of the element:</span>\n              </div>\n              <input placeholder={this.state.originalName === \"\" ? \"Write name of the element!\" : this.state.originalName} type=\"text\" className=\"form-control\" onChange={this.handleChange} value={this.state.elName}></input>\n            </div>\n            <h5 className={this.state.buttons.lenght > 1 ? \"text-center inputName\" : \"d-none\"}>Select element's class:</h5>\n          </div>\n          <div className=\"divButtons text-center\">\n            <TypeButtons buttons={this.state.buttons} title = {this.state.title} onClickDownloadSchema={this.handleDownloadSchema} svgUrl={this.state.svgUrl} onClick={this.handleClick} type={this.state.type} elNames={this.state.changeName} originalName={this.state.originalName} />\n          </div>\n          <div class=\"alert alert-success col-md-6 mx-auto changeAlert\" role=\"alert\">\n            Original name of the element was set!\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass TypeButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refs = React.createRef();\n  }\n\n\n  render() {\n    if (this.props.type.includes(\"ontoRelation-save\")) {\n      return (\n        <div className=\"row col-md-5 mx-auto\">\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[0]}</label>\n          <label className=\"label label-default col-md-6 mx-auto form-control\">{this.props.elNames[1]}</label>\n          <select ref=\"relFrom\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"from\";\n            }).map((rel) => {\n              return <option value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <select ref=\"relTo\" className=\"col-md-6 mx-auto form-control cardinalitySelect\">\n            {this.props.buttons.filter((val) => {\n              return val.direction === \"to\";\n            }).map((rel) => {\n              return <option value={rel.name}>{rel.name}</option>\n            })}\n          </select>\n\n          <button className=\"btn btn-success mx-auto questionPart\" onClick={() => this.props.onClick([this.refs.relFrom.value, this.refs.relTo.value], null, this.props.type)}>Next</button>\n        </div>\n      )\n    }\n    else if (this.props.type.includes(\"end\")) {\n      return (\n        <div className=\"col-md-8 mx-auto\">\n          <a className=\"btn btn-success btnEnd\" href={this.props.svgUrl} download=\"ontoUml-graph.svg\">Download Onto-UML graph</a>\n          <button type=\"button\" className=\"btn btn-success btnEnd\" onClick={() => this.props.onClickDownloadSchema()}>Download Onto-Schema</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"row col-md-6 mx-auto\">\n          {this.props.buttons.map((value) => {\n            return <div className=\"col-md-4 mx-auto\">\n              <button key={this.props.uri} type=\"button\" className={value.name.toLowerCase() === \"none\" ? \" btn btn-secondary btnModal\" : \"btn btn-success btnModal\"} onClick={() => this.props.onClick(value.name, value.uri, this.props.type, value.origin)} >{(this.props.type.includes(\"dataType\") || \n              this.props.title.split(\" \").includes(value.name) || (this.props.originalName === \"\" && this.props.buttons.length === 1) || (value.name.toLowerCase() === \"relator\" && this.props.buttons.length === 1)) ? \"Next\" : value.name}</button>\n            </div>\n          })}\n        </div>\n      )\n    }\n\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return [<Layout />]\n\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}